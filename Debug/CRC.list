
CRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005680  08005680  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005688  08005688  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08005690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  2000028c  0800591c  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  0800591c  00020c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3bb  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f0  00000000  00000000  0002b677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001770b  00000000  00000000  0002ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d382  00000000  00000000  0004634b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878e9  00000000  00000000  000536cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dafb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003000  00000000  00000000  000db008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000028c 	.word	0x2000028c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005304 	.word	0x08005304

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000290 	.word	0x20000290
 80001dc:	08005304 	.word	0x08005304

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <BUTTON_Press_Short_Callback>:
 * CRC 32	10 02 00 11 22 33 24 C2 31 6D 10 03
 */
//uint8_t tx_frame_data[] = {0x00, 0x11, 0x22, 0x33};
uint8_t tx_frame_data[255];
uint8_t tx_frame_len = 0;
void BUTTON_Press_Short_Callback(BUTTON_HandleTypedef *ButtonX){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <BUTTON_Press_Short_Callback+0x24>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d105      	bne.n	80005b0 <BUTTON_Press_Short_Callback+0x1c>
		FRAME_SYNC_Transmit(tx_frame_data, tx_frame_len);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <BUTTON_Press_Short_Callback+0x28>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <BUTTON_Press_Short_Callback+0x2c>)
 80005ac:	f003 f872 	bl	8003694 <FRAME_SYNC_Transmit>
	}
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000334 	.word	0x20000334
 80005bc:	2000044f 	.word	0x2000044f
 80005c0:	20000350 	.word	0x20000350

080005c4 <FRAME_SYNC_RxCpltCallback>:

void FRAME_SYNC_RxCpltCallback(uint8_t *p_rx_data, uint8_t data_size){
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b09e      	sub	sp, #120	; 0x78
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nData: ";
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <FRAME_SYNC_RxCpltCallback+0xb0>)
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005da:	e883 0003 	stmia.w	r3, {r0, r1}
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	225c      	movs	r2, #92	; 0x5c
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fba2 	bl	8003d30 <memset>
	for(int i = 0; i < data_size; i++){
 80005ec:	2300      	movs	r3, #0
 80005ee:	677b      	str	r3, [r7, #116]	; 0x74
 80005f0:	e015      	b.n	800061e <FRAME_SYNC_RxCpltCallback+0x5a>
		char temp_str[4];
		sprintf(temp_str, "%02X ", p_rx_data[i]);
 80005f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	491d      	ldr	r1, [pc, #116]	; (8000678 <FRAME_SYNC_RxCpltCallback+0xb4>)
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fb9c 	bl	8003d40 <siprintf>
		strcat(tx_str, temp_str);
 8000608:	f107 020c 	add.w	r2, r7, #12
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fbb4 	bl	8003d80 <strcat>
	for(int i = 0; i < data_size; i++){
 8000618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800061a:	3301      	adds	r3, #1
 800061c:	677b      	str	r3, [r7, #116]	; 0x74
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000622:	429a      	cmp	r2, r3
 8000624:	dbe5      	blt.n	80005f2 <FRAME_SYNC_RxCpltCallback+0x2e>
	}
	strcat(tx_str, "\nCRC Correct!!!\n");
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdd8 	bl	80001e0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4413      	add	r3, r2
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <FRAME_SYNC_RxCpltCallback+0xb8>)
 800063c:	461d      	mov	r5, r3
 800063e:	4614      	mov	r4, r2
 8000640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000642:	6028      	str	r0, [r5, #0]
 8000644:	6069      	str	r1, [r5, #4]
 8000646:	60aa      	str	r2, [r5, #8]
 8000648:	60eb      	str	r3, [r5, #12]
 800064a:	7823      	ldrb	r3, [r4, #0]
 800064c:	742b      	strb	r3, [r5, #16]
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f107 0110 	add.w	r1, r7, #16
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <FRAME_SYNC_RxCpltCallback+0xbc>)
 8000666:	f001 fc2a 	bl	8001ebe <HAL_UART_Transmit>

}
 800066a:	bf00      	nop
 800066c:	3778      	adds	r7, #120	; 0x78
 800066e:	46bd      	mov	sp, r7
 8000670:	bdb0      	pop	{r4, r5, r7, pc}
 8000672:	bf00      	nop
 8000674:	08005338 	.word	0x08005338
 8000678:	0800531c 	.word	0x0800531c
 800067c:	08005324 	.word	0x08005324
 8000680:	200002ec 	.word	0x200002ec

08000684 <FRAME_SYNC_RxFailCallback>:

void FRAME_SYNC_RxFailCallback(uint8_t *p_rx_data, uint8_t data_size){
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b09d      	sub	sp, #116	; 0x74
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nCRC Fail!!!\n";
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <FRAME_SYNC_RxFailCallback+0x4c>)
 8000692:	f107 040c 	add.w	r4, r7, #12
 8000696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000698:	c407      	stmia	r4!, {r0, r1, r2}
 800069a:	8023      	strh	r3, [r4, #0]
 800069c:	f107 031a 	add.w	r3, r7, #26
 80006a0:	2256      	movs	r2, #86	; 0x56
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fb43 	bl	8003d30 <memset>
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd96 	bl	80001e0 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 010c 	add.w	r1, r7, #12
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <FRAME_SYNC_RxFailCallback+0x50>)
 80006c2:	f001 fbfc 	bl	8001ebe <HAL_UART_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3774      	adds	r7, #116	; 0x74
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0800539c 	.word	0x0800539c
 80006d4:	200002ec 	.word	0x200002ec

080006d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_UART_RxCpltCallback+0x54>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d10a      	bne.n	8000702 <HAL_UART_RxCpltCallback+0x2a>
		COMMAND_LINE_Receive(uart_rx_buf);
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fe4d 	bl	8003390 <COMMAND_LINE_Receive>
		HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	490d      	ldr	r1, [pc, #52]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_UART_RxCpltCallback+0x54>)
 80006fc:	f001 fc71 	bl	8001fe2 <HAL_UART_Receive_IT>
	} else if(huart->Instance == huart2.Instance){
		UART_Receive(uart_rx_buf);
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
	}
}
 8000700:	e00f      	b.n	8000722 <HAL_UART_RxCpltCallback+0x4a>
	} else if(huart->Instance == huart2.Instance){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_UART_RxCpltCallback+0x5c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d109      	bne.n	8000722 <HAL_UART_RxCpltCallback+0x4a>
		UART_Receive(uart_rx_buf);
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fa92 	bl	8003c3c <UART_Receive>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	4905      	ldr	r1, [pc, #20]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_UART_RxCpltCallback+0x5c>)
 800071e:	f001 fc60 	bl	8001fe2 <HAL_UART_Receive_IT>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200002ec 	.word	0x200002ec
 8000730:	20000330 	.word	0x20000330
 8000734:	200002a8 	.word	0x200002a8

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fb4e 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f834 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f8ee 	bl	8000924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000748:	f000 f898 	bl	800087c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800074c:	f000 f8c0 	bl	80008d0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  BUTTON_Init(&btn, GPIOA, GPIO_PIN_0, 0);
 8000750:	2300      	movs	r3, #0
 8000752:	2201      	movs	r2, #1
 8000754:	490f      	ldr	r1, [pc, #60]	; (8000794 <main+0x5c>)
 8000756:	4810      	ldr	r0, [pc, #64]	; (8000798 <main+0x60>)
 8000758:	f003 f994 	bl	8003a84 <BUTTON_Init>
  BUTTON_Set_Callback_Function(NULL, NULL, BUTTON_Press_Short_Callback, NULL);
 800075c:	2300      	movs	r3, #0
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <main+0x64>)
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f003 f9b8 	bl	8003ad8 <BUTTON_Set_Callback_Function>

  HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <main+0x68>)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <main+0x6c>)
 800076e:	f001 fc38 	bl	8001fe2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <main+0x68>)
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <main+0x70>)
 8000778:	f001 fc33 	bl	8001fe2 <HAL_UART_Receive_IT>
  UART_Init();
 800077c:	f003 fa50 	bl	8003c20 <UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BUTTON_Handle(&btn);
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <main+0x60>)
 8000782:	f003 f8e7 	bl	8003954 <BUTTON_Handle>

	  UART_Handle();
 8000786:	f003 fa69 	bl	8003c5c <UART_Handle>

	  COMMAND_LINE_Handle();
 800078a:	f002 fd05 	bl	8003198 <COMMAND_LINE_Handle>

	  FRAME_SYNC_Handle();
 800078e:	f003 f8c1 	bl	8003914 <FRAME_SYNC_Handle>
	  BUTTON_Handle(&btn);
 8000792:	e7f5      	b.n	8000780 <main+0x48>
 8000794:	40020000 	.word	0x40020000
 8000798:	20000334 	.word	0x20000334
 800079c:	08000595 	.word	0x08000595
 80007a0:	20000330 	.word	0x20000330
 80007a4:	200002ec 	.word	0x200002ec
 80007a8:	200002a8 	.word	0x200002a8

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fab8 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <SystemClock_Config+0xc8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <SystemClock_Config+0xc8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <SystemClock_Config+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <SystemClock_Config+0xcc>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800081c:	2308      	movs	r3, #8
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fe9f 	bl	8001574 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800083c:	f000 f8d2 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2103      	movs	r1, #3
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f901 	bl	8001a64 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000868:	f000 f8bc 	bl	80009e4 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	; 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f001 fab6 	bl	8001e24 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f891 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002a8 	.word	0x200002a8
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART6_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART6_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART6_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART6_UART_Init+0x4c>)
 8000908:	f001 fa8c 	bl	8001e24 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f867 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200002ec 	.word	0x200002ec
 8000920:	40011400 	.word	0x40011400

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0xb4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <MX_GPIO_Init+0xb4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_GPIO_Init+0xb4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_GPIO_Init+0xb4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_GPIO_Init+0xb4>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xb4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_GPIO_Init+0xb4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_GPIO_Init+0xb4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_GPIO_Init+0xb4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_GPIO_Init+0xb8>)
 8000996:	f000 fdd3 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099a:	2301      	movs	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_GPIO_Init+0xbc>)
 80009ae:	f000 fc2b 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0xb8>)
 80009cc:	f000 fc1c 	bl	8001208 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a3a      	ldr	r2, [pc, #232]	; (8000b48 <HAL_UART_MspInit+0x108>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d134      	bne.n	8000acc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4826      	ldr	r0, [pc, #152]	; (8000b50 <HAL_UART_MspInit+0x110>)
 8000ab6:	f000 fba7 	bl	8001208 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2026      	movs	r0, #38	; 0x26
 8000ac0:	f000 fad9 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac4:	2026      	movs	r0, #38	; 0x26
 8000ac6:	f000 faf2 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000aca:	e038      	b.n	8000b3e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <HAL_UART_MspInit+0x114>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d133      	bne.n	8000b3e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_UART_MspInit+0x10c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0e:	23c0      	movs	r3, #192	; 0xc0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000b2a:	f000 fb6d 	bl	8001208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2047      	movs	r0, #71	; 0x47
 8000b34:	f000 fa9f 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b38:	2047      	movs	r0, #71	; 0x47
 8000b3a:	f000 fab8 	bl	80010ae <HAL_NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40011400 	.word	0x40011400
 8000b58:	40020800 	.word	0x40020800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f96a 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <USART2_IRQHandler+0x10>)
 8000bb6:	f001 fa45 	bl	8002044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200002a8 	.word	0x200002a8

08000bc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART6_IRQHandler+0x10>)
 8000bca:	f001 fa3b 	bl	8002044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002ec 	.word	0x200002ec

08000bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	return 1;
 8000bdc:	2301      	movs	r3, #1
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_kill>:

int _kill(int pid, int sig)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bf2:	f003 f865 	bl	8003cc0 <__errno>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2216      	movs	r2, #22
 8000bfa:	601a      	str	r2, [r3, #0]
	return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_exit>:

void _exit (int status)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffe7 	bl	8000be8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c1a:	e7fe      	b.n	8000c1a <_exit+0x12>

08000c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e00a      	b.n	8000c44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2e:	f3af 8000 	nop.w
 8000c32:	4601      	mov	r1, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	b2ca      	uxtb	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf0      	blt.n	8000c2e <_read+0x12>
	}

return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e009      	b.n	8000c7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf1      	blt.n	8000c68 <_write+0x12>
	}
	return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_close>:

int _close(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_isatty>:

int _isatty(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f002 ffca 	bl	8003cc0 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000450 	.word	0x20000450
 8000d60:	20000c90 	.word	0x20000c90

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 ff89 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fcbd 	bl	8000738 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8000dcc:	08005690 	.word	0x08005690
  ldr r2, =_sbss
 8000dd0:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8000dd4:	20000c90 	.word	0x20000c90

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f92b 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fdee 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f943 	bl	80010ca <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f90b 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000454 	.word	0x20000454

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000454 	.word	0x20000454

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff feda 	bl	8000ea8 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d008      	beq.n	8001114 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e052      	b.n	80011ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0216 	bic.w	r2, r2, #22
 8001122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001132:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <HAL_DMA_Abort+0x62>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0208 	bic.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001164:	e013      	b.n	800118e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001166:	f7ff fe9f 	bl	8000ea8 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b05      	cmp	r3, #5
 8001172:	d90c      	bls.n	800118e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e015      	b.n	80011ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e4      	bne.n	8001166 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	223f      	movs	r2, #63	; 0x3f
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d004      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e00c      	b.n	80011fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2205      	movs	r2, #5
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e159      	b.n	80014d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8148 	bne.w	80014d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a2 	beq.w	80014d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a56      	ldr	r2, [pc, #344]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013aa:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x2ec>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a49      	ldr	r2, [pc, #292]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x202>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a48      	ldr	r2, [pc, #288]	; (80014fc <HAL_GPIO_Init+0x2f4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x1fe>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a47      	ldr	r2, [pc, #284]	; (8001500 <HAL_GPIO_Init+0x2f8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a46      	ldr	r2, [pc, #280]	; (8001504 <HAL_GPIO_Init+0x2fc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x1f6>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <HAL_GPIO_Init+0x300>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x1f2>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e008      	b.n	800140c <HAL_GPIO_Init+0x204>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x204>
 80013fe:	2303      	movs	r3, #3
 8001400:	e004      	b.n	800140c <HAL_GPIO_Init+0x204>
 8001402:	2302      	movs	r3, #2
 8001404:	e002      	b.n	800140c <HAL_GPIO_Init+0x204>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x204>
 800140a:	2300      	movs	r3, #0
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f002 0203 	and.w	r2, r2, #3
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	4093      	lsls	r3, r2
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141c:	4935      	ldr	r1, [pc, #212]	; (80014f4 <HAL_GPIO_Init+0x2ec>)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_GPIO_Init+0x304>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a2f      	ldr	r2, [pc, #188]	; (800150c <HAL_GPIO_Init+0x304>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_GPIO_Init+0x304>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_GPIO_Init+0x304>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_GPIO_Init+0x304>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a2:	4a1a      	ldr	r2, [pc, #104]	; (800150c <HAL_GPIO_Init+0x304>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_GPIO_Init+0x304>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_GPIO_Init+0x304>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3301      	adds	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	f67f aea2 	bls.w	8001224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e267      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d075      	beq.n	800167e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b04      	cmp	r3, #4
 800159c:	d00c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	4b85      	ldr	r3, [pc, #532]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d112      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015aa:	4b82      	ldr	r3, [pc, #520]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b6:	d10b      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d05b      	beq.n	800167c <HAL_RCC_OscConfig+0x108>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d157      	bne.n	800167c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e242      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x74>
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e01d      	b.n	8001624 <HAL_RCC_OscConfig+0xb0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x98>
 80015f2:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6f      	ldr	r2, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6d      	ldr	r3, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6c      	ldr	r2, [pc, #432]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xb0>
 800160c:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a68      	ldr	r2, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a65      	ldr	r2, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fc3c 	bl	8000ea8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fc38 	bl	8000ea8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e207      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xc0>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fc28 	bl	8000ea8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fc24 	bl	8000ea8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1f3      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0xe8>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d063      	beq.n	8001752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x152>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1c7      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e03a      	b.n	8001752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fbdd 	bl	8000ea8 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fbd9 	bl	8000ea8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1a8      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4925      	ldr	r1, [pc, #148]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fbbc 	bl	8000ea8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fbb8 	bl	8000ea8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e187      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d036      	beq.n	80017cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d016      	beq.n	8001794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_RCC_OscConfig+0x248>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fb9c 	bl	8000ea8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fb98 	bl	8000ea8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e167      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_OscConfig+0x240>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x200>
 8001792:	e01b      	b.n	80017cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_OscConfig+0x248>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff fb85 	bl	8000ea8 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	e00e      	b.n	80017c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fb81 	bl	8000ea8 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d907      	bls.n	80017c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e150      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470000 	.word	0x42470000
 80017bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ea      	bne.n	80017a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8097 	beq.w	8001908 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b7d      	ldr	r3, [pc, #500]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a7c      	ldr	r2, [pc, #496]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4b77      	ldr	r3, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0x474>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d118      	bne.n	8001848 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001816:	4b74      	ldr	r3, [pc, #464]	; (80019e8 <HAL_RCC_OscConfig+0x474>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a73      	ldr	r2, [pc, #460]	; (80019e8 <HAL_RCC_OscConfig+0x474>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb41 	bl	8000ea8 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182a:	f7ff fb3d 	bl	8000ea8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e10c      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x474>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x2ea>
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	e01c      	b.n	8001898 <HAL_RCC_OscConfig+0x324>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x30c>
 8001866:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	4b5c      	ldr	r3, [pc, #368]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a5b      	ldr	r2, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0x324>
 8001880:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a54      	ldr	r2, [pc, #336]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001892:	f023 0304 	bic.w	r3, r3, #4
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d015      	beq.n	80018cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb02 	bl	8000ea8 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff fafe 	bl	8000ea8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0cb      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0ee      	beq.n	80018a8 <HAL_RCC_OscConfig+0x334>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7ff faec 	bl	8000ea8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fae8 	bl	8000ea8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0b5      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ee      	bne.n	80018d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a1 	beq.w	8001a54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b08      	cmp	r3, #8
 800191c:	d05c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d141      	bne.n	80019aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_OscConfig+0x478>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fabc 	bl	8000ea8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fab8 	bl	8000ea8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e087      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	491b      	ldr	r1, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x478>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fa91 	bl	8000ea8 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fa8d 	bl	8000ea8 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e05c      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x416>
 80019a8:	e054      	b.n	8001a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x478>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa7a 	bl	8000ea8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa76 	bl	8000ea8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e045      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x444>
 80019d6:	e03d      	b.n	8001a54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e038      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000
 80019ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x4ec>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d028      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d121      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d11a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a20:	4013      	ands	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d111      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0cc      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d90c      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b8      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	494d      	ldr	r1, [pc, #308]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d044      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d119      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e07f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e067      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4934      	ldr	r1, [pc, #208]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f9a8 	bl	8000ea8 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f9a4 	bl	8000ea8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e04f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d20c      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e032      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4916      	ldr	r1, [pc, #88]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	490e      	ldr	r1, [pc, #56]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bea:	f000 f821 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	490a      	ldr	r1, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f908 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08005420 	.word	0x08005420
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c34:	b090      	sub	sp, #64	; 0x40
 8001c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d00d      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x40>
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	f200 80a1 	bhi.w	8001d9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c62:	e09b      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c68:	e09b      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c6a:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6e:	e098      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7a:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d028      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c86:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	627a      	str	r2, [r7, #36]	; 0x24
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c9c:	fb03 f201 	mul.w	r2, r3, r1
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	fb00 f303 	mul.w	r3, r0, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a43      	ldr	r2, [pc, #268]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001caa:	fba0 1202 	umull	r1, r2, r0, r2
 8001cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb6:	4413      	add	r3, r2
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	61fa      	str	r2, [r7, #28]
 8001cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cca:	f7fe fae1 	bl	8000290 <__aeabi_uldivmod>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd6:	e053      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	617a      	str	r2, [r7, #20]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cea:	f04f 0b00 	mov.w	fp, #0
 8001cee:	4652      	mov	r2, sl
 8001cf0:	465b      	mov	r3, fp
 8001cf2:	f04f 0000 	mov.w	r0, #0
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	0159      	lsls	r1, r3, #5
 8001cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d00:	0150      	lsls	r0, r2, #5
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	ebb2 080a 	subs.w	r8, r2, sl
 8001d0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d22:	ebb2 0408 	subs.w	r4, r2, r8
 8001d26:	eb63 0509 	sbc.w	r5, r3, r9
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	00eb      	lsls	r3, r5, #3
 8001d34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d38:	00e2      	lsls	r2, r4, #3
 8001d3a:	4614      	mov	r4, r2
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	eb14 030a 	adds.w	r3, r4, sl
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	eb45 030b 	adc.w	r3, r5, fp
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d56:	4629      	mov	r1, r5
 8001d58:	028b      	lsls	r3, r1, #10
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d60:	4621      	mov	r1, r4
 8001d62:	028a      	lsls	r2, r1, #10
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d74:	f7fe fa8c 	bl	8000290 <__aeabi_uldivmod>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3740      	adds	r7, #64	; 0x40
 8001da8:	46bd      	mov	sp, r7
 8001daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	017d7840 	.word	0x017d7840

08001dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08005430 	.word	0x08005430

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e00:	f7ff ffdc 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0b5b      	lsrs	r3, r3, #13
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08005430 	.word	0x08005430

08001e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e03f      	b.n	8001eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fdf8 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fddf 	bl	8002a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b08a      	sub	sp, #40	; 0x28
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d17c      	bne.n	8001fd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_UART_Transmit+0x2c>
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e075      	b.n	8001fda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_UART_Transmit+0x3e>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e06e      	b.n	8001fda <HAL_UART_Transmit+0x11c>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2221      	movs	r2, #33	; 0x21
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f12:	f7fe ffc9 	bl	8000ea8 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	88fa      	ldrh	r2, [r7, #6]
 8001f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2c:	d108      	bne.n	8001f40 <HAL_UART_Transmit+0x82>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	e003      	b.n	8001f48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f50:	e02a      	b.n	8001fa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fb1f 	bl	80025a0 <UART_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e036      	b.n	8001fda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	3302      	adds	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	e007      	b.n	8001f9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	3301      	adds	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1cf      	bne.n	8001f52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 faef 	bl	80025a0 <UART_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e006      	b.n	8001fda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d11d      	bne.n	8002038 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_UART_Receive_IT+0x26>
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e016      	b.n	800203a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_UART_Receive_IT+0x38>
 8002016:	2302      	movs	r3, #2
 8002018:	e00f      	b.n	800203a <HAL_UART_Receive_IT+0x58>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	461a      	mov	r2, r3
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fb24 	bl	800267c <UART_Start_Receive_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	e000      	b.n	800203a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0ba      	sub	sp, #232	; 0xe8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800208a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_UART_IRQHandler+0x66>
 8002096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fc07 	bl	80028b6 <UART_Receive_IT>
      return;
 80020a8:	e256      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80de 	beq.w	8002270 <HAL_UART_IRQHandler+0x22c>
 80020b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80d1 	beq.w	8002270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_UART_IRQHandler+0xae>
 80020da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_UART_IRQHandler+0xd2>
 80020fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f043 0202 	orr.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xf6>
 8002122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_UART_IRQHandler+0x126>
 8002146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0208 	orr.w	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 81ed 	beq.w	800254e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_UART_IRQHandler+0x14e>
 8002180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fb92 	bl	80028b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_UART_IRQHandler+0x17a>
 80021b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d04f      	beq.n	800225e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa9a 	bl	80026f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d141      	bne.n	8002256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3314      	adds	r3, #20
 80021d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e0:	e853 3f00 	ldrex	r3, [r3]
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800220a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800220e:	e841 2300 	strex	r3, r2, [r1]
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1d9      	bne.n	80021d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	2b00      	cmp	r3, #0
 8002224:	d013      	beq.n	800224e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	4a7d      	ldr	r2, [pc, #500]	; (8002420 <HAL_UART_IRQHandler+0x3dc>)
 800222c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ffc5 	bl	80011c2 <HAL_DMA_Abort_IT>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002248:	4610      	mov	r0, r2
 800224a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	e00e      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f990 	bl	8002574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	e00a      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f98c 	bl	8002574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	e006      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f988 	bl	8002574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800226a:	e170      	b.n	800254e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	bf00      	nop
    return;
 800226e:	e16e      	b.n	800254e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 814a 	bne.w	800250e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8143 	beq.w	800250e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 813c 	beq.w	800250e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	f040 80b4 	bne.w	8002424 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8140 	beq.w	8002552 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022da:	429a      	cmp	r2, r3
 80022dc:	f080 8139 	bcs.w	8002552 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f2:	f000 8088 	beq.w	8002406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800230c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	330c      	adds	r3, #12
 800231e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800232e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800233a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1d9      	bne.n	80022f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800236a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800236e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e1      	bne.n	8002342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3314      	adds	r3, #20
 8002384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	e853 3f00 	ldrex	r3, [r3]
 800238c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3314      	adds	r3, #20
 800239e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023aa:	e841 2300 	strex	r3, r2, [r1]
 80023ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e3      	bne.n	800237e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d6:	f023 0310 	bic.w	r3, r3, #16
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80023ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023f0:	e841 2300 	strex	r3, r2, [r1]
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e3      	bne.n	80023c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fe6e 	bl	80010e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800240e:	b29b      	uxth	r3, r3
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	b29b      	uxth	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8b6 	bl	8002588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800241c:	e099      	b.n	8002552 <HAL_UART_IRQHandler+0x50e>
 800241e:	bf00      	nop
 8002420:	080027bf 	.word	0x080027bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 808b 	beq.w	8002556 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8086 	beq.w	8002556 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800246e:	647a      	str	r2, [r7, #68]	; 0x44
 8002470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800247c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e3      	bne.n	800244a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	623b      	str	r3, [r7, #32]
   return(result);
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3314      	adds	r3, #20
 80024a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024a6:	633a      	str	r2, [r7, #48]	; 0x30
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e3      	bne.n	8002482 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0310 	bic.w	r3, r3, #16
 80024de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	69b9      	ldr	r1, [r7, #24]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	e841 2300 	strex	r3, r2, [r1]
 80024f8:	617b      	str	r3, [r7, #20]
   return(result);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e3      	bne.n	80024c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f83e 	bl	8002588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800250c:	e023      	b.n	8002556 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_UART_IRQHandler+0x4ea>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f95d 	bl	80027e6 <UART_Transmit_IT>
    return;
 800252c:	e014      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00e      	beq.n	8002558 <HAL_UART_IRQHandler+0x514>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f99d 	bl	8002886 <UART_EndTransmit_IT>
    return;
 800254c:	e004      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
    return;
 800254e:	bf00      	nop
 8002550:	e002      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
      return;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
      return;
 8002556:	bf00      	nop
  }
}
 8002558:	37e8      	adds	r7, #232	; 0xe8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b0:	e050      	b.n	8002654 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d04c      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80025c0:	f7fe fc72 	bl	8000ea8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d241      	bcs.n	8002654 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025f0:	637a      	str	r2, [r7, #52]	; 0x34
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3314      	adds	r3, #20
 800260a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	e853 3f00 	ldrex	r3, [r3]
 8002612:	613b      	str	r3, [r7, #16]
   return(result);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	63bb      	str	r3, [r7, #56]	; 0x38
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002624:	623a      	str	r2, [r7, #32]
 8002626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	69f9      	ldr	r1, [r7, #28]
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	61bb      	str	r3, [r7, #24]
   return(result);
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e00f      	b.n	8002674 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	429a      	cmp	r2, r3
 8002670:	d09f      	beq.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3740      	adds	r7, #64	; 0x40
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	88fa      	ldrh	r2, [r7, #6]
 800269a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2222      	movs	r2, #34	; 0x22
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b095      	sub	sp, #84	; 0x54
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	e853 3f00 	ldrex	r3, [r3]
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002720:	643a      	str	r2, [r7, #64]	; 0x40
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002728:	e841 2300 	strex	r3, r2, [r1]
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e5      	bne.n	8002700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	61fb      	str	r3, [r7, #28]
   return(result);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3314      	adds	r3, #20
 8002752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b01      	cmp	r3, #1
 800276e:	d119      	bne.n	80027a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	e853 3f00 	ldrex	r3, [r3]
 800277e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f023 0310 	bic.w	r3, r3, #16
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002790:	61ba      	str	r2, [r7, #24]
 8002792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002794:	6979      	ldr	r1, [r7, #20]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	e841 2300 	strex	r3, r2, [r1]
 800279c:	613b      	str	r3, [r7, #16]
   return(result);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e5      	bne.n	8002770 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027b2:	bf00      	nop
 80027b4:	3754      	adds	r7, #84	; 0x54
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fecb 	bl	8002574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b21      	cmp	r3, #33	; 0x21
 80027f8:	d13e      	bne.n	8002878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d114      	bne.n	800282e <UART_Transmit_IT+0x48>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1c9a      	adds	r2, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]
 800282c:	e008      	b.n	8002840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6211      	str	r1, [r2, #32]
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fe5a 	bl	8002560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08c      	sub	sp, #48	; 0x30
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b22      	cmp	r3, #34	; 0x22
 80028c8:	f040 80ab 	bne.w	8002a22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d117      	bne.n	8002906 <UART_Receive_IT+0x50>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d113      	bne.n	8002906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
 8002904:	e026      	b.n	8002954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d007      	beq.n	800292a <UART_Receive_IT+0x74>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <UART_Receive_IT+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e008      	b.n	800294a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002944:	b2da      	uxtb	r2, r3
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002964:	2b00      	cmp	r3, #0
 8002966:	d15a      	bne.n	8002a1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0220 	bic.w	r2, r2, #32
 8002976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d135      	bne.n	8002a14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	613b      	str	r3, [r7, #16]
   return(result);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f023 0310 	bic.w	r3, r3, #16
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	623a      	str	r2, [r7, #32]
 80029d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	69f9      	ldr	r1, [r7, #28]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	61bb      	str	r3, [r7, #24]
   return(result);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d10a      	bne.n	8002a06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fdbb 	bl	8002588 <HAL_UARTEx_RxEventCallback>
 8002a12:	e002      	b.n	8002a1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fd fe5f 	bl	80006d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e002      	b.n	8002a24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a30:	b0c0      	sub	sp, #256	; 0x100
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	ea40 0301 	orr.w	r3, r0, r1
 8002a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a84:	f021 010c 	bic.w	r1, r1, #12
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a92:	430b      	orrs	r3, r1
 8002a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa6:	6999      	ldr	r1, [r3, #24]
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	ea40 0301 	orr.w	r3, r0, r1
 8002ab2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b8f      	ldr	r3, [pc, #572]	; (8002cf8 <UART_SetConfig+0x2cc>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d005      	beq.n	8002acc <UART_SetConfig+0xa0>
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b8d      	ldr	r3, [pc, #564]	; (8002cfc <UART_SetConfig+0x2d0>)
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d104      	bne.n	8002ad6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002acc:	f7ff f996 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8002ad0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ad4:	e003      	b.n	8002ade <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ad6:	f7ff f97d 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002ada:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae8:	f040 810c 	bne.w	8002d04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002afa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002afe:	4622      	mov	r2, r4
 8002b00:	462b      	mov	r3, r5
 8002b02:	1891      	adds	r1, r2, r2
 8002b04:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b06:	415b      	adcs	r3, r3
 8002b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b0e:	4621      	mov	r1, r4
 8002b10:	eb12 0801 	adds.w	r8, r2, r1
 8002b14:	4629      	mov	r1, r5
 8002b16:	eb43 0901 	adc.w	r9, r3, r1
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2e:	4690      	mov	r8, r2
 8002b30:	4699      	mov	r9, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	eb18 0303 	adds.w	r3, r8, r3
 8002b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	eb49 0303 	adc.w	r3, r9, r3
 8002b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	18db      	adds	r3, r3, r3
 8002b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8002b60:	4613      	mov	r3, r2
 8002b62:	eb42 0303 	adc.w	r3, r2, r3
 8002b66:	657b      	str	r3, [r7, #84]	; 0x54
 8002b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b70:	f7fd fb8e 	bl	8000290 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <UART_SetConfig+0x2d4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	011c      	lsls	r4, r3, #4
 8002b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	eb12 0a01 	adds.w	sl, r2, r1
 8002baa:	4649      	mov	r1, r9
 8002bac:	eb43 0b01 	adc.w	fp, r3, r1
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc4:	4692      	mov	sl, r2
 8002bc6:	469b      	mov	fp, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	eb1a 0303 	adds.w	r3, sl, r3
 8002bce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002be8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	18db      	adds	r3, r3, r3
 8002bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002bfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c06:	f7fd fb43 	bl	8000290 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <UART_SetConfig+0x2d4>)
 8002c12:	fba3 2301 	umull	r2, r3, r3, r1
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2264      	movs	r2, #100	; 0x64
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	1acb      	subs	r3, r1, r3
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <UART_SetConfig+0x2d4>)
 8002c28:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c34:	441c      	add	r4, r3
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	1891      	adds	r1, r2, r2
 8002c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c50:	415b      	adcs	r3, r3
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c58:	4641      	mov	r1, r8
 8002c5a:	1851      	adds	r1, r2, r1
 8002c5c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c5e:	4649      	mov	r1, r9
 8002c60:	414b      	adcs	r3, r1
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c70:	4659      	mov	r1, fp
 8002c72:	00cb      	lsls	r3, r1, #3
 8002c74:	4651      	mov	r1, sl
 8002c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	00ca      	lsls	r2, r1, #3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	4642      	mov	r2, r8
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c8c:	464b      	mov	r3, r9
 8002c8e:	460a      	mov	r2, r1
 8002c90:	eb42 0303 	adc.w	r3, r2, r3
 8002c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ca4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cac:	460b      	mov	r3, r1
 8002cae:	18db      	adds	r3, r3, r3
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	eb42 0303 	adc.w	r3, r2, r3
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cc2:	f7fd fae5 	bl	8000290 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <UART_SetConfig+0x2d4>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 0207 	and.w	r2, r3, #7
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4422      	add	r2, r4
 8002cf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf4:	e105      	b.n	8002f02 <UART_SetConfig+0x4d6>
 8002cf6:	bf00      	nop
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d16:	4642      	mov	r2, r8
 8002d18:	464b      	mov	r3, r9
 8002d1a:	1891      	adds	r1, r2, r2
 8002d1c:	6239      	str	r1, [r7, #32]
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d26:	4641      	mov	r1, r8
 8002d28:	1854      	adds	r4, r2, r1
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	eb43 0501 	adc.w	r5, r3, r1
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	00eb      	lsls	r3, r5, #3
 8002d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3e:	00e2      	lsls	r2, r4, #3
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	4643      	mov	r3, r8
 8002d46:	18e3      	adds	r3, r4, r3
 8002d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	eb45 0303 	adc.w	r3, r5, r3
 8002d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d72:	4629      	mov	r1, r5
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	008a      	lsls	r2, r1, #2
 8002d80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d84:	f7fd fa84 	bl	8000290 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4b60      	ldr	r3, [pc, #384]	; (8002f10 <UART_SetConfig+0x4e4>)
 8002d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	011c      	lsls	r4, r3, #4
 8002d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002da8:	4642      	mov	r2, r8
 8002daa:	464b      	mov	r3, r9
 8002dac:	1891      	adds	r1, r2, r2
 8002dae:	61b9      	str	r1, [r7, #24]
 8002db0:	415b      	adcs	r3, r3
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db8:	4641      	mov	r1, r8
 8002dba:	1851      	adds	r1, r2, r1
 8002dbc:	6139      	str	r1, [r7, #16]
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	414b      	adcs	r3, r1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	00cb      	lsls	r3, r1, #3
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dda:	4651      	mov	r1, sl
 8002ddc:	00ca      	lsls	r2, r1, #3
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	4642      	mov	r2, r8
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dec:	464b      	mov	r3, r9
 8002dee:	460a      	mov	r2, r1
 8002df0:	eb42 0303 	adc.w	r3, r2, r3
 8002df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e10:	4649      	mov	r1, r9
 8002e12:	008b      	lsls	r3, r1, #2
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	008a      	lsls	r2, r1, #2
 8002e1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e22:	f7fd fa35 	bl	8000290 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <UART_SetConfig+0x4e4>)
 8002e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2164      	movs	r1, #100	; 0x64
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <UART_SetConfig+0x4e4>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4a:	441c      	add	r4, r3
 8002e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e50:	2200      	movs	r2, #0
 8002e52:	673b      	str	r3, [r7, #112]	; 0x70
 8002e54:	677a      	str	r2, [r7, #116]	; 0x74
 8002e56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e5a:	4642      	mov	r2, r8
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	1891      	adds	r1, r2, r2
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	415b      	adcs	r3, r3
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	1851      	adds	r1, r2, r1
 8002e6e:	6039      	str	r1, [r7, #0]
 8002e70:	4649      	mov	r1, r9
 8002e72:	414b      	adcs	r3, r1
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e82:	4659      	mov	r1, fp
 8002e84:	00cb      	lsls	r3, r1, #3
 8002e86:	4651      	mov	r1, sl
 8002e88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	00ca      	lsls	r2, r1, #3
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	4603      	mov	r3, r0
 8002e96:	4642      	mov	r2, r8
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	eb42 0303 	adc.w	r3, r2, r3
 8002ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb0:	667a      	str	r2, [r7, #100]	; 0x64
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	008b      	lsls	r3, r1, #2
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec8:	4641      	mov	r1, r8
 8002eca:	008a      	lsls	r2, r1, #2
 8002ecc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ed0:	f7fd f9de 	bl	8000290 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <UART_SetConfig+0x4e4>)
 8002eda:	fba3 1302 	umull	r1, r3, r3, r2
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2164      	movs	r1, #100	; 0x64
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	; 0x32
 8002eec:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <UART_SetConfig+0x4e4>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4422      	add	r2, r4
 8002f00:	609a      	str	r2, [r3, #8]
}
 8002f02:	bf00      	nop
 8002f04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	51eb851f 	.word	0x51eb851f

08002f14 <update_crc_16>:
 *
 * The function update_crc_16() calculates a new CRC-16 value based on the
 * previous value of the CRC and the next byte of data to be checked.
 */

uint16_t update_crc_16( uint16_t crc, unsigned char c ) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	80fb      	strh	r3, [r7, #6]
 8002f20:	4613      	mov	r3, r2
 8002f22:	717b      	strb	r3, [r7, #5]

	uint16_t tmp;
	uint16_t short_c;

	short_c = 0x00ff & (uint16_t) c;
 8002f24:	797b      	ldrb	r3, [r7, #5]
 8002f26:	81fb      	strh	r3, [r7, #14]

	if ( ! crc_tab16_init ) init_crc16_tab();
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <update_crc_16+0x4c>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <update_crc_16+0x26>
 8002f36:	f000 f817 	bl	8002f68 <init_crc16_tab>

	tmp =  crc       ^ short_c;
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	4053      	eors	r3, r2
 8002f40:	81bb      	strh	r3, [r7, #12]
	crc = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	89bb      	ldrh	r3, [r7, #12]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4905      	ldr	r1, [pc, #20]	; (8002f64 <update_crc_16+0x50>)
 8002f4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f52:	4053      	eors	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]

	return crc;
 8002f56:	88fb      	ldrh	r3, [r7, #6]

}  /* update_crc_16 */
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000458 	.word	0x20000458
 8002f64:	2000045c 	.word	0x2000045c

08002f68 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	80fb      	strh	r3, [r7, #6]
 8002f72:	e029      	b.n	8002fc8 <init_crc16_tab+0x60>

		crc = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	807b      	strh	r3, [r7, #2]
		c   = i;
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	80bb      	strh	r3, [r7, #4]
 8002f80:	e017      	b.n	8002fb2 <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	883b      	ldrh	r3, [r7, #0]
 8002f86:	4053      	eors	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <init_crc16_tab+0x38>
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <init_crc16_tab+0x78>)
 8002f9a:	4053      	eors	r3, r2
 8002f9c:	807b      	strh	r3, [r7, #2]
 8002f9e:	e002      	b.n	8002fa6 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8002fa6:	883b      	ldrh	r3, [r7, #0]
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	80bb      	strh	r3, [r7, #4]
 8002fb2:	88bb      	ldrh	r3, [r7, #4]
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	d9e4      	bls.n	8002f82 <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <init_crc16_tab+0x7c>)
 8002fbc:	887a      	ldrh	r2, [r7, #2]
 8002fbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	80fb      	strh	r3, [r7, #6]
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2bff      	cmp	r3, #255	; 0xff
 8002fcc:	d9d2      	bls.n	8002f74 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <init_crc16_tab+0x80>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	ffffa001 	.word	0xffffa001
 8002fe4:	2000045c 	.word	0x2000045c
 8002fe8:	20000458 	.word	0x20000458

08002fec <update_crc_32>:
 *
 * The function update_crc_32() calculates a new CRC-32 value based on the
 * previous value of the CRC and the next byte of the data to be checked.
 */

uint32_t update_crc_32( uint32_t crc, unsigned char c ) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]

	uint32_t tmp;
	uint32_t long_c;

	long_c = 0x000000ffL & (uint32_t) c;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	60fb      	str	r3, [r7, #12]

	if ( ! crc_tab32_init ) init_crc32_tab();
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <update_crc_32+0x48>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <update_crc_32+0x22>
 800300a:	f000 f817 	bl	800303c <init_crc32_tab>

	tmp = crc ^ long_c;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4053      	eors	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
	crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0a1a      	lsrs	r2, r3, #8
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4906      	ldr	r1, [pc, #24]	; (8003038 <update_crc_32+0x4c>)
 8003020:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003024:	4053      	eors	r3, r2
 8003026:	607b      	str	r3, [r7, #4]

	return crc & 0xffffffffL;;
 8003028:	687b      	ldr	r3, [r7, #4]

}  /* update_crc_32 */
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000065c 	.word	0x2000065c
 8003038:	20000660 	.word	0x20000660

0800303c <init_crc32_tab>:
 * For optimal speed, the CRC32 calculation uses a table with pre-calculated
 * bit patterns which are used in the XOR operations in the program. This table
 * is generated once, the first time the CRC update routine is called.
 */

static void init_crc32_tab( void ) {
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0

	uint32_t i;
	uint32_t j;
	uint32_t crc;

	for (i=0; i<256; i++) {
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e020      	b.n	800308a <init_crc32_tab+0x4e>

		crc = i;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	607b      	str	r3, [r7, #4]

		for (j=0; j<8; j++) {
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	e010      	b.n	8003074 <init_crc32_tab+0x38>

			if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ CRC_POLY_32;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <init_crc32_tab+0x2c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	085a      	lsrs	r2, r3, #1
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <init_crc32_tab+0x68>)
 8003062:	4053      	eors	r3, r2
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	e002      	b.n	800306e <init_crc32_tab+0x32>
			else                     crc =   crc >> 1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	607b      	str	r3, [r7, #4]
		for (j=0; j<8; j++) {
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b07      	cmp	r3, #7
 8003078:	d9eb      	bls.n	8003052 <init_crc32_tab+0x16>
		}

		crc_tab32[i] = crc;
 800307a:	490b      	ldr	r1, [pc, #44]	; (80030a8 <init_crc32_tab+0x6c>)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<256; i++) {
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3301      	adds	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2bff      	cmp	r3, #255	; 0xff
 800308e:	d9db      	bls.n	8003048 <init_crc32_tab+0xc>
	}

	crc_tab32_init = true;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <init_crc32_tab+0x70>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

}  /* init_crc32_tab */
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	edb88320 	.word	0xedb88320
 80030a8:	20000660 	.word	0x20000660
 80030ac:	2000065c 	.word	0x2000065c

080030b0 <update_crc_8>:
 * Given a databyte and the previous value of the CRC value, the function
 * update_crc_8() calculates and returns the new actual CRC value of the data
 * comming in.
 */

uint8_t update_crc_8( unsigned char crc, unsigned char val ) {
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]

	return crc_8_table[val ^ crc];
 80030c0:	79ba      	ldrb	r2, [r7, #6]
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4053      	eors	r3, r2
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <update_crc_8+0x2c>)
 80030cc:	5c9b      	ldrb	r3, [r3, r2]

}  /* update_crc_8 */
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <str2hex>:

uint8_t cl_buf[255];
uint8_t cl_pointer = 0;
uint8_t cl_flag = 0;

static uint8_t str2hex(char *str){
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++){
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e047      	b.n	8003182 <str2hex+0xa2>
		uint8_t temp_data;
		if(str[i] >= '0' && str[i] <= '9'){
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b2f      	cmp	r3, #47	; 0x2f
 80030fc:	d90c      	bls.n	8003118 <str2hex+0x38>
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b39      	cmp	r3, #57	; 0x39
 8003108:	d806      	bhi.n	8003118 <str2hex+0x38>
			temp_data = str[i] - '0';
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	3b30      	subs	r3, #48	; 0x30
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e024      	b.n	8003162 <str2hex+0x82>
		} else if(str[i] >= 'A' && str[i] <= 'F'){
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d90c      	bls.n	800313e <str2hex+0x5e>
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b46      	cmp	r3, #70	; 0x46
 800312e:	d806      	bhi.n	800313e <str2hex+0x5e>
			temp_data = str[i] - 55;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3b37      	subs	r3, #55	; 0x37
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e011      	b.n	8003162 <str2hex+0x82>
		} else if(str[i] >= 'a' && str[i] <= 'f'){
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b60      	cmp	r3, #96	; 0x60
 8003148:	d90b      	bls.n	8003162 <str2hex+0x82>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b66      	cmp	r3, #102	; 0x66
 8003154:	d805      	bhi.n	8003162 <str2hex+0x82>
			temp_data = str[i] - 87;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	3b57      	subs	r3, #87	; 0x57
 8003160:	73fb      	strb	r3, [r7, #15]
		}
		result |= temp_data << ((1 - i) * 4);
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f1c3 0301 	rsb	r3, r3, #1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	b25a      	sxtb	r2, r3
 8003172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003176:	4313      	orrs	r3, r2
 8003178:	b25b      	sxtb	r3, r3
 800317a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++){
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	3301      	adds	r3, #1
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b01      	cmp	r3, #1
 8003186:	ddb4      	ble.n	80030f2 <str2hex+0x12>
	}
	return result;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
}
 800318a:	4618      	mov	r0, r3
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <COMMAND_LINE_Handle>:

void COMMAND_LINE_Init(){

}

void COMMAND_LINE_Handle(){
 8003198:	b580      	push	{r7, lr}
 800319a:	b0d6      	sub	sp, #344	; 0x158
 800319c:	af00      	add	r7, sp, #0
	if(cl_flag){
 800319e:	4b70      	ldr	r3, [pc, #448]	; (8003360 <COMMAND_LINE_Handle+0x1c8>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80d7 	beq.w	8003356 <COMMAND_LINE_Handle+0x1be>
		char *arg_list[10];
		uint8_t arg_num = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

		char *temp_token = strtok((char *)cl_buf, " ");
 80031ae:	496d      	ldr	r1, [pc, #436]	; (8003364 <COMMAND_LINE_Handle+0x1cc>)
 80031b0:	486d      	ldr	r0, [pc, #436]	; (8003368 <COMMAND_LINE_Handle+0x1d0>)
 80031b2:	f000 fe17 	bl	8003de4 <strtok>
 80031b6:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		while(temp_token != NULL){
 80031ba:	e013      	b.n	80031e4 <COMMAND_LINE_Handle+0x4c>
			arg_list[arg_num++] = temp_token;
 80031bc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	f887 2157 	strb.w	r2, [r7, #343]	; 0x157
 80031c6:	4619      	mov	r1, r3
 80031c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80031d0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80031d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			temp_token = strtok(NULL, " ");
 80031d8:	4962      	ldr	r1, [pc, #392]	; (8003364 <COMMAND_LINE_Handle+0x1cc>)
 80031da:	2000      	movs	r0, #0
 80031dc:	f000 fe02 	bl	8003de4 <strtok>
 80031e0:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		while(temp_token != NULL){
 80031e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e7      	bne.n	80031bc <COMMAND_LINE_Handle+0x24>
		}

		if(strstr(arg_list[0], "CRC")){
 80031ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031f0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	495d      	ldr	r1, [pc, #372]	; (800336c <COMMAND_LINE_Handle+0x1d4>)
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fddd 	bl	8003db8 <strstr>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d06c      	beq.n	80032de <COMMAND_LINE_Handle+0x146>
			if(strstr(arg_list[1], "8") || strstr(arg_list[1], "16") || strstr(arg_list[1], "32")){
 8003204:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003208:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2138      	movs	r1, #56	; 0x38
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fdc4 	bl	8003d9e <strchr>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d117      	bne.n	800324c <COMMAND_LINE_Handle+0xb4>
 800321c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003220:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4952      	ldr	r1, [pc, #328]	; (8003370 <COMMAND_LINE_Handle+0x1d8>)
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fdc5 	bl	8003db8 <strstr>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10b      	bne.n	800324c <COMMAND_LINE_Handle+0xb4>
 8003234:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003238:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	494d      	ldr	r1, [pc, #308]	; (8003374 <COMMAND_LINE_Handle+0x1dc>)
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fdb9 	bl	8003db8 <strstr>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d023      	beq.n	8003294 <COMMAND_LINE_Handle+0xfc>
				FRAME_SYNC_DATA_t temp_data = {atoi(arg_list[1]) / 8};
 800324c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003254:	4618      	mov	r0, r3
 8003256:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800325a:	461a      	mov	r2, r3
 800325c:	2100      	movs	r1, #0
 800325e:	f000 fd67 	bl	8003d30 <memset>
 8003262:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003266:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fd23 	bl	8003cb8 <atoi>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	da00      	bge.n	800327a <COMMAND_LINE_Handle+0xe2>
 8003278:	3307      	adds	r3, #7
 800327a:	10db      	asrs	r3, r3, #3
 800327c:	b2da      	uxtb	r2, r3
 800327e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003286:	701a      	strb	r2, [r3, #0]
				FRAME_SYNC_Change_Setting(&temp_data);
 8003288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f9ed 	bl	800366c <FRAME_SYNC_Change_Setting>
			if(strstr(arg_list[1], "8") || strstr(arg_list[1], "16") || strstr(arg_list[1], "32")){
 8003292:	e05a      	b.n	800334a <COMMAND_LINE_Handle+0x1b2>
			} else if(strstr(arg_list[1], "?")){
 8003294:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003298:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	213f      	movs	r1, #63	; 0x3f
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fd7c 	bl	8003d9e <strchr>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d04e      	beq.n	800334a <COMMAND_LINE_Handle+0x1b2>
				uint8_t temp_str[8];
				sprintf((char *)temp_str, "CRC-%d\n", FRAME_SYNC_CRC_Type() * 8);
 80032ac:	f000 f9d2 	bl	8003654 <FRAME_SYNC_CRC_Type>
 80032b0:	4603      	mov	r3, r0
 80032b2:	00da      	lsls	r2, r3, #3
 80032b4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80032b8:	492f      	ldr	r1, [pc, #188]	; (8003378 <COMMAND_LINE_Handle+0x1e0>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fd40 	bl	8003d40 <siprintf>
				HAL_UART_Transmit(&huart6, temp_str, strlen((char *)temp_str), 1000);
 80032c0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fc ff8b 	bl	80001e0 <strlen>
 80032ca:	4603      	mov	r3, r0
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80032d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d6:	4829      	ldr	r0, [pc, #164]	; (800337c <COMMAND_LINE_Handle+0x1e4>)
 80032d8:	f7fe fdf1 	bl	8001ebe <HAL_UART_Transmit>
 80032dc:	e035      	b.n	800334a <COMMAND_LINE_Handle+0x1b2>
			}
		} else if(strstr(arg_list[0], "DATA") != NULL){
 80032de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80032e2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4925      	ldr	r1, [pc, #148]	; (8003380 <COMMAND_LINE_Handle+0x1e8>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fd64 	bl	8003db8 <strstr>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d029      	beq.n	800334a <COMMAND_LINE_Handle+0x1b2>
			tx_frame_len = arg_num - 1;
 80032f6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <COMMAND_LINE_Handle+0x1ec>)
 8003300:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++){
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003308:	e018      	b.n	800333c <COMMAND_LINE_Handle+0x1a4>
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 800330a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003314:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fedf 	bl	80030e0 <str2hex>
 8003322:	4603      	mov	r3, r0
 8003324:	4619      	mov	r1, r3
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <COMMAND_LINE_Handle+0x1f0>)
 8003328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800332c:	4413      	add	r3, r2
 800332e:	460a      	mov	r2, r1
 8003330:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++){
 8003332:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003336:	3301      	adds	r3, #1
 8003338:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800333c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003340:	3b01      	subs	r3, #1
 8003342:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003346:	429a      	cmp	r2, r3
 8003348:	dbdf      	blt.n	800330a <COMMAND_LINE_Handle+0x172>
			}
		}

		cl_pointer = 0;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <COMMAND_LINE_Handle+0x1f4>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
		cl_flag = 0;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <COMMAND_LINE_Handle+0x1c8>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
	}
}
 8003356:	bf00      	nop
 8003358:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000b60 	.word	0x20000b60
 8003364:	08005400 	.word	0x08005400
 8003368:	20000a60 	.word	0x20000a60
 800336c:	08005404 	.word	0x08005404
 8003370:	08005408 	.word	0x08005408
 8003374:	0800540c 	.word	0x0800540c
 8003378:	08005410 	.word	0x08005410
 800337c:	200002ec 	.word	0x200002ec
 8003380:	08005418 	.word	0x08005418
 8003384:	2000044f 	.word	0x2000044f
 8003388:	20000350 	.word	0x20000350
 800338c:	20000b5f 	.word	0x20000b5f

08003390 <COMMAND_LINE_Receive>:

void COMMAND_LINE_Receive(uint8_t rx_data){
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
	if(rx_data != '\n'){
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	2b0a      	cmp	r3, #10
 800339e:	d00a      	beq.n	80033b6 <COMMAND_LINE_Receive+0x26>
		cl_buf[cl_pointer++] = rx_data;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <COMMAND_LINE_Receive+0x44>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	b2d1      	uxtb	r1, r2
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <COMMAND_LINE_Receive+0x44>)
 80033aa:	7011      	strb	r1, [r2, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <COMMAND_LINE_Receive+0x48>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	5453      	strb	r3, [r2, r1]
	} else{
		cl_buf[cl_pointer] = '\0';
		cl_flag = 1;
	}
}
 80033b4:	e008      	b.n	80033c8 <COMMAND_LINE_Receive+0x38>
		cl_buf[cl_pointer] = '\0';
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <COMMAND_LINE_Receive+0x44>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <COMMAND_LINE_Receive+0x48>)
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]
		cl_flag = 1;
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <COMMAND_LINE_Receive+0x4c>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000b5f 	.word	0x20000b5f
 80033d8:	20000a60 	.word	0x20000a60
 80033dc:	20000b60 	.word	0x20000b60

080033e0 <Rx_Reset>:

extern UART_HandleTypeDef huart;

FRAME_SYNC_DATA_t FS_Data = {CRC_8};

static void Rx_Reset(){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b0c8      	sub	sp, #288	; 0x120
 80033e4:	af00      	add	r7, sp, #0
	FRAME_SYNC_DATA_t temp_data = {FS_Data.crc_type};
 80033e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80033ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033ee:	4618      	mov	r0, r3
 80033f0:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80033f4:	461a      	mov	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f000 fc9a 	bl	8003d30 <memset>
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <Rx_Reset+0x4c>)
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003404:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003408:	701a      	strb	r2, [r3, #0]
	FS_Data = temp_data;
 800340a:	4a08      	ldr	r2, [pc, #32]	; (800342c <Rx_Reset+0x4c>)
 800340c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003410:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800341c:	461a      	mov	r2, r3
 800341e:	f000 fc79 	bl	8003d14 <memcpy>
}
 8003422:	bf00      	nop
 8003424:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000010c 	.word	0x2000010c

08003430 <CRC_Update>:

static void CRC_Update(uint32_t *crc, uint8_t data){
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
	switch(FS_Data.crc_type){
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <CRC_Update+0x78>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d020      	beq.n	8003486 <CRC_Update+0x56>
 8003444:	2b04      	cmp	r3, #4
 8003446:	dc29      	bgt.n	800349c <CRC_Update+0x6c>
 8003448:	2b01      	cmp	r3, #1
 800344a:	d002      	beq.n	8003452 <CRC_Update+0x22>
 800344c:	2b02      	cmp	r3, #2
 800344e:	d00d      	beq.n	800346c <CRC_Update+0x3c>
			break;
		case CRC_32:
			*crc = update_crc_32(*crc, data);
			break;
		default:
			break;
 8003450:	e024      	b.n	800349c <CRC_Update+0x6c>
			*crc = update_crc_8((uint8_t)*crc, data);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fe27 	bl	80030b0 <update_crc_8>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
			break;
 800346a:	e018      	b.n	800349e <CRC_Update+0x6e>
			*crc = update_crc_16((uint16_t)*crc, data);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fd4c 	bl	8002f14 <update_crc_16>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	601a      	str	r2, [r3, #0]
			break;
 8003484:	e00b      	b.n	800349e <CRC_Update+0x6e>
			*crc = update_crc_32(*crc, data);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fdac 	bl	8002fec <update_crc_32>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
			break;
 800349a:	e000      	b.n	800349e <CRC_Update+0x6e>
			break;
 800349c:	bf00      	nop
	}
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000010c 	.word	0x2000010c

080034ac <CRC_Transmit>:

static void CRC_Transmit(uint32_t *crc){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	switch(FS_Data.crc_type){
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <CRC_Transmit+0x94>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d01b      	beq.n	80034f4 <CRC_Transmit+0x48>
 80034bc:	2b04      	cmp	r3, #4
 80034be:	dc3a      	bgt.n	8003536 <CRC_Transmit+0x8a>
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <CRC_Transmit+0x1e>
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d007      	beq.n	80034d8 <CRC_Transmit+0x2c>
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 1, 1, 100);
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 2, 1, 100);
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 3, 1, 100);
			break;
		default:
			break;
 80034c8:	e035      	b.n	8003536 <CRC_Transmit+0x8a>
			HAL_UART_Transmit(&huart, (uint8_t *)(crc), 1, 100);
 80034ca:	2364      	movs	r3, #100	; 0x64
 80034cc:	2201      	movs	r2, #1
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	481c      	ldr	r0, [pc, #112]	; (8003544 <CRC_Transmit+0x98>)
 80034d2:	f7fe fcf4 	bl	8001ebe <HAL_UART_Transmit>
			break;
 80034d6:	e02f      	b.n	8003538 <CRC_Transmit+0x8c>
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 0, 1, 100);
 80034d8:	2364      	movs	r3, #100	; 0x64
 80034da:	2201      	movs	r2, #1
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4819      	ldr	r0, [pc, #100]	; (8003544 <CRC_Transmit+0x98>)
 80034e0:	f7fe fced 	bl	8001ebe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 1, 1, 100);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	2364      	movs	r3, #100	; 0x64
 80034ea:	2201      	movs	r2, #1
 80034ec:	4815      	ldr	r0, [pc, #84]	; (8003544 <CRC_Transmit+0x98>)
 80034ee:	f7fe fce6 	bl	8001ebe <HAL_UART_Transmit>
			break;
 80034f2:	e021      	b.n	8003538 <CRC_Transmit+0x8c>
			*crc = ~(*crc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 0, 1, 100);
 80034fe:	2364      	movs	r3, #100	; 0x64
 8003500:	2201      	movs	r2, #1
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	480f      	ldr	r0, [pc, #60]	; (8003544 <CRC_Transmit+0x98>)
 8003506:	f7fe fcda 	bl	8001ebe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 1, 1, 100);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1c59      	adds	r1, r3, #1
 800350e:	2364      	movs	r3, #100	; 0x64
 8003510:	2201      	movs	r2, #1
 8003512:	480c      	ldr	r0, [pc, #48]	; (8003544 <CRC_Transmit+0x98>)
 8003514:	f7fe fcd3 	bl	8001ebe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 2, 1, 100);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	1c99      	adds	r1, r3, #2
 800351c:	2364      	movs	r3, #100	; 0x64
 800351e:	2201      	movs	r2, #1
 8003520:	4808      	ldr	r0, [pc, #32]	; (8003544 <CRC_Transmit+0x98>)
 8003522:	f7fe fccc 	bl	8001ebe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart, (uint8_t *)crc + 3, 1, 100);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1cd9      	adds	r1, r3, #3
 800352a:	2364      	movs	r3, #100	; 0x64
 800352c:	2201      	movs	r2, #1
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <CRC_Transmit+0x98>)
 8003530:	f7fe fcc5 	bl	8001ebe <HAL_UART_Transmit>
			break;
 8003534:	e000      	b.n	8003538 <CRC_Transmit+0x8c>
			break;
 8003536:	bf00      	nop
	}
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000010c 	.word	0x2000010c
 8003544:	200002a8 	.word	0x200002a8

08003548 <Stuffed_Transmit>:


static void Stuffed_Transmit(uint8_t tx_data){
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
	if(FS_Data.is_using_stuff_byte && (tx_data == STX || tx_data == ETX || tx_data == DLE)){
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <Stuffed_Transmit+0xb4>)
 8003554:	7b1b      	ldrb	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03a      	beq.n	80035d0 <Stuffed_Transmit+0x88>
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d005      	beq.n	800356c <Stuffed_Transmit+0x24>
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d002      	beq.n	800356c <Stuffed_Transmit+0x24>
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b10      	cmp	r3, #16
 800356a:	d131      	bne.n	80035d0 <Stuffed_Transmit+0x88>
		if(tx_data == DLE){
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d118      	bne.n	80035a4 <Stuffed_Transmit+0x5c>
			CRC_Update(&FS_Data.tx_checksum, DLE);
 8003572:	2110      	movs	r1, #16
 8003574:	4822      	ldr	r0, [pc, #136]	; (8003600 <Stuffed_Transmit+0xb8>)
 8003576:	f7ff ff5b 	bl	8003430 <CRC_Update>
			CRC_Update(&FS_Data.tx_checksum, DLE);
 800357a:	2110      	movs	r1, #16
 800357c:	4820      	ldr	r0, [pc, #128]	; (8003600 <Stuffed_Transmit+0xb8>)
 800357e:	f7ff ff57 	bl	8003430 <CRC_Update>
			uint8_t temp_data = DLE;
 8003582:	2310      	movs	r3, #16
 8003584:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart, &temp_data, 1, 100);
 8003586:	f107 010f 	add.w	r1, r7, #15
 800358a:	2364      	movs	r3, #100	; 0x64
 800358c:	2201      	movs	r2, #1
 800358e:	481d      	ldr	r0, [pc, #116]	; (8003604 <Stuffed_Transmit+0xbc>)
 8003590:	f7fe fc95 	bl	8001ebe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart, &temp_data, 1, 100);
 8003594:	f107 010f 	add.w	r1, r7, #15
 8003598:	2364      	movs	r3, #100	; 0x64
 800359a:	2201      	movs	r2, #1
 800359c:	4819      	ldr	r0, [pc, #100]	; (8003604 <Stuffed_Transmit+0xbc>)
 800359e:	f7fe fc8e 	bl	8001ebe <HAL_UART_Transmit>
		} else if(tx_data == STX || tx_data == ETX){
			uint8_t temp_data = DLE;
			HAL_UART_Transmit(&huart, &temp_data, 1, 100);
			HAL_UART_Transmit(&huart, &tx_data, 1, 100);
		}
		return;
 80035a2:	e027      	b.n	80035f4 <Stuffed_Transmit+0xac>
		} else if(tx_data == STX || tx_data == ETX){
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d002      	beq.n	80035b0 <Stuffed_Transmit+0x68>
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d121      	bne.n	80035f4 <Stuffed_Transmit+0xac>
			uint8_t temp_data = DLE;
 80035b0:	2310      	movs	r3, #16
 80035b2:	73bb      	strb	r3, [r7, #14]
			HAL_UART_Transmit(&huart, &temp_data, 1, 100);
 80035b4:	f107 010e 	add.w	r1, r7, #14
 80035b8:	2364      	movs	r3, #100	; 0x64
 80035ba:	2201      	movs	r2, #1
 80035bc:	4811      	ldr	r0, [pc, #68]	; (8003604 <Stuffed_Transmit+0xbc>)
 80035be:	f7fe fc7e 	bl	8001ebe <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart, &tx_data, 1, 100);
 80035c2:	1df9      	adds	r1, r7, #7
 80035c4:	2364      	movs	r3, #100	; 0x64
 80035c6:	2201      	movs	r2, #1
 80035c8:	480e      	ldr	r0, [pc, #56]	; (8003604 <Stuffed_Transmit+0xbc>)
 80035ca:	f7fe fc78 	bl	8001ebe <HAL_UART_Transmit>
		return;
 80035ce:	e011      	b.n	80035f4 <Stuffed_Transmit+0xac>
	}
	if(tx_data != STX && tx_data != ETX)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d007      	beq.n	80035e6 <Stuffed_Transmit+0x9e>
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d004      	beq.n	80035e6 <Stuffed_Transmit+0x9e>
		CRC_Update(&FS_Data.tx_checksum, tx_data);
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	4619      	mov	r1, r3
 80035e0:	4807      	ldr	r0, [pc, #28]	; (8003600 <Stuffed_Transmit+0xb8>)
 80035e2:	f7ff ff25 	bl	8003430 <CRC_Update>
	HAL_UART_Transmit(&huart, &tx_data, 1, 100);
 80035e6:	1df9      	adds	r1, r7, #7
 80035e8:	2364      	movs	r3, #100	; 0x64
 80035ea:	2201      	movs	r2, #1
 80035ec:	4805      	ldr	r0, [pc, #20]	; (8003604 <Stuffed_Transmit+0xbc>)
 80035ee:	f7fe fc66 	bl	8001ebe <HAL_UART_Transmit>
 80035f2:	e000      	b.n	80035f6 <Stuffed_Transmit+0xae>
		return;
 80035f4:	bf00      	nop
}
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000010c 	.word	0x2000010c
 8003600:	20000110 	.word	0x20000110
 8003604:	200002a8 	.word	0x200002a8

08003608 <Check_Frame>:

static void Check_Frame(uint8_t *p_frame, uint32_t size){
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size; i++){
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e012      	b.n	800363e <Check_Frame+0x36>
		if(p_frame[i] < 0x20 || p_frame[i] > 0x7E){
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b1f      	cmp	r3, #31
 8003622:	d905      	bls.n	8003630 <Check_Frame+0x28>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b7e      	cmp	r3, #126	; 0x7e
 800362e:	d903      	bls.n	8003638 <Check_Frame+0x30>
			FS_Data.is_using_stuff_byte = 1;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <Check_Frame+0x48>)
 8003632:	2201      	movs	r2, #1
 8003634:	731a      	strb	r2, [r3, #12]
			return;
 8003636:	e006      	b.n	8003646 <Check_Frame+0x3e>
	for(int i = 0; i < size; i++){
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d8e8      	bhi.n	8003618 <Check_Frame+0x10>
		}
	}
}
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	2000010c 	.word	0x2000010c

08003654 <FRAME_SYNC_CRC_Type>:

void FRAME_SYNC_Init(){

}

uint8_t FRAME_SYNC_CRC_Type(){
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	return FS_Data.crc_type;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <FRAME_SYNC_CRC_Type+0x14>)
 800365a:	781b      	ldrb	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000010c 	.word	0x2000010c

0800366c <FRAME_SYNC_Change_Setting>:

void FRAME_SYNC_Change_Setting(FRAME_SYNC_DATA_t *p_new_data){
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	FS_Data = *p_new_data;
 8003674:	4a06      	ldr	r2, [pc, #24]	; (8003690 <FRAME_SYNC_Change_Setting+0x24>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003680:	461a      	mov	r2, r3
 8003682:	f000 fb47 	bl	8003d14 <memcpy>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	2000010c 	.word	0x2000010c

08003694 <FRAME_SYNC_Transmit>:

void FRAME_SYNC_Transmit(uint8_t *tx_frame, uint8_t size){
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
	if(FS_Data.crc_type == CRC_32){
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <FRAME_SYNC_Transmit+0x80>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d104      	bne.n	80036b2 <FRAME_SYNC_Transmit+0x1e>
		FS_Data.tx_checksum = 0xFFFFFFFF;
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <FRAME_SYNC_Transmit+0x80>)
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	e002      	b.n	80036b8 <FRAME_SYNC_Transmit+0x24>
	} else{
		FS_Data.tx_checksum = 0;
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <FRAME_SYNC_Transmit+0x80>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	605a      	str	r2, [r3, #4]
	}
	Check_Frame(tx_frame, size);
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ffa3 	bl	8003608 <Check_Frame>
	Stuffed_Transmit(STX);
 80036c2:	2002      	movs	r0, #2
 80036c4:	f7ff ff40 	bl	8003548 <Stuffed_Transmit>
	HAL_UART_Transmit(&huart2, &size, 1, 100);
 80036c8:	1cf9      	adds	r1, r7, #3
 80036ca:	2364      	movs	r3, #100	; 0x64
 80036cc:	2201      	movs	r2, #1
 80036ce:	4812      	ldr	r0, [pc, #72]	; (8003718 <FRAME_SYNC_Transmit+0x84>)
 80036d0:	f7fe fbf5 	bl	8001ebe <HAL_UART_Transmit>
	for(int i = 0; i < size; i++){
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e009      	b.n	80036ee <FRAME_SYNC_Transmit+0x5a>
		Stuffed_Transmit(tx_frame[i]);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ff30 	bl	8003548 <Stuffed_Transmit>
	for(int i = 0; i < size; i++){
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	461a      	mov	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	dbf0      	blt.n	80036da <FRAME_SYNC_Transmit+0x46>
	}
	CRC_Transmit(&FS_Data.tx_checksum);
 80036f8:	4808      	ldr	r0, [pc, #32]	; (800371c <FRAME_SYNC_Transmit+0x88>)
 80036fa:	f7ff fed7 	bl	80034ac <CRC_Transmit>
	Stuffed_Transmit(ETX);
 80036fe:	2003      	movs	r0, #3
 8003700:	f7ff ff22 	bl	8003548 <Stuffed_Transmit>
	FS_Data.is_using_stuff_byte = 0;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <FRAME_SYNC_Transmit+0x80>)
 8003706:	2200      	movs	r2, #0
 8003708:	731a      	strb	r2, [r3, #12]
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000010c 	.word	0x2000010c
 8003718:	200002a8 	.word	0x200002a8
 800371c:	20000110 	.word	0x20000110

08003720 <FRAME_SYNC_Receive>:

void FRAME_SYNC_Receive(uint8_t rx_data){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
	switch(FS_Data.rx_state){
 800372a:	4b77      	ldr	r3, [pc, #476]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800372c:	7b9b      	ldrb	r3, [r3, #14]
 800372e:	2b04      	cmp	r3, #4
 8003730:	f200 80e0 	bhi.w	80038f4 <FRAME_SYNC_Receive+0x1d4>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <FRAME_SYNC_Receive+0x1c>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003751 	.word	0x08003751
 8003740:	08003797 	.word	0x08003797
 8003744:	080037b3 	.word	0x080037b3
 8003748:	08003843 	.word	0x08003843
 800374c:	08003891 	.word	0x08003891
		case SEARCHING_STX:
			if(rx_data == DLE){
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b10      	cmp	r3, #16
 8003754:	d103      	bne.n	800375e <FRAME_SYNC_Receive+0x3e>
				FS_Data.is_using_stuff_byte = 1;
 8003756:	4b6c      	ldr	r3, [pc, #432]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003758:	2201      	movs	r2, #1
 800375a:	731a      	strb	r2, [r3, #12]
 800375c:	e00e      	b.n	800377c <FRAME_SYNC_Receive+0x5c>
			} else if(rx_data == STX){
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d109      	bne.n	8003778 <FRAME_SYNC_Receive+0x58>
				FS_Data.rx_state = RECEIVING_NUM_DATA;
 8003764:	4b68      	ldr	r3, [pc, #416]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003766:	2201      	movs	r2, #1
 8003768:	739a      	strb	r2, [r3, #14]
				FS_Data.receiving_timer = HAL_GetTick();
 800376a:	f7fd fb9d 	bl	8000ea8 <HAL_GetTick>
 800376e:	4603      	mov	r3, r0
 8003770:	4a65      	ldr	r2, [pc, #404]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003772:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
 8003776:	e001      	b.n	800377c <FRAME_SYNC_Receive+0x5c>
			} else{
				Rx_Reset();
 8003778:	f7ff fe32 	bl	80033e0 <Rx_Reset>
			}
			if(FS_Data.crc_type == CRC_32){
 800377c:	4b62      	ldr	r3, [pc, #392]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d104      	bne.n	800378e <FRAME_SYNC_Receive+0x6e>
				FS_Data.rx_checksum = 0xFFFFFFFF;
 8003784:	4b60      	ldr	r3, [pc, #384]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003786:	f04f 32ff 	mov.w	r2, #4294967295
 800378a:	609a      	str	r2, [r3, #8]
			} else{
				FS_Data.rx_checksum = 0;
			}
			break;
 800378c:	e0b9      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
				FS_Data.rx_checksum = 0;
 800378e:	4b5e      	ldr	r3, [pc, #376]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
			break;
 8003794:	e0b5      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
		case RECEIVING_NUM_DATA:
			FS_Data.rx_length = rx_data;
 8003796:	4a5c      	ldr	r2, [pc, #368]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f882 310f 	strb.w	r3, [r2, #271]	; 0x10f
			FS_Data.rx_state = RECEIVING_DATA;
 800379e:	4b5a      	ldr	r3, [pc, #360]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037a0:	2202      	movs	r2, #2
 80037a2:	739a      	strb	r2, [r3, #14]
			FS_Data.receiving_timer = HAL_GetTick();
 80037a4:	f7fd fb80 	bl	8000ea8 <HAL_GetTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	4a57      	ldr	r2, [pc, #348]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037ac:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
			break;
 80037b0:	e0a7      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
		case RECEIVING_DATA:
			if(FS_Data.is_using_stuff_byte == 1){
 80037b2:	4b55      	ldr	r3, [pc, #340]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037b4:	7b1b      	ldrb	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d114      	bne.n	80037e4 <FRAME_SYNC_Receive+0xc4>
				if(rx_data == DLE){
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d111      	bne.n	80037e4 <FRAME_SYNC_Receive+0xc4>
					if(FS_Data.num_dle_byte == 0){
 80037c0:	4b51      	ldr	r3, [pc, #324]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037c2:	7b5b      	ldrb	r3, [r3, #13]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <FRAME_SYNC_Receive+0xb6>
						FS_Data.num_dle_byte++;
 80037c8:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037ca:	7b5b      	ldrb	r3, [r3, #13]
 80037cc:	3301      	adds	r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037d2:	735a      	strb	r2, [r3, #13]
						return;
 80037d4:	e095      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
					} else{
						FS_Data.num_dle_byte = 0;
 80037d6:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	735a      	strb	r2, [r3, #13]
						CRC_Update(&FS_Data.rx_checksum, DLE);
 80037dc:	2110      	movs	r1, #16
 80037de:	484b      	ldr	r0, [pc, #300]	; (800390c <FRAME_SYNC_Receive+0x1ec>)
 80037e0:	f7ff fe26 	bl	8003430 <CRC_Update>
					}
				}
			}
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4619      	mov	r1, r3
 80037e8:	4848      	ldr	r0, [pc, #288]	; (800390c <FRAME_SYNC_Receive+0x1ec>)
 80037ea:	f7ff fe21 	bl	8003430 <CRC_Update>
			FS_Data.rx_buf[FS_Data.rx_pointer++] = rx_data;
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037f0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	b2d1      	uxtb	r1, r2
 80037f8:	4a43      	ldr	r2, [pc, #268]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80037fa:	f882 110e 	strb.w	r1, [r2, #270]	; 0x10e
 80037fe:	461a      	mov	r2, r3
 8003800:	4b41      	ldr	r3, [pc, #260]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003802:	4413      	add	r3, r2
 8003804:	79fa      	ldrb	r2, [r7, #7]
 8003806:	73da      	strb	r2, [r3, #15]
			if(FS_Data.rx_pointer == FS_Data.rx_length){
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800380a:	f893 210e 	ldrb.w	r2, [r3, #270]	; 0x10e
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003810:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8003814:	429a      	cmp	r2, r3
 8003816:	d109      	bne.n	800382c <FRAME_SYNC_Receive+0x10c>
				FS_Data.rx_state = RECEIVING_CRC;
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800381a:	2203      	movs	r2, #3
 800381c:	739a      	strb	r2, [r3, #14]
				FS_Data.receiving_timer = HAL_GetTick();
 800381e:	f7fd fb43 	bl	8000ea8 <HAL_GetTick>
 8003822:	4603      	mov	r3, r0
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003826:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
			} else if(FS_Data.rx_pointer > FS_Data.rx_length){
				Rx_Reset();
			}
			break;
 800382a:	e065      	b.n	80038f8 <FRAME_SYNC_Receive+0x1d8>
			} else if(FS_Data.rx_pointer > FS_Data.rx_length){
 800382c:	4b36      	ldr	r3, [pc, #216]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800382e:	f893 210e 	ldrb.w	r2, [r3, #270]	; 0x10e
 8003832:	4b35      	ldr	r3, [pc, #212]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003834:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8003838:	429a      	cmp	r2, r3
 800383a:	d95d      	bls.n	80038f8 <FRAME_SYNC_Receive+0x1d8>
				Rx_Reset();
 800383c:	f7ff fdd0 	bl	80033e0 <Rx_Reset>
			break;
 8003840:	e05a      	b.n	80038f8 <FRAME_SYNC_Receive+0x1d8>
		case RECEIVING_CRC:
			FS_Data.rx_crc |= (uint32_t)rx_data << ((FS_Data.rx_num_crc_byte) * 8);
 8003842:	4b31      	ldr	r3, [pc, #196]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003844:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003848:	79f9      	ldrb	r1, [r7, #7]
 800384a:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800384c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	4313      	orrs	r3, r2
 8003858:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800385a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
			FS_Data.rx_num_crc_byte++;
 800385e:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003860:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003864:	3301      	adds	r3, #1
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800386a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			if(FS_Data.rx_num_crc_byte == FS_Data.crc_type){
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003870:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d13f      	bne.n	80038fc <FRAME_SYNC_Receive+0x1dc>
				FS_Data.rx_state = RECEIVING_ETX;
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800387e:	2204      	movs	r2, #4
 8003880:	739a      	strb	r2, [r3, #14]
				FS_Data.receiving_timer = HAL_GetTick();
 8003882:	f7fd fb11 	bl	8000ea8 <HAL_GetTick>
 8003886:	4603      	mov	r3, r0
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800388a:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
			}
			break;
 800388e:	e035      	b.n	80038fc <FRAME_SYNC_Receive+0x1dc>
		case RECEIVING_ETX:
			if(rx_data == DLE) return;
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	2b10      	cmp	r3, #16
 8003894:	d034      	beq.n	8003900 <FRAME_SYNC_Receive+0x1e0>
			if(rx_data == ETX){
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d121      	bne.n	80038e0 <FRAME_SYNC_Receive+0x1c0>
				if(FS_Data.crc_type == CRC_32) FS_Data.rx_checksum = ~FS_Data.rx_checksum;
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d104      	bne.n	80038ae <FRAME_SYNC_Receive+0x18e>
 80038a4:	4b18      	ldr	r3, [pc, #96]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	4a17      	ldr	r2, [pc, #92]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038ac:	6093      	str	r3, [r2, #8]
				if(FS_Data.rx_crc == FS_Data.rx_checksum){
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038b0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d107      	bne.n	80038cc <FRAME_SYNC_Receive+0x1ac>
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_buf, FS_Data.rx_length);
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038be:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80038c2:	4619      	mov	r1, r3
 80038c4:	4812      	ldr	r0, [pc, #72]	; (8003910 <FRAME_SYNC_Receive+0x1f0>)
 80038c6:	f7fc fe7d 	bl	80005c4 <FRAME_SYNC_RxCpltCallback>
 80038ca:	e006      	b.n	80038da <FRAME_SYNC_Receive+0x1ba>
				} else{
					FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038ce:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80038d2:	4619      	mov	r1, r3
 80038d4:	480e      	ldr	r0, [pc, #56]	; (8003910 <FRAME_SYNC_Receive+0x1f0>)
 80038d6:	f7fc fed5 	bl	8000684 <FRAME_SYNC_RxFailCallback>
				}
				Rx_Reset();
 80038da:	f7ff fd81 	bl	80033e0 <Rx_Reset>
			} else{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
			}
			break;
 80038de:	e010      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
				Rx_Reset();
 80038e0:	f7ff fd7e 	bl	80033e0 <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
 80038e4:	4b08      	ldr	r3, [pc, #32]	; (8003908 <FRAME_SYNC_Receive+0x1e8>)
 80038e6:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80038ea:	4619      	mov	r1, r3
 80038ec:	4808      	ldr	r0, [pc, #32]	; (8003910 <FRAME_SYNC_Receive+0x1f0>)
 80038ee:	f7fc fec9 	bl	8000684 <FRAME_SYNC_RxFailCallback>
			break;
 80038f2:	e006      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
		default:
			break;
 80038f4:	bf00      	nop
 80038f6:	e004      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
			break;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
			break;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <FRAME_SYNC_Receive+0x1e2>
			if(rx_data == DLE) return;
 8003900:	bf00      	nop
	}
}
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000010c 	.word	0x2000010c
 800390c:	20000114 	.word	0x20000114
 8003910:	2000011b 	.word	0x2000011b

08003914 <FRAME_SYNC_Handle>:

void FRAME_SYNC_Handle(){
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
	if(FS_Data.rx_state != SEARCHING_STX && (HAL_GetTick() - FS_Data.receiving_timer > 500)){
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <FRAME_SYNC_Handle+0x38>)
 800391a:	7b9b      	ldrb	r3, [r3, #14]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <FRAME_SYNC_Handle+0x32>
 8003920:	f7fd fac2 	bl	8000ea8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <FRAME_SYNC_Handle+0x38>)
 8003928:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003932:	d908      	bls.n	8003946 <FRAME_SYNC_Handle+0x32>
		Rx_Reset();
 8003934:	f7ff fd54 	bl	80033e0 <Rx_Reset>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <FRAME_SYNC_Handle+0x38>)
 800393a:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800393e:	4619      	mov	r1, r3
 8003940:	4803      	ldr	r0, [pc, #12]	; (8003950 <FRAME_SYNC_Handle+0x3c>)
 8003942:	f7fc fe9f 	bl	8000684 <FRAME_SYNC_RxFailCallback>
	}
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000010c 	.word	0x2000010c
 8003950:	2000011b 	.word	0x2000011b

08003954 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8b1b      	ldrh	r3, [r3, #24]
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7fd fdd2 	bl	8001510 <HAL_GPIO_ReadPin>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	789b      	ldrb	r3, [r3, #2]
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	429a      	cmp	r2, r3
 8003978:	d00a      	beq.n	8003990 <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8003986:	f7fd fa8f 	bl	8000ea8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	78db      	ldrb	r3, [r3, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <BUTTON_Handle+0x62>
 8003998:	f7fd fa86 	bl	8000ea8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b0e      	cmp	r3, #14
 80039a6:	d906      	bls.n	80039b6 <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	789a      	ldrb	r2, [r3, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d03c      	beq.n	8003a3c <BUTTON_Handle+0xe8>
		if(ButtonX->BTN_Current == !ButtonX->releasing_state){
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7c1b      	ldrb	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d110      	bne.n	80039fc <BUTTON_Handle+0xa8>
			if(__BUTTON_Pressing_Callback != NULL){
 80039da:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <BUTTON_Handle+0x120>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <BUTTON_Handle+0x96>
				__BUTTON_Pressing_Callback(ButtonX);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <BUTTON_Handle+0x120>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 80039f0:	f7fd fa5a 	bl	8000ea8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e01b      	b.n	8003a34 <BUTTON_Handle+0xe0>
		}
		else{
			ButtonX->is_press = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 8003a02:	f7fd fa51 	bl	8000ea8 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a12:	d807      	bhi.n	8003a24 <BUTTON_Handle+0xd0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 8003a14:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <BUTTON_Handle+0x124>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <BUTTON_Handle+0xd0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <BUTTON_Handle+0x124>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <BUTTON_Handle+0x128>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <BUTTON_Handle+0xe0>
				__BUTTON_Releasing_Callback(ButtonX);
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <BUTTON_Handle+0x128>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	791b      	ldrb	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <BUTTON_Handle+0x118>
 8003a44:	f7fd fa30 	bl	8000ea8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a54:	d30a      	bcc.n	8003a6c <BUTTON_Handle+0x118>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <BUTTON_Handle+0x12c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <BUTTON_Handle+0x112>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <BUTTON_Handle+0x12c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	711a      	strb	r2, [r3, #4]
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000b64 	.word	0x20000b64
 8003a78:	20000b6c 	.word	0x20000b6c
 8003a7c:	20000b68 	.word	0x20000b68
 8003a80:	20000b70 	.word	0x20000b70

08003a84 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t releasing_state){
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	460b      	mov	r3, r1
 8003a94:	80fb      	strh	r3, [r7, #6]
 8003a96:	4613      	mov	r3, r2
 8003a98:	717b      	strb	r3, [r7, #5]
	ButtonX->GPIOx = GPIOx;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	615a      	str	r2, [r3, #20]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	831a      	strh	r2, [r3, #24]
	ButtonX->releasing_state = releasing_state;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	797a      	ldrb	r2, [r7, #5]
 8003aaa:	741a      	strb	r2, [r3, #16]
	ButtonX->BTN_Current = releasing_state;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	797a      	ldrb	r2, [r7, #5]
 8003ab0:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = releasing_state;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	797a      	ldrb	r2, [r7, #5]
 8003ab6:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = releasing_state;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	797a      	ldrb	r2, [r7, #5]
 8003abc:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	711a      	strb	r2, [r3, #4]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <BUTTON_Set_Callback_Function+0x34>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8003aec:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <BUTTON_Set_Callback_Function+0x38>)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <BUTTON_Set_Callback_Function+0x3c>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 8003af8:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <BUTTON_Set_Callback_Function+0x40>)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6013      	str	r3, [r2, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000b64 	.word	0x20000b64
 8003b10:	20000b68 	.word	0x20000b68
 8003b14:	20000b6c 	.word	0x20000b6c
 8003b18:	20000b70 	.word	0x20000b70

08003b1c <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_buffer, uint16_t p_max_length){
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	811a      	strh	r2, [r3, #8]
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t p_data){
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	889b      	ldrh	r3, [r3, #4]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	891b      	ldrh	r3, [r3, #8]
 8003b66:	89fa      	ldrh	r2, [r7, #14]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d301      	bcc.n	8003b70 <RING_BUFFER_Push+0x22>
		t_next = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	81fb      	strh	r3, [r7, #14]

	if(t_next == p_ring_buffer->tail)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	88db      	ldrh	r3, [r3, #6]
 8003b74:	89fa      	ldrh	r2, [r7, #14]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d102      	bne.n	8003b80 <RING_BUFFER_Push+0x32>
		return -1;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	e00a      	b.n	8003b96 <RING_BUFFER_Push+0x48>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	8892      	ldrh	r2, [r2, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->head = t_next;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	89fa      	ldrh	r2, [r7, #14]
 8003b92:	809a      	strh	r2, [r3, #4]

	return 0;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_data){
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	88da      	ldrh	r2, [r3, #6]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	889b      	ldrh	r3, [r3, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d102      	bne.n	8003bbe <RING_BUFFER_Pop+0x1c>
		return -1;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	e016      	b.n	8003bec <RING_BUFFER_Pop+0x4a>

	t_next = p_ring_buffer->tail + 1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	88db      	ldrh	r3, [r3, #6]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	891b      	ldrh	r3, [r3, #8]
 8003bca:	89fa      	ldrh	r2, [r7, #14]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d301      	bcc.n	8003bd4 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	88d2      	ldrh	r2, [r2, #6]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->tail = t_next;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	89fa      	ldrh	r2, [r7, #14]
 8003be8:	80da      	strh	r2, [r3, #6]

	return 0;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
//	} else if(p_ring_buffer->head < p_ring_buffer->tail){
//		return p_ring_buffer->max_length - (p_ring_buffer->head - p_ring_buffer->tail);
//	} else if(p_ring_buffer->head == p_ring_buffer->tail){
//		return 0;
//	}
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	889a      	ldrh	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	88db      	ldrh	r3, [r3, #6]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	b29b      	uxth	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_Init>:
static uint8_t uart_buffer[UART_MAX_LEN];
RING_BUFFER_HandleTypeDef uart_ring_buffer;

extern UART_HandleTypeDef huart2;

void UART_Init(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	RING_BUFFER_Init(&uart_ring_buffer, uart_buffer, UART_MAX_LEN);
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	4903      	ldr	r1, [pc, #12]	; (8003c34 <UART_Init+0x14>)
 8003c28:	4803      	ldr	r0, [pc, #12]	; (8003c38 <UART_Init+0x18>)
 8003c2a:	f7ff ff77 	bl	8003b1c <RING_BUFFER_Init>
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000b74 	.word	0x20000b74
 8003c38:	20000c74 	.word	0x20000c74

08003c3c <UART_Receive>:

void UART_Receive(uint8_t Rx_Buffer){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
	RING_BUFFER_Push(&uart_ring_buffer, Rx_Buffer);
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4803      	ldr	r0, [pc, #12]	; (8003c58 <UART_Receive+0x1c>)
 8003c4c:	f7ff ff7f 	bl	8003b4e <RING_BUFFER_Push>
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000c74 	.word	0x20000c74

08003c5c <UART_Handle>:

__weak void UART_Handle(){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	if(UART_Available() != 0){
 8003c62:	f000 f81f 	bl	8003ca4 <UART_Available>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <UART_Handle+0x20>
		uint8_t t_data = UART_Read();
 8003c6c:	f000 f80a 	bl	8003c84 <UART_Read>
 8003c70:	4603      	mov	r3, r0
 8003c72:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Receive(t_data);
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fd52 	bl	8003720 <FRAME_SYNC_Receive>
	}
}
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_Read>:

uint8_t UART_Read(){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
	uint8_t t_data;
	RING_BUFFER_Pop(&uart_ring_buffer, &t_data);
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <UART_Read+0x1c>)
 8003c90:	f7ff ff87 	bl	8003ba2 <RING_BUFFER_Pop>
	return t_data;
 8003c94:	79fb      	ldrb	r3, [r7, #7]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000c74 	.word	0x20000c74

08003ca4 <UART_Available>:

uint16_t UART_Available(){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	return RING_BUFFER_Available(&uart_ring_buffer);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <UART_Available+0x10>)
 8003caa:	f7ff ffa5 	bl	8003bf8 <RING_BUFFER_Available>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000c74 	.word	0x20000c74

08003cb8 <atoi>:
 8003cb8:	220a      	movs	r2, #10
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f000 b970 	b.w	8003fa0 <strtol>

08003cc0 <__errno>:
 8003cc0:	4b01      	ldr	r3, [pc, #4]	; (8003cc8 <__errno+0x8>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000228 	.word	0x20000228

08003ccc <__libc_init_array>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4d0d      	ldr	r5, [pc, #52]	; (8003d04 <__libc_init_array+0x38>)
 8003cd0:	4c0d      	ldr	r4, [pc, #52]	; (8003d08 <__libc_init_array+0x3c>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	42a6      	cmp	r6, r4
 8003cda:	d109      	bne.n	8003cf0 <__libc_init_array+0x24>
 8003cdc:	4d0b      	ldr	r5, [pc, #44]	; (8003d0c <__libc_init_array+0x40>)
 8003cde:	4c0c      	ldr	r4, [pc, #48]	; (8003d10 <__libc_init_array+0x44>)
 8003ce0:	f001 fb10 	bl	8005304 <_init>
 8003ce4:	1b64      	subs	r4, r4, r5
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	2600      	movs	r6, #0
 8003cea:	42a6      	cmp	r6, r4
 8003cec:	d105      	bne.n	8003cfa <__libc_init_array+0x2e>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf4:	4798      	blx	r3
 8003cf6:	3601      	adds	r6, #1
 8003cf8:	e7ee      	b.n	8003cd8 <__libc_init_array+0xc>
 8003cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfe:	4798      	blx	r3
 8003d00:	3601      	adds	r6, #1
 8003d02:	e7f2      	b.n	8003cea <__libc_init_array+0x1e>
 8003d04:	08005688 	.word	0x08005688
 8003d08:	08005688 	.word	0x08005688
 8003d0c:	08005688 	.word	0x08005688
 8003d10:	0800568c 	.word	0x0800568c

08003d14 <memcpy>:
 8003d14:	440a      	add	r2, r1
 8003d16:	4291      	cmp	r1, r2
 8003d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d1c:	d100      	bne.n	8003d20 <memcpy+0xc>
 8003d1e:	4770      	bx	lr
 8003d20:	b510      	push	{r4, lr}
 8003d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d2a:	4291      	cmp	r1, r2
 8003d2c:	d1f9      	bne.n	8003d22 <memcpy+0xe>
 8003d2e:	bd10      	pop	{r4, pc}

08003d30 <memset>:
 8003d30:	4402      	add	r2, r0
 8003d32:	4603      	mov	r3, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <siprintf>:
 8003d40:	b40e      	push	{r1, r2, r3}
 8003d42:	b500      	push	{lr}
 8003d44:	b09c      	sub	sp, #112	; 0x70
 8003d46:	ab1d      	add	r3, sp, #116	; 0x74
 8003d48:	9002      	str	r0, [sp, #8]
 8003d4a:	9006      	str	r0, [sp, #24]
 8003d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d50:	4809      	ldr	r0, [pc, #36]	; (8003d78 <siprintf+0x38>)
 8003d52:	9107      	str	r1, [sp, #28]
 8003d54:	9104      	str	r1, [sp, #16]
 8003d56:	4909      	ldr	r1, [pc, #36]	; (8003d7c <siprintf+0x3c>)
 8003d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d5c:	9105      	str	r1, [sp, #20]
 8003d5e:	6800      	ldr	r0, [r0, #0]
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	a902      	add	r1, sp, #8
 8003d64:	f000 fa9a 	bl	800429c <_svfiprintf_r>
 8003d68:	9b02      	ldr	r3, [sp, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	b01c      	add	sp, #112	; 0x70
 8003d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d74:	b003      	add	sp, #12
 8003d76:	4770      	bx	lr
 8003d78:	20000228 	.word	0x20000228
 8003d7c:	ffff0208 	.word	0xffff0208

08003d80 <strcat>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4602      	mov	r2, r0
 8003d84:	7814      	ldrb	r4, [r2, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	3201      	adds	r2, #1
 8003d8a:	2c00      	cmp	r4, #0
 8003d8c:	d1fa      	bne.n	8003d84 <strcat+0x4>
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	d1f9      	bne.n	8003d90 <strcat+0x10>
 8003d9c:	bd10      	pop	{r4, pc}

08003d9e <strchr>:
 8003d9e:	b2c9      	uxtb	r1, r1
 8003da0:	4603      	mov	r3, r0
 8003da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da6:	b11a      	cbz	r2, 8003db0 <strchr+0x12>
 8003da8:	428a      	cmp	r2, r1
 8003daa:	d1f9      	bne.n	8003da0 <strchr+0x2>
 8003dac:	4618      	mov	r0, r3
 8003dae:	4770      	bx	lr
 8003db0:	2900      	cmp	r1, #0
 8003db2:	bf18      	it	ne
 8003db4:	2300      	movne	r3, #0
 8003db6:	e7f9      	b.n	8003dac <strchr+0xe>

08003db8 <strstr>:
 8003db8:	780a      	ldrb	r2, [r1, #0]
 8003dba:	b570      	push	{r4, r5, r6, lr}
 8003dbc:	b96a      	cbnz	r2, 8003dda <strstr+0x22>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d109      	bne.n	8003dd8 <strstr+0x20>
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f6      	beq.n	8003dbe <strstr+0x6>
 8003dd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003dd4:	429e      	cmp	r6, r3
 8003dd6:	d0f7      	beq.n	8003dc8 <strstr+0x10>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	7803      	ldrb	r3, [r0, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ef      	bne.n	8003dc0 <strstr+0x8>
 8003de0:	4618      	mov	r0, r3
 8003de2:	e7ec      	b.n	8003dbe <strstr+0x6>

08003de4 <strtok>:
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <strtok+0x5c>)
 8003de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de8:	681e      	ldr	r6, [r3, #0]
 8003dea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003dec:	4605      	mov	r5, r0
 8003dee:	b9fc      	cbnz	r4, 8003e30 <strtok+0x4c>
 8003df0:	2050      	movs	r0, #80	; 0x50
 8003df2:	9101      	str	r1, [sp, #4]
 8003df4:	f000 f90e 	bl	8004014 <malloc>
 8003df8:	9901      	ldr	r1, [sp, #4]
 8003dfa:	65b0      	str	r0, [r6, #88]	; 0x58
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	b920      	cbnz	r0, 8003e0a <strtok+0x26>
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <strtok+0x60>)
 8003e02:	4811      	ldr	r0, [pc, #68]	; (8003e48 <strtok+0x64>)
 8003e04:	2157      	movs	r1, #87	; 0x57
 8003e06:	f000 f8d5 	bl	8003fb4 <__assert_func>
 8003e0a:	e9c0 4400 	strd	r4, r4, [r0]
 8003e0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003e12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003e16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003e1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003e1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003e22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003e26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003e2a:	6184      	str	r4, [r0, #24]
 8003e2c:	7704      	strb	r4, [r0, #28]
 8003e2e:	6244      	str	r4, [r0, #36]	; 0x24
 8003e30:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003e32:	2301      	movs	r3, #1
 8003e34:	4628      	mov	r0, r5
 8003e36:	b002      	add	sp, #8
 8003e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e3c:	f000 b806 	b.w	8003e4c <__strtok_r>
 8003e40:	20000228 	.word	0x20000228
 8003e44:	0800543c 	.word	0x0800543c
 8003e48:	08005453 	.word	0x08005453

08003e4c <__strtok_r>:
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b908      	cbnz	r0, 8003e54 <__strtok_r+0x8>
 8003e50:	6810      	ldr	r0, [r2, #0]
 8003e52:	b188      	cbz	r0, 8003e78 <__strtok_r+0x2c>
 8003e54:	4604      	mov	r4, r0
 8003e56:	4620      	mov	r0, r4
 8003e58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e5c:	460f      	mov	r7, r1
 8003e5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e62:	b91e      	cbnz	r6, 8003e6c <__strtok_r+0x20>
 8003e64:	b965      	cbnz	r5, 8003e80 <__strtok_r+0x34>
 8003e66:	6015      	str	r5, [r2, #0]
 8003e68:	4628      	mov	r0, r5
 8003e6a:	e005      	b.n	8003e78 <__strtok_r+0x2c>
 8003e6c:	42b5      	cmp	r5, r6
 8003e6e:	d1f6      	bne.n	8003e5e <__strtok_r+0x12>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <__strtok_r+0xa>
 8003e74:	6014      	str	r4, [r2, #0]
 8003e76:	7003      	strb	r3, [r0, #0]
 8003e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7a:	461c      	mov	r4, r3
 8003e7c:	e00c      	b.n	8003e98 <__strtok_r+0x4c>
 8003e7e:	b915      	cbnz	r5, 8003e86 <__strtok_r+0x3a>
 8003e80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e84:	460e      	mov	r6, r1
 8003e86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003e8a:	42ab      	cmp	r3, r5
 8003e8c:	d1f7      	bne.n	8003e7e <__strtok_r+0x32>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f3      	beq.n	8003e7a <__strtok_r+0x2e>
 8003e92:	2300      	movs	r3, #0
 8003e94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003e98:	6014      	str	r4, [r2, #0]
 8003e9a:	e7ed      	b.n	8003e78 <__strtok_r+0x2c>

08003e9c <_strtol_l.constprop.0>:
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea2:	d001      	beq.n	8003ea8 <_strtol_l.constprop.0+0xc>
 8003ea4:	2b24      	cmp	r3, #36	; 0x24
 8003ea6:	d906      	bls.n	8003eb6 <_strtol_l.constprop.0+0x1a>
 8003ea8:	f7ff ff0a 	bl	8003cc0 <__errno>
 8003eac:	2316      	movs	r3, #22
 8003eae:	6003      	str	r3, [r0, #0]
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003f9c <_strtol_l.constprop.0+0x100>
 8003eba:	460d      	mov	r5, r1
 8003ebc:	462e      	mov	r6, r5
 8003ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ec2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003ec6:	f017 0708 	ands.w	r7, r7, #8
 8003eca:	d1f7      	bne.n	8003ebc <_strtol_l.constprop.0+0x20>
 8003ecc:	2c2d      	cmp	r4, #45	; 0x2d
 8003ece:	d132      	bne.n	8003f36 <_strtol_l.constprop.0+0x9a>
 8003ed0:	782c      	ldrb	r4, [r5, #0]
 8003ed2:	2701      	movs	r7, #1
 8003ed4:	1cb5      	adds	r5, r6, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d05b      	beq.n	8003f92 <_strtol_l.constprop.0+0xf6>
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d109      	bne.n	8003ef2 <_strtol_l.constprop.0+0x56>
 8003ede:	2c30      	cmp	r4, #48	; 0x30
 8003ee0:	d107      	bne.n	8003ef2 <_strtol_l.constprop.0+0x56>
 8003ee2:	782c      	ldrb	r4, [r5, #0]
 8003ee4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003ee8:	2c58      	cmp	r4, #88	; 0x58
 8003eea:	d14d      	bne.n	8003f88 <_strtol_l.constprop.0+0xec>
 8003eec:	786c      	ldrb	r4, [r5, #1]
 8003eee:	2310      	movs	r3, #16
 8003ef0:	3502      	adds	r5, #2
 8003ef2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003ef6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003efa:	f04f 0c00 	mov.w	ip, #0
 8003efe:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f02:	4666      	mov	r6, ip
 8003f04:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f0c:	f1be 0f09 	cmp.w	lr, #9
 8003f10:	d816      	bhi.n	8003f40 <_strtol_l.constprop.0+0xa4>
 8003f12:	4674      	mov	r4, lr
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	dd24      	ble.n	8003f62 <_strtol_l.constprop.0+0xc6>
 8003f18:	f1bc 0f00 	cmp.w	ip, #0
 8003f1c:	db1e      	blt.n	8003f5c <_strtol_l.constprop.0+0xc0>
 8003f1e:	45b1      	cmp	r9, r6
 8003f20:	d31c      	bcc.n	8003f5c <_strtol_l.constprop.0+0xc0>
 8003f22:	d101      	bne.n	8003f28 <_strtol_l.constprop.0+0x8c>
 8003f24:	45a2      	cmp	sl, r4
 8003f26:	db19      	blt.n	8003f5c <_strtol_l.constprop.0+0xc0>
 8003f28:	fb06 4603 	mla	r6, r6, r3, r4
 8003f2c:	f04f 0c01 	mov.w	ip, #1
 8003f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f34:	e7e8      	b.n	8003f08 <_strtol_l.constprop.0+0x6c>
 8003f36:	2c2b      	cmp	r4, #43	; 0x2b
 8003f38:	bf04      	itt	eq
 8003f3a:	782c      	ldrbeq	r4, [r5, #0]
 8003f3c:	1cb5      	addeq	r5, r6, #2
 8003f3e:	e7ca      	b.n	8003ed6 <_strtol_l.constprop.0+0x3a>
 8003f40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003f44:	f1be 0f19 	cmp.w	lr, #25
 8003f48:	d801      	bhi.n	8003f4e <_strtol_l.constprop.0+0xb2>
 8003f4a:	3c37      	subs	r4, #55	; 0x37
 8003f4c:	e7e2      	b.n	8003f14 <_strtol_l.constprop.0+0x78>
 8003f4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003f52:	f1be 0f19 	cmp.w	lr, #25
 8003f56:	d804      	bhi.n	8003f62 <_strtol_l.constprop.0+0xc6>
 8003f58:	3c57      	subs	r4, #87	; 0x57
 8003f5a:	e7db      	b.n	8003f14 <_strtol_l.constprop.0+0x78>
 8003f5c:	f04f 3cff 	mov.w	ip, #4294967295
 8003f60:	e7e6      	b.n	8003f30 <_strtol_l.constprop.0+0x94>
 8003f62:	f1bc 0f00 	cmp.w	ip, #0
 8003f66:	da05      	bge.n	8003f74 <_strtol_l.constprop.0+0xd8>
 8003f68:	2322      	movs	r3, #34	; 0x22
 8003f6a:	6003      	str	r3, [r0, #0]
 8003f6c:	4646      	mov	r6, r8
 8003f6e:	b942      	cbnz	r2, 8003f82 <_strtol_l.constprop.0+0xe6>
 8003f70:	4630      	mov	r0, r6
 8003f72:	e79e      	b.n	8003eb2 <_strtol_l.constprop.0+0x16>
 8003f74:	b107      	cbz	r7, 8003f78 <_strtol_l.constprop.0+0xdc>
 8003f76:	4276      	negs	r6, r6
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	d0f9      	beq.n	8003f70 <_strtol_l.constprop.0+0xd4>
 8003f7c:	f1bc 0f00 	cmp.w	ip, #0
 8003f80:	d000      	beq.n	8003f84 <_strtol_l.constprop.0+0xe8>
 8003f82:	1e69      	subs	r1, r5, #1
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	e7f3      	b.n	8003f70 <_strtol_l.constprop.0+0xd4>
 8003f88:	2430      	movs	r4, #48	; 0x30
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1b1      	bne.n	8003ef2 <_strtol_l.constprop.0+0x56>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	e7af      	b.n	8003ef2 <_strtol_l.constprop.0+0x56>
 8003f92:	2c30      	cmp	r4, #48	; 0x30
 8003f94:	d0a5      	beq.n	8003ee2 <_strtol_l.constprop.0+0x46>
 8003f96:	230a      	movs	r3, #10
 8003f98:	e7ab      	b.n	8003ef2 <_strtol_l.constprop.0+0x56>
 8003f9a:	bf00      	nop
 8003f9c:	080054ed 	.word	0x080054ed

08003fa0 <strtol>:
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <strtol+0x10>)
 8003fa8:	6800      	ldr	r0, [r0, #0]
 8003faa:	f7ff bf77 	b.w	8003e9c <_strtol_l.constprop.0>
 8003fae:	bf00      	nop
 8003fb0:	20000228 	.word	0x20000228

08003fb4 <__assert_func>:
 8003fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <__assert_func+0x2c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	68d8      	ldr	r0, [r3, #12]
 8003fc2:	b14c      	cbz	r4, 8003fd8 <__assert_func+0x24>
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <__assert_func+0x30>)
 8003fc6:	9100      	str	r1, [sp, #0]
 8003fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003fcc:	4906      	ldr	r1, [pc, #24]	; (8003fe8 <__assert_func+0x34>)
 8003fce:	462b      	mov	r3, r5
 8003fd0:	f000 f80e 	bl	8003ff0 <fiprintf>
 8003fd4:	f000 fe20 	bl	8004c18 <abort>
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <__assert_func+0x38>)
 8003fda:	461c      	mov	r4, r3
 8003fdc:	e7f3      	b.n	8003fc6 <__assert_func+0x12>
 8003fde:	bf00      	nop
 8003fe0:	20000228 	.word	0x20000228
 8003fe4:	080054b0 	.word	0x080054b0
 8003fe8:	080054bd 	.word	0x080054bd
 8003fec:	080054eb 	.word	0x080054eb

08003ff0 <fiprintf>:
 8003ff0:	b40e      	push	{r1, r2, r3}
 8003ff2:	b503      	push	{r0, r1, lr}
 8003ff4:	4601      	mov	r1, r0
 8003ff6:	ab03      	add	r3, sp, #12
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <fiprintf+0x20>)
 8003ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ffe:	6800      	ldr	r0, [r0, #0]
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	f000 fa75 	bl	80044f0 <_vfiprintf_r>
 8004006:	b002      	add	sp, #8
 8004008:	f85d eb04 	ldr.w	lr, [sp], #4
 800400c:	b003      	add	sp, #12
 800400e:	4770      	bx	lr
 8004010:	20000228 	.word	0x20000228

08004014 <malloc>:
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <malloc+0xc>)
 8004016:	4601      	mov	r1, r0
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f000 b86f 	b.w	80040fc <_malloc_r>
 800401e:	bf00      	nop
 8004020:	20000228 	.word	0x20000228

08004024 <_free_r>:
 8004024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004026:	2900      	cmp	r1, #0
 8004028:	d044      	beq.n	80040b4 <_free_r+0x90>
 800402a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402e:	9001      	str	r0, [sp, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f1a1 0404 	sub.w	r4, r1, #4
 8004036:	bfb8      	it	lt
 8004038:	18e4      	addlt	r4, r4, r3
 800403a:	f001 f82f 	bl	800509c <__malloc_lock>
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <_free_r+0x94>)
 8004040:	9801      	ldr	r0, [sp, #4]
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	b933      	cbnz	r3, 8004054 <_free_r+0x30>
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6014      	str	r4, [r2, #0]
 800404a:	b003      	add	sp, #12
 800404c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004050:	f001 b82a 	b.w	80050a8 <__malloc_unlock>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d908      	bls.n	800406a <_free_r+0x46>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	1961      	adds	r1, r4, r5
 800405c:	428b      	cmp	r3, r1
 800405e:	bf01      	itttt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	1949      	addeq	r1, r1, r5
 8004066:	6021      	streq	r1, [r4, #0]
 8004068:	e7ed      	b.n	8004046 <_free_r+0x22>
 800406a:	461a      	mov	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b10b      	cbz	r3, 8004074 <_free_r+0x50>
 8004070:	42a3      	cmp	r3, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x46>
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	1855      	adds	r5, r2, r1
 8004078:	42a5      	cmp	r5, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x70>
 800407c:	6824      	ldr	r4, [r4, #0]
 800407e:	4421      	add	r1, r4
 8004080:	1854      	adds	r4, r2, r1
 8004082:	42a3      	cmp	r3, r4
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	d1e0      	bne.n	800404a <_free_r+0x26>
 8004088:	681c      	ldr	r4, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	6053      	str	r3, [r2, #4]
 800408e:	4421      	add	r1, r4
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	e7da      	b.n	800404a <_free_r+0x26>
 8004094:	d902      	bls.n	800409c <_free_r+0x78>
 8004096:	230c      	movs	r3, #12
 8004098:	6003      	str	r3, [r0, #0]
 800409a:	e7d6      	b.n	800404a <_free_r+0x26>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	1961      	adds	r1, r4, r5
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf04      	itt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	bf04      	itt	eq
 80040ac:	1949      	addeq	r1, r1, r5
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	6054      	str	r4, [r2, #4]
 80040b2:	e7ca      	b.n	800404a <_free_r+0x26>
 80040b4:	b003      	add	sp, #12
 80040b6:	bd30      	pop	{r4, r5, pc}
 80040b8:	20000c80 	.word	0x20000c80

080040bc <sbrk_aligned>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0e      	ldr	r6, [pc, #56]	; (80040f8 <sbrk_aligned+0x3c>)
 80040c0:	460c      	mov	r4, r1
 80040c2:	6831      	ldr	r1, [r6, #0]
 80040c4:	4605      	mov	r5, r0
 80040c6:	b911      	cbnz	r1, 80040ce <sbrk_aligned+0x12>
 80040c8:	f000 fcd6 	bl	8004a78 <_sbrk_r>
 80040cc:	6030      	str	r0, [r6, #0]
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 fcd1 	bl	8004a78 <_sbrk_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d00a      	beq.n	80040f0 <sbrk_aligned+0x34>
 80040da:	1cc4      	adds	r4, r0, #3
 80040dc:	f024 0403 	bic.w	r4, r4, #3
 80040e0:	42a0      	cmp	r0, r4
 80040e2:	d007      	beq.n	80040f4 <sbrk_aligned+0x38>
 80040e4:	1a21      	subs	r1, r4, r0
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fcc6 	bl	8004a78 <_sbrk_r>
 80040ec:	3001      	adds	r0, #1
 80040ee:	d101      	bne.n	80040f4 <sbrk_aligned+0x38>
 80040f0:	f04f 34ff 	mov.w	r4, #4294967295
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	20000c84 	.word	0x20000c84

080040fc <_malloc_r>:
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	1ccd      	adds	r5, r1, #3
 8004102:	f025 0503 	bic.w	r5, r5, #3
 8004106:	3508      	adds	r5, #8
 8004108:	2d0c      	cmp	r5, #12
 800410a:	bf38      	it	cc
 800410c:	250c      	movcc	r5, #12
 800410e:	2d00      	cmp	r5, #0
 8004110:	4607      	mov	r7, r0
 8004112:	db01      	blt.n	8004118 <_malloc_r+0x1c>
 8004114:	42a9      	cmp	r1, r5
 8004116:	d905      	bls.n	8004124 <_malloc_r+0x28>
 8004118:	230c      	movs	r3, #12
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	2600      	movs	r6, #0
 800411e:	4630      	mov	r0, r6
 8004120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004124:	4e2e      	ldr	r6, [pc, #184]	; (80041e0 <_malloc_r+0xe4>)
 8004126:	f000 ffb9 	bl	800509c <__malloc_lock>
 800412a:	6833      	ldr	r3, [r6, #0]
 800412c:	461c      	mov	r4, r3
 800412e:	bb34      	cbnz	r4, 800417e <_malloc_r+0x82>
 8004130:	4629      	mov	r1, r5
 8004132:	4638      	mov	r0, r7
 8004134:	f7ff ffc2 	bl	80040bc <sbrk_aligned>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	4604      	mov	r4, r0
 800413c:	d14d      	bne.n	80041da <_malloc_r+0xde>
 800413e:	6834      	ldr	r4, [r6, #0]
 8004140:	4626      	mov	r6, r4
 8004142:	2e00      	cmp	r6, #0
 8004144:	d140      	bne.n	80041c8 <_malloc_r+0xcc>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	4631      	mov	r1, r6
 800414a:	4638      	mov	r0, r7
 800414c:	eb04 0803 	add.w	r8, r4, r3
 8004150:	f000 fc92 	bl	8004a78 <_sbrk_r>
 8004154:	4580      	cmp	r8, r0
 8004156:	d13a      	bne.n	80041ce <_malloc_r+0xd2>
 8004158:	6821      	ldr	r1, [r4, #0]
 800415a:	3503      	adds	r5, #3
 800415c:	1a6d      	subs	r5, r5, r1
 800415e:	f025 0503 	bic.w	r5, r5, #3
 8004162:	3508      	adds	r5, #8
 8004164:	2d0c      	cmp	r5, #12
 8004166:	bf38      	it	cc
 8004168:	250c      	movcc	r5, #12
 800416a:	4629      	mov	r1, r5
 800416c:	4638      	mov	r0, r7
 800416e:	f7ff ffa5 	bl	80040bc <sbrk_aligned>
 8004172:	3001      	adds	r0, #1
 8004174:	d02b      	beq.n	80041ce <_malloc_r+0xd2>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	442b      	add	r3, r5
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	e00e      	b.n	800419c <_malloc_r+0xa0>
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	1b52      	subs	r2, r2, r5
 8004182:	d41e      	bmi.n	80041c2 <_malloc_r+0xc6>
 8004184:	2a0b      	cmp	r2, #11
 8004186:	d916      	bls.n	80041b6 <_malloc_r+0xba>
 8004188:	1961      	adds	r1, r4, r5
 800418a:	42a3      	cmp	r3, r4
 800418c:	6025      	str	r5, [r4, #0]
 800418e:	bf18      	it	ne
 8004190:	6059      	strne	r1, [r3, #4]
 8004192:	6863      	ldr	r3, [r4, #4]
 8004194:	bf08      	it	eq
 8004196:	6031      	streq	r1, [r6, #0]
 8004198:	5162      	str	r2, [r4, r5]
 800419a:	604b      	str	r3, [r1, #4]
 800419c:	4638      	mov	r0, r7
 800419e:	f104 060b 	add.w	r6, r4, #11
 80041a2:	f000 ff81 	bl	80050a8 <__malloc_unlock>
 80041a6:	f026 0607 	bic.w	r6, r6, #7
 80041aa:	1d23      	adds	r3, r4, #4
 80041ac:	1af2      	subs	r2, r6, r3
 80041ae:	d0b6      	beq.n	800411e <_malloc_r+0x22>
 80041b0:	1b9b      	subs	r3, r3, r6
 80041b2:	50a3      	str	r3, [r4, r2]
 80041b4:	e7b3      	b.n	800411e <_malloc_r+0x22>
 80041b6:	6862      	ldr	r2, [r4, #4]
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	bf0c      	ite	eq
 80041bc:	6032      	streq	r2, [r6, #0]
 80041be:	605a      	strne	r2, [r3, #4]
 80041c0:	e7ec      	b.n	800419c <_malloc_r+0xa0>
 80041c2:	4623      	mov	r3, r4
 80041c4:	6864      	ldr	r4, [r4, #4]
 80041c6:	e7b2      	b.n	800412e <_malloc_r+0x32>
 80041c8:	4634      	mov	r4, r6
 80041ca:	6876      	ldr	r6, [r6, #4]
 80041cc:	e7b9      	b.n	8004142 <_malloc_r+0x46>
 80041ce:	230c      	movs	r3, #12
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4638      	mov	r0, r7
 80041d4:	f000 ff68 	bl	80050a8 <__malloc_unlock>
 80041d8:	e7a1      	b.n	800411e <_malloc_r+0x22>
 80041da:	6025      	str	r5, [r4, #0]
 80041dc:	e7de      	b.n	800419c <_malloc_r+0xa0>
 80041de:	bf00      	nop
 80041e0:	20000c80 	.word	0x20000c80

080041e4 <__ssputs_r>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	688e      	ldr	r6, [r1, #8]
 80041ea:	429e      	cmp	r6, r3
 80041ec:	4682      	mov	sl, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	4690      	mov	r8, r2
 80041f2:	461f      	mov	r7, r3
 80041f4:	d838      	bhi.n	8004268 <__ssputs_r+0x84>
 80041f6:	898a      	ldrh	r2, [r1, #12]
 80041f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041fc:	d032      	beq.n	8004264 <__ssputs_r+0x80>
 80041fe:	6825      	ldr	r5, [r4, #0]
 8004200:	6909      	ldr	r1, [r1, #16]
 8004202:	eba5 0901 	sub.w	r9, r5, r1
 8004206:	6965      	ldr	r5, [r4, #20]
 8004208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800420c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004210:	3301      	adds	r3, #1
 8004212:	444b      	add	r3, r9
 8004214:	106d      	asrs	r5, r5, #1
 8004216:	429d      	cmp	r5, r3
 8004218:	bf38      	it	cc
 800421a:	461d      	movcc	r5, r3
 800421c:	0553      	lsls	r3, r2, #21
 800421e:	d531      	bpl.n	8004284 <__ssputs_r+0xa0>
 8004220:	4629      	mov	r1, r5
 8004222:	f7ff ff6b 	bl	80040fc <_malloc_r>
 8004226:	4606      	mov	r6, r0
 8004228:	b950      	cbnz	r0, 8004240 <__ssputs_r+0x5c>
 800422a:	230c      	movs	r3, #12
 800422c:	f8ca 3000 	str.w	r3, [sl]
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	6921      	ldr	r1, [r4, #16]
 8004242:	464a      	mov	r2, r9
 8004244:	f7ff fd66 	bl	8003d14 <memcpy>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	6126      	str	r6, [r4, #16]
 8004256:	6165      	str	r5, [r4, #20]
 8004258:	444e      	add	r6, r9
 800425a:	eba5 0509 	sub.w	r5, r5, r9
 800425e:	6026      	str	r6, [r4, #0]
 8004260:	60a5      	str	r5, [r4, #8]
 8004262:	463e      	mov	r6, r7
 8004264:	42be      	cmp	r6, r7
 8004266:	d900      	bls.n	800426a <__ssputs_r+0x86>
 8004268:	463e      	mov	r6, r7
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	4632      	mov	r2, r6
 800426e:	4641      	mov	r1, r8
 8004270:	f000 fefa 	bl	8005068 <memmove>
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	1b9b      	subs	r3, r3, r6
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	4433      	add	r3, r6
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	2000      	movs	r0, #0
 8004282:	e7db      	b.n	800423c <__ssputs_r+0x58>
 8004284:	462a      	mov	r2, r5
 8004286:	f000 ff15 	bl	80050b4 <_realloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	2800      	cmp	r0, #0
 800428e:	d1e1      	bne.n	8004254 <__ssputs_r+0x70>
 8004290:	6921      	ldr	r1, [r4, #16]
 8004292:	4650      	mov	r0, sl
 8004294:	f7ff fec6 	bl	8004024 <_free_r>
 8004298:	e7c7      	b.n	800422a <__ssputs_r+0x46>
	...

0800429c <_svfiprintf_r>:
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	4698      	mov	r8, r3
 80042a2:	898b      	ldrh	r3, [r1, #12]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	b09d      	sub	sp, #116	; 0x74
 80042a8:	4607      	mov	r7, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	4614      	mov	r4, r2
 80042ae:	d50e      	bpl.n	80042ce <_svfiprintf_r+0x32>
 80042b0:	690b      	ldr	r3, [r1, #16]
 80042b2:	b963      	cbnz	r3, 80042ce <_svfiprintf_r+0x32>
 80042b4:	2140      	movs	r1, #64	; 0x40
 80042b6:	f7ff ff21 	bl	80040fc <_malloc_r>
 80042ba:	6028      	str	r0, [r5, #0]
 80042bc:	6128      	str	r0, [r5, #16]
 80042be:	b920      	cbnz	r0, 80042ca <_svfiprintf_r+0x2e>
 80042c0:	230c      	movs	r3, #12
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	e0d1      	b.n	800446e <_svfiprintf_r+0x1d2>
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	616b      	str	r3, [r5, #20]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9309      	str	r3, [sp, #36]	; 0x24
 80042d2:	2320      	movs	r3, #32
 80042d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042dc:	2330      	movs	r3, #48	; 0x30
 80042de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004488 <_svfiprintf_r+0x1ec>
 80042e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e6:	f04f 0901 	mov.w	r9, #1
 80042ea:	4623      	mov	r3, r4
 80042ec:	469a      	mov	sl, r3
 80042ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f2:	b10a      	cbz	r2, 80042f8 <_svfiprintf_r+0x5c>
 80042f4:	2a25      	cmp	r2, #37	; 0x25
 80042f6:	d1f9      	bne.n	80042ec <_svfiprintf_r+0x50>
 80042f8:	ebba 0b04 	subs.w	fp, sl, r4
 80042fc:	d00b      	beq.n	8004316 <_svfiprintf_r+0x7a>
 80042fe:	465b      	mov	r3, fp
 8004300:	4622      	mov	r2, r4
 8004302:	4629      	mov	r1, r5
 8004304:	4638      	mov	r0, r7
 8004306:	f7ff ff6d 	bl	80041e4 <__ssputs_r>
 800430a:	3001      	adds	r0, #1
 800430c:	f000 80aa 	beq.w	8004464 <_svfiprintf_r+0x1c8>
 8004310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004312:	445a      	add	r2, fp
 8004314:	9209      	str	r2, [sp, #36]	; 0x24
 8004316:	f89a 3000 	ldrb.w	r3, [sl]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80a2 	beq.w	8004464 <_svfiprintf_r+0x1c8>
 8004320:	2300      	movs	r3, #0
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
 8004326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800432a:	f10a 0a01 	add.w	sl, sl, #1
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	9307      	str	r3, [sp, #28]
 8004332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004336:	931a      	str	r3, [sp, #104]	; 0x68
 8004338:	4654      	mov	r4, sl
 800433a:	2205      	movs	r2, #5
 800433c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004340:	4851      	ldr	r0, [pc, #324]	; (8004488 <_svfiprintf_r+0x1ec>)
 8004342:	f7fb ff55 	bl	80001f0 <memchr>
 8004346:	9a04      	ldr	r2, [sp, #16]
 8004348:	b9d8      	cbnz	r0, 8004382 <_svfiprintf_r+0xe6>
 800434a:	06d0      	lsls	r0, r2, #27
 800434c:	bf44      	itt	mi
 800434e:	2320      	movmi	r3, #32
 8004350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004354:	0711      	lsls	r1, r2, #28
 8004356:	bf44      	itt	mi
 8004358:	232b      	movmi	r3, #43	; 0x2b
 800435a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435e:	f89a 3000 	ldrb.w	r3, [sl]
 8004362:	2b2a      	cmp	r3, #42	; 0x2a
 8004364:	d015      	beq.n	8004392 <_svfiprintf_r+0xf6>
 8004366:	9a07      	ldr	r2, [sp, #28]
 8004368:	4654      	mov	r4, sl
 800436a:	2000      	movs	r0, #0
 800436c:	f04f 0c0a 	mov.w	ip, #10
 8004370:	4621      	mov	r1, r4
 8004372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004376:	3b30      	subs	r3, #48	; 0x30
 8004378:	2b09      	cmp	r3, #9
 800437a:	d94e      	bls.n	800441a <_svfiprintf_r+0x17e>
 800437c:	b1b0      	cbz	r0, 80043ac <_svfiprintf_r+0x110>
 800437e:	9207      	str	r2, [sp, #28]
 8004380:	e014      	b.n	80043ac <_svfiprintf_r+0x110>
 8004382:	eba0 0308 	sub.w	r3, r0, r8
 8004386:	fa09 f303 	lsl.w	r3, r9, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	9304      	str	r3, [sp, #16]
 800438e:	46a2      	mov	sl, r4
 8004390:	e7d2      	b.n	8004338 <_svfiprintf_r+0x9c>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	1d19      	adds	r1, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9103      	str	r1, [sp, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfbb      	ittet	lt
 800439e:	425b      	neglt	r3, r3
 80043a0:	f042 0202 	orrlt.w	r2, r2, #2
 80043a4:	9307      	strge	r3, [sp, #28]
 80043a6:	9307      	strlt	r3, [sp, #28]
 80043a8:	bfb8      	it	lt
 80043aa:	9204      	strlt	r2, [sp, #16]
 80043ac:	7823      	ldrb	r3, [r4, #0]
 80043ae:	2b2e      	cmp	r3, #46	; 0x2e
 80043b0:	d10c      	bne.n	80043cc <_svfiprintf_r+0x130>
 80043b2:	7863      	ldrb	r3, [r4, #1]
 80043b4:	2b2a      	cmp	r3, #42	; 0x2a
 80043b6:	d135      	bne.n	8004424 <_svfiprintf_r+0x188>
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	9203      	str	r2, [sp, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bfb8      	it	lt
 80043c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043c8:	3402      	adds	r4, #2
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004498 <_svfiprintf_r+0x1fc>
 80043d0:	7821      	ldrb	r1, [r4, #0]
 80043d2:	2203      	movs	r2, #3
 80043d4:	4650      	mov	r0, sl
 80043d6:	f7fb ff0b 	bl	80001f0 <memchr>
 80043da:	b140      	cbz	r0, 80043ee <_svfiprintf_r+0x152>
 80043dc:	2340      	movs	r3, #64	; 0x40
 80043de:	eba0 000a 	sub.w	r0, r0, sl
 80043e2:	fa03 f000 	lsl.w	r0, r3, r0
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	4303      	orrs	r3, r0
 80043ea:	3401      	adds	r4, #1
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f2:	4826      	ldr	r0, [pc, #152]	; (800448c <_svfiprintf_r+0x1f0>)
 80043f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043f8:	2206      	movs	r2, #6
 80043fa:	f7fb fef9 	bl	80001f0 <memchr>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d038      	beq.n	8004474 <_svfiprintf_r+0x1d8>
 8004402:	4b23      	ldr	r3, [pc, #140]	; (8004490 <_svfiprintf_r+0x1f4>)
 8004404:	bb1b      	cbnz	r3, 800444e <_svfiprintf_r+0x1b2>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	3307      	adds	r3, #7
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	3308      	adds	r3, #8
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	4433      	add	r3, r6
 8004416:	9309      	str	r3, [sp, #36]	; 0x24
 8004418:	e767      	b.n	80042ea <_svfiprintf_r+0x4e>
 800441a:	fb0c 3202 	mla	r2, ip, r2, r3
 800441e:	460c      	mov	r4, r1
 8004420:	2001      	movs	r0, #1
 8004422:	e7a5      	b.n	8004370 <_svfiprintf_r+0xd4>
 8004424:	2300      	movs	r3, #0
 8004426:	3401      	adds	r4, #1
 8004428:	9305      	str	r3, [sp, #20]
 800442a:	4619      	mov	r1, r3
 800442c:	f04f 0c0a 	mov.w	ip, #10
 8004430:	4620      	mov	r0, r4
 8004432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004436:	3a30      	subs	r2, #48	; 0x30
 8004438:	2a09      	cmp	r2, #9
 800443a:	d903      	bls.n	8004444 <_svfiprintf_r+0x1a8>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0c5      	beq.n	80043cc <_svfiprintf_r+0x130>
 8004440:	9105      	str	r1, [sp, #20]
 8004442:	e7c3      	b.n	80043cc <_svfiprintf_r+0x130>
 8004444:	fb0c 2101 	mla	r1, ip, r1, r2
 8004448:	4604      	mov	r4, r0
 800444a:	2301      	movs	r3, #1
 800444c:	e7f0      	b.n	8004430 <_svfiprintf_r+0x194>
 800444e:	ab03      	add	r3, sp, #12
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	462a      	mov	r2, r5
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <_svfiprintf_r+0x1f8>)
 8004456:	a904      	add	r1, sp, #16
 8004458:	4638      	mov	r0, r7
 800445a:	f3af 8000 	nop.w
 800445e:	1c42      	adds	r2, r0, #1
 8004460:	4606      	mov	r6, r0
 8004462:	d1d6      	bne.n	8004412 <_svfiprintf_r+0x176>
 8004464:	89ab      	ldrh	r3, [r5, #12]
 8004466:	065b      	lsls	r3, r3, #25
 8004468:	f53f af2c 	bmi.w	80042c4 <_svfiprintf_r+0x28>
 800446c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800446e:	b01d      	add	sp, #116	; 0x74
 8004470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004474:	ab03      	add	r3, sp, #12
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	462a      	mov	r2, r5
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <_svfiprintf_r+0x1f8>)
 800447c:	a904      	add	r1, sp, #16
 800447e:	4638      	mov	r0, r7
 8004480:	f000 f9d4 	bl	800482c <_printf_i>
 8004484:	e7eb      	b.n	800445e <_svfiprintf_r+0x1c2>
 8004486:	bf00      	nop
 8004488:	080055ed 	.word	0x080055ed
 800448c:	080055f7 	.word	0x080055f7
 8004490:	00000000 	.word	0x00000000
 8004494:	080041e5 	.word	0x080041e5
 8004498:	080055f3 	.word	0x080055f3

0800449c <__sfputc_r>:
 800449c:	6893      	ldr	r3, [r2, #8]
 800449e:	3b01      	subs	r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	b410      	push	{r4}
 80044a4:	6093      	str	r3, [r2, #8]
 80044a6:	da08      	bge.n	80044ba <__sfputc_r+0x1e>
 80044a8:	6994      	ldr	r4, [r2, #24]
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	db01      	blt.n	80044b2 <__sfputc_r+0x16>
 80044ae:	290a      	cmp	r1, #10
 80044b0:	d103      	bne.n	80044ba <__sfputc_r+0x1e>
 80044b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044b6:	f000 baef 	b.w	8004a98 <__swbuf_r>
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	1c58      	adds	r0, r3, #1
 80044be:	6010      	str	r0, [r2, #0]
 80044c0:	7019      	strb	r1, [r3, #0]
 80044c2:	4608      	mov	r0, r1
 80044c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <__sfputs_r>:
 80044ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044cc:	4606      	mov	r6, r0
 80044ce:	460f      	mov	r7, r1
 80044d0:	4614      	mov	r4, r2
 80044d2:	18d5      	adds	r5, r2, r3
 80044d4:	42ac      	cmp	r4, r5
 80044d6:	d101      	bne.n	80044dc <__sfputs_r+0x12>
 80044d8:	2000      	movs	r0, #0
 80044da:	e007      	b.n	80044ec <__sfputs_r+0x22>
 80044dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e0:	463a      	mov	r2, r7
 80044e2:	4630      	mov	r0, r6
 80044e4:	f7ff ffda 	bl	800449c <__sfputc_r>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d1f3      	bne.n	80044d4 <__sfputs_r+0xa>
 80044ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044f0 <_vfiprintf_r>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	460d      	mov	r5, r1
 80044f6:	b09d      	sub	sp, #116	; 0x74
 80044f8:	4614      	mov	r4, r2
 80044fa:	4698      	mov	r8, r3
 80044fc:	4606      	mov	r6, r0
 80044fe:	b118      	cbz	r0, 8004508 <_vfiprintf_r+0x18>
 8004500:	6983      	ldr	r3, [r0, #24]
 8004502:	b90b      	cbnz	r3, 8004508 <_vfiprintf_r+0x18>
 8004504:	f000 fcaa 	bl	8004e5c <__sinit>
 8004508:	4b89      	ldr	r3, [pc, #548]	; (8004730 <_vfiprintf_r+0x240>)
 800450a:	429d      	cmp	r5, r3
 800450c:	d11b      	bne.n	8004546 <_vfiprintf_r+0x56>
 800450e:	6875      	ldr	r5, [r6, #4]
 8004510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004512:	07d9      	lsls	r1, r3, #31
 8004514:	d405      	bmi.n	8004522 <_vfiprintf_r+0x32>
 8004516:	89ab      	ldrh	r3, [r5, #12]
 8004518:	059a      	lsls	r2, r3, #22
 800451a:	d402      	bmi.n	8004522 <_vfiprintf_r+0x32>
 800451c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800451e:	f000 fd3b 	bl	8004f98 <__retarget_lock_acquire_recursive>
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	d501      	bpl.n	800452c <_vfiprintf_r+0x3c>
 8004528:	692b      	ldr	r3, [r5, #16]
 800452a:	b9eb      	cbnz	r3, 8004568 <_vfiprintf_r+0x78>
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	f000 fb04 	bl	8004b3c <__swsetup_r>
 8004534:	b1c0      	cbz	r0, 8004568 <_vfiprintf_r+0x78>
 8004536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004538:	07dc      	lsls	r4, r3, #31
 800453a:	d50e      	bpl.n	800455a <_vfiprintf_r+0x6a>
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	b01d      	add	sp, #116	; 0x74
 8004542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004546:	4b7b      	ldr	r3, [pc, #492]	; (8004734 <_vfiprintf_r+0x244>)
 8004548:	429d      	cmp	r5, r3
 800454a:	d101      	bne.n	8004550 <_vfiprintf_r+0x60>
 800454c:	68b5      	ldr	r5, [r6, #8]
 800454e:	e7df      	b.n	8004510 <_vfiprintf_r+0x20>
 8004550:	4b79      	ldr	r3, [pc, #484]	; (8004738 <_vfiprintf_r+0x248>)
 8004552:	429d      	cmp	r5, r3
 8004554:	bf08      	it	eq
 8004556:	68f5      	ldreq	r5, [r6, #12]
 8004558:	e7da      	b.n	8004510 <_vfiprintf_r+0x20>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	0598      	lsls	r0, r3, #22
 800455e:	d4ed      	bmi.n	800453c <_vfiprintf_r+0x4c>
 8004560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004562:	f000 fd1a 	bl	8004f9a <__retarget_lock_release_recursive>
 8004566:	e7e9      	b.n	800453c <_vfiprintf_r+0x4c>
 8004568:	2300      	movs	r3, #0
 800456a:	9309      	str	r3, [sp, #36]	; 0x24
 800456c:	2320      	movs	r3, #32
 800456e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004572:	f8cd 800c 	str.w	r8, [sp, #12]
 8004576:	2330      	movs	r3, #48	; 0x30
 8004578:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800473c <_vfiprintf_r+0x24c>
 800457c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004580:	f04f 0901 	mov.w	r9, #1
 8004584:	4623      	mov	r3, r4
 8004586:	469a      	mov	sl, r3
 8004588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800458c:	b10a      	cbz	r2, 8004592 <_vfiprintf_r+0xa2>
 800458e:	2a25      	cmp	r2, #37	; 0x25
 8004590:	d1f9      	bne.n	8004586 <_vfiprintf_r+0x96>
 8004592:	ebba 0b04 	subs.w	fp, sl, r4
 8004596:	d00b      	beq.n	80045b0 <_vfiprintf_r+0xc0>
 8004598:	465b      	mov	r3, fp
 800459a:	4622      	mov	r2, r4
 800459c:	4629      	mov	r1, r5
 800459e:	4630      	mov	r0, r6
 80045a0:	f7ff ff93 	bl	80044ca <__sfputs_r>
 80045a4:	3001      	adds	r0, #1
 80045a6:	f000 80aa 	beq.w	80046fe <_vfiprintf_r+0x20e>
 80045aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ac:	445a      	add	r2, fp
 80045ae:	9209      	str	r2, [sp, #36]	; 0x24
 80045b0:	f89a 3000 	ldrb.w	r3, [sl]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80a2 	beq.w	80046fe <_vfiprintf_r+0x20e>
 80045ba:	2300      	movs	r3, #0
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c4:	f10a 0a01 	add.w	sl, sl, #1
 80045c8:	9304      	str	r3, [sp, #16]
 80045ca:	9307      	str	r3, [sp, #28]
 80045cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045d0:	931a      	str	r3, [sp, #104]	; 0x68
 80045d2:	4654      	mov	r4, sl
 80045d4:	2205      	movs	r2, #5
 80045d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045da:	4858      	ldr	r0, [pc, #352]	; (800473c <_vfiprintf_r+0x24c>)
 80045dc:	f7fb fe08 	bl	80001f0 <memchr>
 80045e0:	9a04      	ldr	r2, [sp, #16]
 80045e2:	b9d8      	cbnz	r0, 800461c <_vfiprintf_r+0x12c>
 80045e4:	06d1      	lsls	r1, r2, #27
 80045e6:	bf44      	itt	mi
 80045e8:	2320      	movmi	r3, #32
 80045ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ee:	0713      	lsls	r3, r2, #28
 80045f0:	bf44      	itt	mi
 80045f2:	232b      	movmi	r3, #43	; 0x2b
 80045f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f8:	f89a 3000 	ldrb.w	r3, [sl]
 80045fc:	2b2a      	cmp	r3, #42	; 0x2a
 80045fe:	d015      	beq.n	800462c <_vfiprintf_r+0x13c>
 8004600:	9a07      	ldr	r2, [sp, #28]
 8004602:	4654      	mov	r4, sl
 8004604:	2000      	movs	r0, #0
 8004606:	f04f 0c0a 	mov.w	ip, #10
 800460a:	4621      	mov	r1, r4
 800460c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004610:	3b30      	subs	r3, #48	; 0x30
 8004612:	2b09      	cmp	r3, #9
 8004614:	d94e      	bls.n	80046b4 <_vfiprintf_r+0x1c4>
 8004616:	b1b0      	cbz	r0, 8004646 <_vfiprintf_r+0x156>
 8004618:	9207      	str	r2, [sp, #28]
 800461a:	e014      	b.n	8004646 <_vfiprintf_r+0x156>
 800461c:	eba0 0308 	sub.w	r3, r0, r8
 8004620:	fa09 f303 	lsl.w	r3, r9, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	46a2      	mov	sl, r4
 800462a:	e7d2      	b.n	80045d2 <_vfiprintf_r+0xe2>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	1d19      	adds	r1, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	9103      	str	r1, [sp, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	bfbb      	ittet	lt
 8004638:	425b      	neglt	r3, r3
 800463a:	f042 0202 	orrlt.w	r2, r2, #2
 800463e:	9307      	strge	r3, [sp, #28]
 8004640:	9307      	strlt	r3, [sp, #28]
 8004642:	bfb8      	it	lt
 8004644:	9204      	strlt	r2, [sp, #16]
 8004646:	7823      	ldrb	r3, [r4, #0]
 8004648:	2b2e      	cmp	r3, #46	; 0x2e
 800464a:	d10c      	bne.n	8004666 <_vfiprintf_r+0x176>
 800464c:	7863      	ldrb	r3, [r4, #1]
 800464e:	2b2a      	cmp	r3, #42	; 0x2a
 8004650:	d135      	bne.n	80046be <_vfiprintf_r+0x1ce>
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	9203      	str	r2, [sp, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfb8      	it	lt
 800465e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004662:	3402      	adds	r4, #2
 8004664:	9305      	str	r3, [sp, #20]
 8004666:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800474c <_vfiprintf_r+0x25c>
 800466a:	7821      	ldrb	r1, [r4, #0]
 800466c:	2203      	movs	r2, #3
 800466e:	4650      	mov	r0, sl
 8004670:	f7fb fdbe 	bl	80001f0 <memchr>
 8004674:	b140      	cbz	r0, 8004688 <_vfiprintf_r+0x198>
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	eba0 000a 	sub.w	r0, r0, sl
 800467c:	fa03 f000 	lsl.w	r0, r3, r0
 8004680:	9b04      	ldr	r3, [sp, #16]
 8004682:	4303      	orrs	r3, r0
 8004684:	3401      	adds	r4, #1
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	482c      	ldr	r0, [pc, #176]	; (8004740 <_vfiprintf_r+0x250>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004692:	2206      	movs	r2, #6
 8004694:	f7fb fdac 	bl	80001f0 <memchr>
 8004698:	2800      	cmp	r0, #0
 800469a:	d03f      	beq.n	800471c <_vfiprintf_r+0x22c>
 800469c:	4b29      	ldr	r3, [pc, #164]	; (8004744 <_vfiprintf_r+0x254>)
 800469e:	bb1b      	cbnz	r3, 80046e8 <_vfiprintf_r+0x1f8>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	3307      	adds	r3, #7
 80046a4:	f023 0307 	bic.w	r3, r3, #7
 80046a8:	3308      	adds	r3, #8
 80046aa:	9303      	str	r3, [sp, #12]
 80046ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ae:	443b      	add	r3, r7
 80046b0:	9309      	str	r3, [sp, #36]	; 0x24
 80046b2:	e767      	b.n	8004584 <_vfiprintf_r+0x94>
 80046b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b8:	460c      	mov	r4, r1
 80046ba:	2001      	movs	r0, #1
 80046bc:	e7a5      	b.n	800460a <_vfiprintf_r+0x11a>
 80046be:	2300      	movs	r3, #0
 80046c0:	3401      	adds	r4, #1
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	4619      	mov	r1, r3
 80046c6:	f04f 0c0a 	mov.w	ip, #10
 80046ca:	4620      	mov	r0, r4
 80046cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d0:	3a30      	subs	r2, #48	; 0x30
 80046d2:	2a09      	cmp	r2, #9
 80046d4:	d903      	bls.n	80046de <_vfiprintf_r+0x1ee>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0c5      	beq.n	8004666 <_vfiprintf_r+0x176>
 80046da:	9105      	str	r1, [sp, #20]
 80046dc:	e7c3      	b.n	8004666 <_vfiprintf_r+0x176>
 80046de:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e2:	4604      	mov	r4, r0
 80046e4:	2301      	movs	r3, #1
 80046e6:	e7f0      	b.n	80046ca <_vfiprintf_r+0x1da>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4b16      	ldr	r3, [pc, #88]	; (8004748 <_vfiprintf_r+0x258>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4630      	mov	r0, r6
 80046f4:	f3af 8000 	nop.w
 80046f8:	4607      	mov	r7, r0
 80046fa:	1c78      	adds	r0, r7, #1
 80046fc:	d1d6      	bne.n	80046ac <_vfiprintf_r+0x1bc>
 80046fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004700:	07d9      	lsls	r1, r3, #31
 8004702:	d405      	bmi.n	8004710 <_vfiprintf_r+0x220>
 8004704:	89ab      	ldrh	r3, [r5, #12]
 8004706:	059a      	lsls	r2, r3, #22
 8004708:	d402      	bmi.n	8004710 <_vfiprintf_r+0x220>
 800470a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800470c:	f000 fc45 	bl	8004f9a <__retarget_lock_release_recursive>
 8004710:	89ab      	ldrh	r3, [r5, #12]
 8004712:	065b      	lsls	r3, r3, #25
 8004714:	f53f af12 	bmi.w	800453c <_vfiprintf_r+0x4c>
 8004718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800471a:	e711      	b.n	8004540 <_vfiprintf_r+0x50>
 800471c:	ab03      	add	r3, sp, #12
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	462a      	mov	r2, r5
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <_vfiprintf_r+0x258>)
 8004724:	a904      	add	r1, sp, #16
 8004726:	4630      	mov	r0, r6
 8004728:	f000 f880 	bl	800482c <_printf_i>
 800472c:	e7e4      	b.n	80046f8 <_vfiprintf_r+0x208>
 800472e:	bf00      	nop
 8004730:	08005640 	.word	0x08005640
 8004734:	08005660 	.word	0x08005660
 8004738:	08005620 	.word	0x08005620
 800473c:	080055ed 	.word	0x080055ed
 8004740:	080055f7 	.word	0x080055f7
 8004744:	00000000 	.word	0x00000000
 8004748:	080044cb 	.word	0x080044cb
 800474c:	080055f3 	.word	0x080055f3

08004750 <_printf_common>:
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	4616      	mov	r6, r2
 8004756:	4699      	mov	r9, r3
 8004758:	688a      	ldr	r2, [r1, #8]
 800475a:	690b      	ldr	r3, [r1, #16]
 800475c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004760:	4293      	cmp	r3, r2
 8004762:	bfb8      	it	lt
 8004764:	4613      	movlt	r3, r2
 8004766:	6033      	str	r3, [r6, #0]
 8004768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800476c:	4607      	mov	r7, r0
 800476e:	460c      	mov	r4, r1
 8004770:	b10a      	cbz	r2, 8004776 <_printf_common+0x26>
 8004772:	3301      	adds	r3, #1
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	0699      	lsls	r1, r3, #26
 800477a:	bf42      	ittt	mi
 800477c:	6833      	ldrmi	r3, [r6, #0]
 800477e:	3302      	addmi	r3, #2
 8004780:	6033      	strmi	r3, [r6, #0]
 8004782:	6825      	ldr	r5, [r4, #0]
 8004784:	f015 0506 	ands.w	r5, r5, #6
 8004788:	d106      	bne.n	8004798 <_printf_common+0x48>
 800478a:	f104 0a19 	add.w	sl, r4, #25
 800478e:	68e3      	ldr	r3, [r4, #12]
 8004790:	6832      	ldr	r2, [r6, #0]
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	42ab      	cmp	r3, r5
 8004796:	dc26      	bgt.n	80047e6 <_printf_common+0x96>
 8004798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800479c:	1e13      	subs	r3, r2, #0
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	bf18      	it	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	0692      	lsls	r2, r2, #26
 80047a6:	d42b      	bmi.n	8004800 <_printf_common+0xb0>
 80047a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ac:	4649      	mov	r1, r9
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	3001      	adds	r0, #1
 80047b4:	d01e      	beq.n	80047f4 <_printf_common+0xa4>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	68e5      	ldr	r5, [r4, #12]
 80047ba:	6832      	ldr	r2, [r6, #0]
 80047bc:	f003 0306 	and.w	r3, r3, #6
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	bf08      	it	eq
 80047c4:	1aad      	subeq	r5, r5, r2
 80047c6:	68a3      	ldr	r3, [r4, #8]
 80047c8:	6922      	ldr	r2, [r4, #16]
 80047ca:	bf0c      	ite	eq
 80047cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d0:	2500      	movne	r5, #0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	bfc4      	itt	gt
 80047d6:	1a9b      	subgt	r3, r3, r2
 80047d8:	18ed      	addgt	r5, r5, r3
 80047da:	2600      	movs	r6, #0
 80047dc:	341a      	adds	r4, #26
 80047de:	42b5      	cmp	r5, r6
 80047e0:	d11a      	bne.n	8004818 <_printf_common+0xc8>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e008      	b.n	80047f8 <_printf_common+0xa8>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4652      	mov	r2, sl
 80047ea:	4649      	mov	r1, r9
 80047ec:	4638      	mov	r0, r7
 80047ee:	47c0      	blx	r8
 80047f0:	3001      	adds	r0, #1
 80047f2:	d103      	bne.n	80047fc <_printf_common+0xac>
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	3501      	adds	r5, #1
 80047fe:	e7c6      	b.n	800478e <_printf_common+0x3e>
 8004800:	18e1      	adds	r1, r4, r3
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	2030      	movs	r0, #48	; 0x30
 8004806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480a:	4422      	add	r2, r4
 800480c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004814:	3302      	adds	r3, #2
 8004816:	e7c7      	b.n	80047a8 <_printf_common+0x58>
 8004818:	2301      	movs	r3, #1
 800481a:	4622      	mov	r2, r4
 800481c:	4649      	mov	r1, r9
 800481e:	4638      	mov	r0, r7
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d0e6      	beq.n	80047f4 <_printf_common+0xa4>
 8004826:	3601      	adds	r6, #1
 8004828:	e7d9      	b.n	80047de <_printf_common+0x8e>
	...

0800482c <_printf_i>:
 800482c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	7e0f      	ldrb	r7, [r1, #24]
 8004832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004834:	2f78      	cmp	r7, #120	; 0x78
 8004836:	4691      	mov	r9, r2
 8004838:	4680      	mov	r8, r0
 800483a:	460c      	mov	r4, r1
 800483c:	469a      	mov	sl, r3
 800483e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004842:	d807      	bhi.n	8004854 <_printf_i+0x28>
 8004844:	2f62      	cmp	r7, #98	; 0x62
 8004846:	d80a      	bhi.n	800485e <_printf_i+0x32>
 8004848:	2f00      	cmp	r7, #0
 800484a:	f000 80d8 	beq.w	80049fe <_printf_i+0x1d2>
 800484e:	2f58      	cmp	r7, #88	; 0x58
 8004850:	f000 80a3 	beq.w	800499a <_printf_i+0x16e>
 8004854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800485c:	e03a      	b.n	80048d4 <_printf_i+0xa8>
 800485e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004862:	2b15      	cmp	r3, #21
 8004864:	d8f6      	bhi.n	8004854 <_printf_i+0x28>
 8004866:	a101      	add	r1, pc, #4	; (adr r1, 800486c <_printf_i+0x40>)
 8004868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800486c:	080048c5 	.word	0x080048c5
 8004870:	080048d9 	.word	0x080048d9
 8004874:	08004855 	.word	0x08004855
 8004878:	08004855 	.word	0x08004855
 800487c:	08004855 	.word	0x08004855
 8004880:	08004855 	.word	0x08004855
 8004884:	080048d9 	.word	0x080048d9
 8004888:	08004855 	.word	0x08004855
 800488c:	08004855 	.word	0x08004855
 8004890:	08004855 	.word	0x08004855
 8004894:	08004855 	.word	0x08004855
 8004898:	080049e5 	.word	0x080049e5
 800489c:	08004909 	.word	0x08004909
 80048a0:	080049c7 	.word	0x080049c7
 80048a4:	08004855 	.word	0x08004855
 80048a8:	08004855 	.word	0x08004855
 80048ac:	08004a07 	.word	0x08004a07
 80048b0:	08004855 	.word	0x08004855
 80048b4:	08004909 	.word	0x08004909
 80048b8:	08004855 	.word	0x08004855
 80048bc:	08004855 	.word	0x08004855
 80048c0:	080049cf 	.word	0x080049cf
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	1d1a      	adds	r2, r3, #4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	602a      	str	r2, [r5, #0]
 80048cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0a3      	b.n	8004a20 <_printf_i+0x1f4>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	6829      	ldr	r1, [r5, #0]
 80048dc:	0606      	lsls	r6, r0, #24
 80048de:	f101 0304 	add.w	r3, r1, #4
 80048e2:	d50a      	bpl.n	80048fa <_printf_i+0xce>
 80048e4:	680e      	ldr	r6, [r1, #0]
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	da03      	bge.n	80048f4 <_printf_i+0xc8>
 80048ec:	232d      	movs	r3, #45	; 0x2d
 80048ee:	4276      	negs	r6, r6
 80048f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f4:	485e      	ldr	r0, [pc, #376]	; (8004a70 <_printf_i+0x244>)
 80048f6:	230a      	movs	r3, #10
 80048f8:	e019      	b.n	800492e <_printf_i+0x102>
 80048fa:	680e      	ldr	r6, [r1, #0]
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004902:	bf18      	it	ne
 8004904:	b236      	sxthne	r6, r6
 8004906:	e7ef      	b.n	80048e8 <_printf_i+0xbc>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	6029      	str	r1, [r5, #0]
 8004910:	0601      	lsls	r1, r0, #24
 8004912:	d501      	bpl.n	8004918 <_printf_i+0xec>
 8004914:	681e      	ldr	r6, [r3, #0]
 8004916:	e002      	b.n	800491e <_printf_i+0xf2>
 8004918:	0646      	lsls	r6, r0, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0xe8>
 800491c:	881e      	ldrh	r6, [r3, #0]
 800491e:	4854      	ldr	r0, [pc, #336]	; (8004a70 <_printf_i+0x244>)
 8004920:	2f6f      	cmp	r7, #111	; 0x6f
 8004922:	bf0c      	ite	eq
 8004924:	2308      	moveq	r3, #8
 8004926:	230a      	movne	r3, #10
 8004928:	2100      	movs	r1, #0
 800492a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800492e:	6865      	ldr	r5, [r4, #4]
 8004930:	60a5      	str	r5, [r4, #8]
 8004932:	2d00      	cmp	r5, #0
 8004934:	bfa2      	ittt	ge
 8004936:	6821      	ldrge	r1, [r4, #0]
 8004938:	f021 0104 	bicge.w	r1, r1, #4
 800493c:	6021      	strge	r1, [r4, #0]
 800493e:	b90e      	cbnz	r6, 8004944 <_printf_i+0x118>
 8004940:	2d00      	cmp	r5, #0
 8004942:	d04d      	beq.n	80049e0 <_printf_i+0x1b4>
 8004944:	4615      	mov	r5, r2
 8004946:	fbb6 f1f3 	udiv	r1, r6, r3
 800494a:	fb03 6711 	mls	r7, r3, r1, r6
 800494e:	5dc7      	ldrb	r7, [r0, r7]
 8004950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004954:	4637      	mov	r7, r6
 8004956:	42bb      	cmp	r3, r7
 8004958:	460e      	mov	r6, r1
 800495a:	d9f4      	bls.n	8004946 <_printf_i+0x11a>
 800495c:	2b08      	cmp	r3, #8
 800495e:	d10b      	bne.n	8004978 <_printf_i+0x14c>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	07de      	lsls	r6, r3, #31
 8004964:	d508      	bpl.n	8004978 <_printf_i+0x14c>
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	6861      	ldr	r1, [r4, #4]
 800496a:	4299      	cmp	r1, r3
 800496c:	bfde      	ittt	le
 800496e:	2330      	movle	r3, #48	; 0x30
 8004970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004978:	1b52      	subs	r2, r2, r5
 800497a:	6122      	str	r2, [r4, #16]
 800497c:	f8cd a000 	str.w	sl, [sp]
 8004980:	464b      	mov	r3, r9
 8004982:	aa03      	add	r2, sp, #12
 8004984:	4621      	mov	r1, r4
 8004986:	4640      	mov	r0, r8
 8004988:	f7ff fee2 	bl	8004750 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	d14c      	bne.n	8004a2a <_printf_i+0x1fe>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	b004      	add	sp, #16
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	4835      	ldr	r0, [pc, #212]	; (8004a70 <_printf_i+0x244>)
 800499c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049a0:	6829      	ldr	r1, [r5, #0]
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80049a8:	6029      	str	r1, [r5, #0]
 80049aa:	061d      	lsls	r5, r3, #24
 80049ac:	d514      	bpl.n	80049d8 <_printf_i+0x1ac>
 80049ae:	07df      	lsls	r7, r3, #31
 80049b0:	bf44      	itt	mi
 80049b2:	f043 0320 	orrmi.w	r3, r3, #32
 80049b6:	6023      	strmi	r3, [r4, #0]
 80049b8:	b91e      	cbnz	r6, 80049c2 <_printf_i+0x196>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f023 0320 	bic.w	r3, r3, #32
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	2310      	movs	r3, #16
 80049c4:	e7b0      	b.n	8004928 <_printf_i+0xfc>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f043 0320 	orr.w	r3, r3, #32
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	2378      	movs	r3, #120	; 0x78
 80049d0:	4828      	ldr	r0, [pc, #160]	; (8004a74 <_printf_i+0x248>)
 80049d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049d6:	e7e3      	b.n	80049a0 <_printf_i+0x174>
 80049d8:	0659      	lsls	r1, r3, #25
 80049da:	bf48      	it	mi
 80049dc:	b2b6      	uxthmi	r6, r6
 80049de:	e7e6      	b.n	80049ae <_printf_i+0x182>
 80049e0:	4615      	mov	r5, r2
 80049e2:	e7bb      	b.n	800495c <_printf_i+0x130>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	6826      	ldr	r6, [r4, #0]
 80049e8:	6961      	ldr	r1, [r4, #20]
 80049ea:	1d18      	adds	r0, r3, #4
 80049ec:	6028      	str	r0, [r5, #0]
 80049ee:	0635      	lsls	r5, r6, #24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0x1cc>
 80049f4:	6019      	str	r1, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0x1d2>
 80049f8:	0670      	lsls	r0, r6, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0x1c8>
 80049fc:	8019      	strh	r1, [r3, #0]
 80049fe:	2300      	movs	r3, #0
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	4615      	mov	r5, r2
 8004a04:	e7ba      	b.n	800497c <_printf_i+0x150>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	602a      	str	r2, [r5, #0]
 8004a0c:	681d      	ldr	r5, [r3, #0]
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	2100      	movs	r1, #0
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fb fbec 	bl	80001f0 <memchr>
 8004a18:	b108      	cbz	r0, 8004a1e <_printf_i+0x1f2>
 8004a1a:	1b40      	subs	r0, r0, r5
 8004a1c:	6060      	str	r0, [r4, #4]
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	2300      	movs	r3, #0
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a28:	e7a8      	b.n	800497c <_printf_i+0x150>
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4640      	mov	r0, r8
 8004a32:	47d0      	blx	sl
 8004a34:	3001      	adds	r0, #1
 8004a36:	d0ab      	beq.n	8004990 <_printf_i+0x164>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	079b      	lsls	r3, r3, #30
 8004a3c:	d413      	bmi.n	8004a66 <_printf_i+0x23a>
 8004a3e:	68e0      	ldr	r0, [r4, #12]
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	4298      	cmp	r0, r3
 8004a44:	bfb8      	it	lt
 8004a46:	4618      	movlt	r0, r3
 8004a48:	e7a4      	b.n	8004994 <_printf_i+0x168>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	47d0      	blx	sl
 8004a54:	3001      	adds	r0, #1
 8004a56:	d09b      	beq.n	8004990 <_printf_i+0x164>
 8004a58:	3501      	adds	r5, #1
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	9903      	ldr	r1, [sp, #12]
 8004a5e:	1a5b      	subs	r3, r3, r1
 8004a60:	42ab      	cmp	r3, r5
 8004a62:	dcf2      	bgt.n	8004a4a <_printf_i+0x21e>
 8004a64:	e7eb      	b.n	8004a3e <_printf_i+0x212>
 8004a66:	2500      	movs	r5, #0
 8004a68:	f104 0619 	add.w	r6, r4, #25
 8004a6c:	e7f5      	b.n	8004a5a <_printf_i+0x22e>
 8004a6e:	bf00      	nop
 8004a70:	080055fe 	.word	0x080055fe
 8004a74:	0800560f 	.word	0x0800560f

08004a78 <_sbrk_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_sbrk_r+0x1c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f7fc f938 	bl	8000cf8 <_sbrk>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_sbrk_r+0x1a>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_sbrk_r+0x1a>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000c8c 	.word	0x20000c8c

08004a98 <__swbuf_r>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	460e      	mov	r6, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	b118      	cbz	r0, 8004aaa <__swbuf_r+0x12>
 8004aa2:	6983      	ldr	r3, [r0, #24]
 8004aa4:	b90b      	cbnz	r3, 8004aaa <__swbuf_r+0x12>
 8004aa6:	f000 f9d9 	bl	8004e5c <__sinit>
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <__swbuf_r+0x98>)
 8004aac:	429c      	cmp	r4, r3
 8004aae:	d12b      	bne.n	8004b08 <__swbuf_r+0x70>
 8004ab0:	686c      	ldr	r4, [r5, #4]
 8004ab2:	69a3      	ldr	r3, [r4, #24]
 8004ab4:	60a3      	str	r3, [r4, #8]
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	071a      	lsls	r2, r3, #28
 8004aba:	d52f      	bpl.n	8004b1c <__swbuf_r+0x84>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	b36b      	cbz	r3, 8004b1c <__swbuf_r+0x84>
 8004ac0:	6923      	ldr	r3, [r4, #16]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1ac0      	subs	r0, r0, r3
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	b2f6      	uxtb	r6, r6
 8004aca:	4283      	cmp	r3, r0
 8004acc:	4637      	mov	r7, r6
 8004ace:	dc04      	bgt.n	8004ada <__swbuf_r+0x42>
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 f92e 	bl	8004d34 <_fflush_r>
 8004ad8:	bb30      	cbnz	r0, 8004b28 <__swbuf_r+0x90>
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60a3      	str	r3, [r4, #8]
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	701e      	strb	r6, [r3, #0]
 8004ae8:	6963      	ldr	r3, [r4, #20]
 8004aea:	3001      	adds	r0, #1
 8004aec:	4283      	cmp	r3, r0
 8004aee:	d004      	beq.n	8004afa <__swbuf_r+0x62>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	07db      	lsls	r3, r3, #31
 8004af4:	d506      	bpl.n	8004b04 <__swbuf_r+0x6c>
 8004af6:	2e0a      	cmp	r6, #10
 8004af8:	d104      	bne.n	8004b04 <__swbuf_r+0x6c>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f919 	bl	8004d34 <_fflush_r>
 8004b02:	b988      	cbnz	r0, 8004b28 <__swbuf_r+0x90>
 8004b04:	4638      	mov	r0, r7
 8004b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <__swbuf_r+0x9c>)
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d101      	bne.n	8004b12 <__swbuf_r+0x7a>
 8004b0e:	68ac      	ldr	r4, [r5, #8]
 8004b10:	e7cf      	b.n	8004ab2 <__swbuf_r+0x1a>
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <__swbuf_r+0xa0>)
 8004b14:	429c      	cmp	r4, r3
 8004b16:	bf08      	it	eq
 8004b18:	68ec      	ldreq	r4, [r5, #12]
 8004b1a:	e7ca      	b.n	8004ab2 <__swbuf_r+0x1a>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 f80c 	bl	8004b3c <__swsetup_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d0cb      	beq.n	8004ac0 <__swbuf_r+0x28>
 8004b28:	f04f 37ff 	mov.w	r7, #4294967295
 8004b2c:	e7ea      	b.n	8004b04 <__swbuf_r+0x6c>
 8004b2e:	bf00      	nop
 8004b30:	08005640 	.word	0x08005640
 8004b34:	08005660 	.word	0x08005660
 8004b38:	08005620 	.word	0x08005620

08004b3c <__swsetup_r>:
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <__swsetup_r+0xcc>)
 8004b3e:	b570      	push	{r4, r5, r6, lr}
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	4606      	mov	r6, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	b125      	cbz	r5, 8004b52 <__swsetup_r+0x16>
 8004b48:	69ab      	ldr	r3, [r5, #24]
 8004b4a:	b913      	cbnz	r3, 8004b52 <__swsetup_r+0x16>
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 f985 	bl	8004e5c <__sinit>
 8004b52:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <__swsetup_r+0xd0>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	d10f      	bne.n	8004b78 <__swsetup_r+0x3c>
 8004b58:	686c      	ldr	r4, [r5, #4]
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b60:	0719      	lsls	r1, r3, #28
 8004b62:	d42c      	bmi.n	8004bbe <__swsetup_r+0x82>
 8004b64:	06dd      	lsls	r5, r3, #27
 8004b66:	d411      	bmi.n	8004b8c <__swsetup_r+0x50>
 8004b68:	2309      	movs	r3, #9
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	e03e      	b.n	8004bf6 <__swsetup_r+0xba>
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <__swsetup_r+0xd4>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <__swsetup_r+0x46>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7eb      	b.n	8004b5a <__swsetup_r+0x1e>
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <__swsetup_r+0xd8>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7e6      	b.n	8004b5a <__swsetup_r+0x1e>
 8004b8c:	0758      	lsls	r0, r3, #29
 8004b8e:	d512      	bpl.n	8004bb6 <__swsetup_r+0x7a>
 8004b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b92:	b141      	cbz	r1, 8004ba6 <__swsetup_r+0x6a>
 8004b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	d002      	beq.n	8004ba2 <__swsetup_r+0x66>
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f7ff fa41 	bl	8004024 <_free_r>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bac:	81a3      	strh	r3, [r4, #12]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	6923      	ldr	r3, [r4, #16]
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f043 0308 	orr.w	r3, r3, #8
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	b94b      	cbnz	r3, 8004bd6 <__swsetup_r+0x9a>
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bcc:	d003      	beq.n	8004bd6 <__swsetup_r+0x9a>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 fa09 	bl	8004fe8 <__smakebuf_r>
 8004bd6:	89a0      	ldrh	r0, [r4, #12]
 8004bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bdc:	f010 0301 	ands.w	r3, r0, #1
 8004be0:	d00a      	beq.n	8004bf8 <__swsetup_r+0xbc>
 8004be2:	2300      	movs	r3, #0
 8004be4:	60a3      	str	r3, [r4, #8]
 8004be6:	6963      	ldr	r3, [r4, #20]
 8004be8:	425b      	negs	r3, r3
 8004bea:	61a3      	str	r3, [r4, #24]
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	b943      	cbnz	r3, 8004c02 <__swsetup_r+0xc6>
 8004bf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bf4:	d1ba      	bne.n	8004b6c <__swsetup_r+0x30>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	0781      	lsls	r1, r0, #30
 8004bfa:	bf58      	it	pl
 8004bfc:	6963      	ldrpl	r3, [r4, #20]
 8004bfe:	60a3      	str	r3, [r4, #8]
 8004c00:	e7f4      	b.n	8004bec <__swsetup_r+0xb0>
 8004c02:	2000      	movs	r0, #0
 8004c04:	e7f7      	b.n	8004bf6 <__swsetup_r+0xba>
 8004c06:	bf00      	nop
 8004c08:	20000228 	.word	0x20000228
 8004c0c:	08005640 	.word	0x08005640
 8004c10:	08005660 	.word	0x08005660
 8004c14:	08005620 	.word	0x08005620

08004c18 <abort>:
 8004c18:	b508      	push	{r3, lr}
 8004c1a:	2006      	movs	r0, #6
 8004c1c:	f000 faa2 	bl	8005164 <raise>
 8004c20:	2001      	movs	r0, #1
 8004c22:	f7fb fff1 	bl	8000c08 <_exit>
	...

08004c28 <__sflush_r>:
 8004c28:	898a      	ldrh	r2, [r1, #12]
 8004c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	4605      	mov	r5, r0
 8004c30:	0710      	lsls	r0, r2, #28
 8004c32:	460c      	mov	r4, r1
 8004c34:	d458      	bmi.n	8004ce8 <__sflush_r+0xc0>
 8004c36:	684b      	ldr	r3, [r1, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dc05      	bgt.n	8004c48 <__sflush_r+0x20>
 8004c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dc02      	bgt.n	8004c48 <__sflush_r+0x20>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d0f9      	beq.n	8004c42 <__sflush_r+0x1a>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c54:	682f      	ldr	r7, [r5, #0]
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	d032      	beq.n	8004cc0 <__sflush_r+0x98>
 8004c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	075a      	lsls	r2, r3, #29
 8004c60:	d505      	bpl.n	8004c6e <__sflush_r+0x46>
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	1ac0      	subs	r0, r0, r3
 8004c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c68:	b10b      	cbz	r3, 8004c6e <__sflush_r+0x46>
 8004c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c6c:	1ac0      	subs	r0, r0, r3
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4602      	mov	r2, r0
 8004c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c74:	6a21      	ldr	r1, [r4, #32]
 8004c76:	4628      	mov	r0, r5
 8004c78:	47b0      	blx	r6
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	d106      	bne.n	8004c8e <__sflush_r+0x66>
 8004c80:	6829      	ldr	r1, [r5, #0]
 8004c82:	291d      	cmp	r1, #29
 8004c84:	d82c      	bhi.n	8004ce0 <__sflush_r+0xb8>
 8004c86:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <__sflush_r+0x108>)
 8004c88:	40ca      	lsrs	r2, r1
 8004c8a:	07d6      	lsls	r6, r2, #31
 8004c8c:	d528      	bpl.n	8004ce0 <__sflush_r+0xb8>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	6062      	str	r2, [r4, #4]
 8004c92:	04d9      	lsls	r1, r3, #19
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	6022      	str	r2, [r4, #0]
 8004c98:	d504      	bpl.n	8004ca4 <__sflush_r+0x7c>
 8004c9a:	1c42      	adds	r2, r0, #1
 8004c9c:	d101      	bne.n	8004ca2 <__sflush_r+0x7a>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	b903      	cbnz	r3, 8004ca4 <__sflush_r+0x7c>
 8004ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca6:	602f      	str	r7, [r5, #0]
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d0ca      	beq.n	8004c42 <__sflush_r+0x1a>
 8004cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	d002      	beq.n	8004cba <__sflush_r+0x92>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f7ff f9b5 	bl	8004024 <_free_r>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8004cbe:	e7c1      	b.n	8004c44 <__sflush_r+0x1c>
 8004cc0:	6a21      	ldr	r1, [r4, #32]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b0      	blx	r6
 8004cc8:	1c41      	adds	r1, r0, #1
 8004cca:	d1c7      	bne.n	8004c5c <__sflush_r+0x34>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0c4      	beq.n	8004c5c <__sflush_r+0x34>
 8004cd2:	2b1d      	cmp	r3, #29
 8004cd4:	d001      	beq.n	8004cda <__sflush_r+0xb2>
 8004cd6:	2b16      	cmp	r3, #22
 8004cd8:	d101      	bne.n	8004cde <__sflush_r+0xb6>
 8004cda:	602f      	str	r7, [r5, #0]
 8004cdc:	e7b1      	b.n	8004c42 <__sflush_r+0x1a>
 8004cde:	89a3      	ldrh	r3, [r4, #12]
 8004ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	e7ad      	b.n	8004c44 <__sflush_r+0x1c>
 8004ce8:	690f      	ldr	r7, [r1, #16]
 8004cea:	2f00      	cmp	r7, #0
 8004cec:	d0a9      	beq.n	8004c42 <__sflush_r+0x1a>
 8004cee:	0793      	lsls	r3, r2, #30
 8004cf0:	680e      	ldr	r6, [r1, #0]
 8004cf2:	bf08      	it	eq
 8004cf4:	694b      	ldreq	r3, [r1, #20]
 8004cf6:	600f      	str	r7, [r1, #0]
 8004cf8:	bf18      	it	ne
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	eba6 0807 	sub.w	r8, r6, r7
 8004d00:	608b      	str	r3, [r1, #8]
 8004d02:	f1b8 0f00 	cmp.w	r8, #0
 8004d06:	dd9c      	ble.n	8004c42 <__sflush_r+0x1a>
 8004d08:	6a21      	ldr	r1, [r4, #32]
 8004d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	463a      	mov	r2, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b0      	blx	r6
 8004d14:	2800      	cmp	r0, #0
 8004d16:	dc06      	bgt.n	8004d26 <__sflush_r+0xfe>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	e78e      	b.n	8004c44 <__sflush_r+0x1c>
 8004d26:	4407      	add	r7, r0
 8004d28:	eba8 0800 	sub.w	r8, r8, r0
 8004d2c:	e7e9      	b.n	8004d02 <__sflush_r+0xda>
 8004d2e:	bf00      	nop
 8004d30:	20400001 	.word	0x20400001

08004d34 <_fflush_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	4605      	mov	r5, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b913      	cbnz	r3, 8004d44 <_fflush_r+0x10>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	4628      	mov	r0, r5
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	b118      	cbz	r0, 8004d4e <_fflush_r+0x1a>
 8004d46:	6983      	ldr	r3, [r0, #24]
 8004d48:	b90b      	cbnz	r3, 8004d4e <_fflush_r+0x1a>
 8004d4a:	f000 f887 	bl	8004e5c <__sinit>
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <_fflush_r+0x6c>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	d11b      	bne.n	8004d8c <_fflush_r+0x58>
 8004d54:	686c      	ldr	r4, [r5, #4]
 8004d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0ef      	beq.n	8004d3e <_fflush_r+0xa>
 8004d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d60:	07d0      	lsls	r0, r2, #31
 8004d62:	d404      	bmi.n	8004d6e <_fflush_r+0x3a>
 8004d64:	0599      	lsls	r1, r3, #22
 8004d66:	d402      	bmi.n	8004d6e <_fflush_r+0x3a>
 8004d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d6a:	f000 f915 	bl	8004f98 <__retarget_lock_acquire_recursive>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	4621      	mov	r1, r4
 8004d72:	f7ff ff59 	bl	8004c28 <__sflush_r>
 8004d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d78:	07da      	lsls	r2, r3, #31
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	d4e0      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	059b      	lsls	r3, r3, #22
 8004d82:	d4dd      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d86:	f000 f908 	bl	8004f9a <__retarget_lock_release_recursive>
 8004d8a:	e7d9      	b.n	8004d40 <_fflush_r+0xc>
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <_fflush_r+0x70>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	d101      	bne.n	8004d96 <_fflush_r+0x62>
 8004d92:	68ac      	ldr	r4, [r5, #8]
 8004d94:	e7df      	b.n	8004d56 <_fflush_r+0x22>
 8004d96:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <_fflush_r+0x74>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	bf08      	it	eq
 8004d9c:	68ec      	ldreq	r4, [r5, #12]
 8004d9e:	e7da      	b.n	8004d56 <_fflush_r+0x22>
 8004da0:	08005640 	.word	0x08005640
 8004da4:	08005660 	.word	0x08005660
 8004da8:	08005620 	.word	0x08005620

08004dac <std>:
 8004dac:	2300      	movs	r3, #0
 8004dae:	b510      	push	{r4, lr}
 8004db0:	4604      	mov	r4, r0
 8004db2:	e9c0 3300 	strd	r3, r3, [r0]
 8004db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dba:	6083      	str	r3, [r0, #8]
 8004dbc:	8181      	strh	r1, [r0, #12]
 8004dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004dc0:	81c2      	strh	r2, [r0, #14]
 8004dc2:	6183      	str	r3, [r0, #24]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	305c      	adds	r0, #92	; 0x5c
 8004dca:	f7fe ffb1 	bl	8003d30 <memset>
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <std+0x38>)
 8004dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <std+0x3c>)
 8004dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <std+0x40>)
 8004dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x44>)
 8004ddc:	6224      	str	r4, [r4, #32]
 8004dde:	6323      	str	r3, [r4, #48]	; 0x30
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	bf00      	nop
 8004de4:	0800519d 	.word	0x0800519d
 8004de8:	080051bf 	.word	0x080051bf
 8004dec:	080051f7 	.word	0x080051f7
 8004df0:	0800521b 	.word	0x0800521b

08004df4 <_cleanup_r>:
 8004df4:	4901      	ldr	r1, [pc, #4]	; (8004dfc <_cleanup_r+0x8>)
 8004df6:	f000 b8af 	b.w	8004f58 <_fwalk_reent>
 8004dfa:	bf00      	nop
 8004dfc:	08004d35 	.word	0x08004d35

08004e00 <__sfmoreglue>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	2268      	movs	r2, #104	; 0x68
 8004e04:	1e4d      	subs	r5, r1, #1
 8004e06:	4355      	muls	r5, r2
 8004e08:	460e      	mov	r6, r1
 8004e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e0e:	f7ff f975 	bl	80040fc <_malloc_r>
 8004e12:	4604      	mov	r4, r0
 8004e14:	b140      	cbz	r0, 8004e28 <__sfmoreglue+0x28>
 8004e16:	2100      	movs	r1, #0
 8004e18:	e9c0 1600 	strd	r1, r6, [r0]
 8004e1c:	300c      	adds	r0, #12
 8004e1e:	60a0      	str	r0, [r4, #8]
 8004e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e24:	f7fe ff84 	bl	8003d30 <memset>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}

08004e2c <__sfp_lock_acquire>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__sfp_lock_acquire+0x8>)
 8004e2e:	f000 b8b3 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 8004e32:	bf00      	nop
 8004e34:	20000c89 	.word	0x20000c89

08004e38 <__sfp_lock_release>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__sfp_lock_release+0x8>)
 8004e3a:	f000 b8ae 	b.w	8004f9a <__retarget_lock_release_recursive>
 8004e3e:	bf00      	nop
 8004e40:	20000c89 	.word	0x20000c89

08004e44 <__sinit_lock_acquire>:
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <__sinit_lock_acquire+0x8>)
 8004e46:	f000 b8a7 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	20000c8a 	.word	0x20000c8a

08004e50 <__sinit_lock_release>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sinit_lock_release+0x8>)
 8004e52:	f000 b8a2 	b.w	8004f9a <__retarget_lock_release_recursive>
 8004e56:	bf00      	nop
 8004e58:	20000c8a 	.word	0x20000c8a

08004e5c <__sinit>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	f7ff fff0 	bl	8004e44 <__sinit_lock_acquire>
 8004e64:	69a3      	ldr	r3, [r4, #24]
 8004e66:	b11b      	cbz	r3, 8004e70 <__sinit+0x14>
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f7ff bff0 	b.w	8004e50 <__sinit_lock_release>
 8004e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e74:	6523      	str	r3, [r4, #80]	; 0x50
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <__sinit+0x68>)
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <__sinit+0x6c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	bf04      	itt	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	61a3      	streq	r3, [r4, #24]
 8004e86:	4620      	mov	r0, r4
 8004e88:	f000 f820 	bl	8004ecc <__sfp>
 8004e8c:	6060      	str	r0, [r4, #4]
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f81c 	bl	8004ecc <__sfp>
 8004e94:	60a0      	str	r0, [r4, #8]
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 f818 	bl	8004ecc <__sfp>
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60e0      	str	r0, [r4, #12]
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	6860      	ldr	r0, [r4, #4]
 8004ea4:	f7ff ff82 	bl	8004dac <std>
 8004ea8:	68a0      	ldr	r0, [r4, #8]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	2109      	movs	r1, #9
 8004eae:	f7ff ff7d 	bl	8004dac <std>
 8004eb2:	68e0      	ldr	r0, [r4, #12]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	2112      	movs	r1, #18
 8004eb8:	f7ff ff78 	bl	8004dac <std>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	61a3      	str	r3, [r4, #24]
 8004ec0:	e7d2      	b.n	8004e68 <__sinit+0xc>
 8004ec2:	bf00      	nop
 8004ec4:	08005438 	.word	0x08005438
 8004ec8:	08004df5 	.word	0x08004df5

08004ecc <__sfp>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	4607      	mov	r7, r0
 8004ed0:	f7ff ffac 	bl	8004e2c <__sfp_lock_acquire>
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <__sfp+0x84>)
 8004ed6:	681e      	ldr	r6, [r3, #0]
 8004ed8:	69b3      	ldr	r3, [r6, #24]
 8004eda:	b913      	cbnz	r3, 8004ee2 <__sfp+0x16>
 8004edc:	4630      	mov	r0, r6
 8004ede:	f7ff ffbd 	bl	8004e5c <__sinit>
 8004ee2:	3648      	adds	r6, #72	; 0x48
 8004ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	d503      	bpl.n	8004ef4 <__sfp+0x28>
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	b30b      	cbz	r3, 8004f34 <__sfp+0x68>
 8004ef0:	6836      	ldr	r6, [r6, #0]
 8004ef2:	e7f7      	b.n	8004ee4 <__sfp+0x18>
 8004ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ef8:	b9d5      	cbnz	r5, 8004f30 <__sfp+0x64>
 8004efa:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <__sfp+0x88>)
 8004efc:	60e3      	str	r3, [r4, #12]
 8004efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f02:	6665      	str	r5, [r4, #100]	; 0x64
 8004f04:	f000 f847 	bl	8004f96 <__retarget_lock_init_recursive>
 8004f08:	f7ff ff96 	bl	8004e38 <__sfp_lock_release>
 8004f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f14:	6025      	str	r5, [r4, #0]
 8004f16:	61a5      	str	r5, [r4, #24]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f20:	f7fe ff06 	bl	8003d30 <memset>
 8004f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	3468      	adds	r4, #104	; 0x68
 8004f32:	e7d9      	b.n	8004ee8 <__sfp+0x1c>
 8004f34:	2104      	movs	r1, #4
 8004f36:	4638      	mov	r0, r7
 8004f38:	f7ff ff62 	bl	8004e00 <__sfmoreglue>
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	6030      	str	r0, [r6, #0]
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1d5      	bne.n	8004ef0 <__sfp+0x24>
 8004f44:	f7ff ff78 	bl	8004e38 <__sfp_lock_release>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	e7ee      	b.n	8004f2c <__sfp+0x60>
 8004f4e:	bf00      	nop
 8004f50:	08005438 	.word	0x08005438
 8004f54:	ffff0001 	.word	0xffff0001

08004f58 <_fwalk_reent>:
 8004f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	4688      	mov	r8, r1
 8004f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f64:	2700      	movs	r7, #0
 8004f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f6e:	d505      	bpl.n	8004f7c <_fwalk_reent+0x24>
 8004f70:	6824      	ldr	r4, [r4, #0]
 8004f72:	2c00      	cmp	r4, #0
 8004f74:	d1f7      	bne.n	8004f66 <_fwalk_reent+0xe>
 8004f76:	4638      	mov	r0, r7
 8004f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f7c:	89ab      	ldrh	r3, [r5, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d907      	bls.n	8004f92 <_fwalk_reent+0x3a>
 8004f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f86:	3301      	adds	r3, #1
 8004f88:	d003      	beq.n	8004f92 <_fwalk_reent+0x3a>
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	47c0      	blx	r8
 8004f90:	4307      	orrs	r7, r0
 8004f92:	3568      	adds	r5, #104	; 0x68
 8004f94:	e7e9      	b.n	8004f6a <_fwalk_reent+0x12>

08004f96 <__retarget_lock_init_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <__retarget_lock_acquire_recursive>:
 8004f98:	4770      	bx	lr

08004f9a <__retarget_lock_release_recursive>:
 8004f9a:	4770      	bx	lr

08004f9c <__swhatbuf_r>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	b096      	sub	sp, #88	; 0x58
 8004fa8:	4614      	mov	r4, r2
 8004faa:	461d      	mov	r5, r3
 8004fac:	da08      	bge.n	8004fc0 <__swhatbuf_r+0x24>
 8004fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	061a      	lsls	r2, r3, #24
 8004fb8:	d410      	bmi.n	8004fdc <__swhatbuf_r+0x40>
 8004fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbe:	e00e      	b.n	8004fde <__swhatbuf_r+0x42>
 8004fc0:	466a      	mov	r2, sp
 8004fc2:	f000 f951 	bl	8005268 <_fstat_r>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	dbf1      	blt.n	8004fae <__swhatbuf_r+0x12>
 8004fca:	9a01      	ldr	r2, [sp, #4]
 8004fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fd4:	425a      	negs	r2, r3
 8004fd6:	415a      	adcs	r2, r3
 8004fd8:	602a      	str	r2, [r5, #0]
 8004fda:	e7ee      	b.n	8004fba <__swhatbuf_r+0x1e>
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	2000      	movs	r0, #0
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	b016      	add	sp, #88	; 0x58
 8004fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fe8 <__smakebuf_r>:
 8004fe8:	898b      	ldrh	r3, [r1, #12]
 8004fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fec:	079d      	lsls	r5, r3, #30
 8004fee:	4606      	mov	r6, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	d507      	bpl.n	8005004 <__smakebuf_r+0x1c>
 8004ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	6163      	str	r3, [r4, #20]
 8005000:	b002      	add	sp, #8
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	ab01      	add	r3, sp, #4
 8005006:	466a      	mov	r2, sp
 8005008:	f7ff ffc8 	bl	8004f9c <__swhatbuf_r>
 800500c:	9900      	ldr	r1, [sp, #0]
 800500e:	4605      	mov	r5, r0
 8005010:	4630      	mov	r0, r6
 8005012:	f7ff f873 	bl	80040fc <_malloc_r>
 8005016:	b948      	cbnz	r0, 800502c <__smakebuf_r+0x44>
 8005018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800501c:	059a      	lsls	r2, r3, #22
 800501e:	d4ef      	bmi.n	8005000 <__smakebuf_r+0x18>
 8005020:	f023 0303 	bic.w	r3, r3, #3
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	e7e3      	b.n	8004ff4 <__smakebuf_r+0xc>
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <__smakebuf_r+0x7c>)
 800502e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	6020      	str	r0, [r4, #0]
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	9b00      	ldr	r3, [sp, #0]
 800503c:	6163      	str	r3, [r4, #20]
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	6120      	str	r0, [r4, #16]
 8005042:	b15b      	cbz	r3, 800505c <__smakebuf_r+0x74>
 8005044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005048:	4630      	mov	r0, r6
 800504a:	f000 f91f 	bl	800528c <_isatty_r>
 800504e:	b128      	cbz	r0, 800505c <__smakebuf_r+0x74>
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	81a3      	strh	r3, [r4, #12]
 800505c:	89a0      	ldrh	r0, [r4, #12]
 800505e:	4305      	orrs	r5, r0
 8005060:	81a5      	strh	r5, [r4, #12]
 8005062:	e7cd      	b.n	8005000 <__smakebuf_r+0x18>
 8005064:	08004df5 	.word	0x08004df5

08005068 <memmove>:
 8005068:	4288      	cmp	r0, r1
 800506a:	b510      	push	{r4, lr}
 800506c:	eb01 0402 	add.w	r4, r1, r2
 8005070:	d902      	bls.n	8005078 <memmove+0x10>
 8005072:	4284      	cmp	r4, r0
 8005074:	4623      	mov	r3, r4
 8005076:	d807      	bhi.n	8005088 <memmove+0x20>
 8005078:	1e43      	subs	r3, r0, #1
 800507a:	42a1      	cmp	r1, r4
 800507c:	d008      	beq.n	8005090 <memmove+0x28>
 800507e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005086:	e7f8      	b.n	800507a <memmove+0x12>
 8005088:	4402      	add	r2, r0
 800508a:	4601      	mov	r1, r0
 800508c:	428a      	cmp	r2, r1
 800508e:	d100      	bne.n	8005092 <memmove+0x2a>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509a:	e7f7      	b.n	800508c <memmove+0x24>

0800509c <__malloc_lock>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__malloc_lock+0x8>)
 800509e:	f7ff bf7b 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	20000c88 	.word	0x20000c88

080050a8 <__malloc_unlock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_unlock+0x8>)
 80050aa:	f7ff bf76 	b.w	8004f9a <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	20000c88 	.word	0x20000c88

080050b4 <_realloc_r>:
 80050b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	4680      	mov	r8, r0
 80050ba:	4614      	mov	r4, r2
 80050bc:	460e      	mov	r6, r1
 80050be:	b921      	cbnz	r1, 80050ca <_realloc_r+0x16>
 80050c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c4:	4611      	mov	r1, r2
 80050c6:	f7ff b819 	b.w	80040fc <_malloc_r>
 80050ca:	b92a      	cbnz	r2, 80050d8 <_realloc_r+0x24>
 80050cc:	f7fe ffaa 	bl	8004024 <_free_r>
 80050d0:	4625      	mov	r5, r4
 80050d2:	4628      	mov	r0, r5
 80050d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d8:	f000 f8fa 	bl	80052d0 <_malloc_usable_size_r>
 80050dc:	4284      	cmp	r4, r0
 80050de:	4607      	mov	r7, r0
 80050e0:	d802      	bhi.n	80050e8 <_realloc_r+0x34>
 80050e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050e6:	d812      	bhi.n	800510e <_realloc_r+0x5a>
 80050e8:	4621      	mov	r1, r4
 80050ea:	4640      	mov	r0, r8
 80050ec:	f7ff f806 	bl	80040fc <_malloc_r>
 80050f0:	4605      	mov	r5, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d0ed      	beq.n	80050d2 <_realloc_r+0x1e>
 80050f6:	42bc      	cmp	r4, r7
 80050f8:	4622      	mov	r2, r4
 80050fa:	4631      	mov	r1, r6
 80050fc:	bf28      	it	cs
 80050fe:	463a      	movcs	r2, r7
 8005100:	f7fe fe08 	bl	8003d14 <memcpy>
 8005104:	4631      	mov	r1, r6
 8005106:	4640      	mov	r0, r8
 8005108:	f7fe ff8c 	bl	8004024 <_free_r>
 800510c:	e7e1      	b.n	80050d2 <_realloc_r+0x1e>
 800510e:	4635      	mov	r5, r6
 8005110:	e7df      	b.n	80050d2 <_realloc_r+0x1e>

08005112 <_raise_r>:
 8005112:	291f      	cmp	r1, #31
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	d904      	bls.n	8005126 <_raise_r+0x14>
 800511c:	2316      	movs	r3, #22
 800511e:	6003      	str	r3, [r0, #0]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005128:	b112      	cbz	r2, 8005130 <_raise_r+0x1e>
 800512a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800512e:	b94b      	cbnz	r3, 8005144 <_raise_r+0x32>
 8005130:	4620      	mov	r0, r4
 8005132:	f000 f831 	bl	8005198 <_getpid_r>
 8005136:	462a      	mov	r2, r5
 8005138:	4601      	mov	r1, r0
 800513a:	4620      	mov	r0, r4
 800513c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005140:	f000 b818 	b.w	8005174 <_kill_r>
 8005144:	2b01      	cmp	r3, #1
 8005146:	d00a      	beq.n	800515e <_raise_r+0x4c>
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	d103      	bne.n	8005154 <_raise_r+0x42>
 800514c:	2316      	movs	r3, #22
 800514e:	6003      	str	r3, [r0, #0]
 8005150:	2001      	movs	r0, #1
 8005152:	e7e7      	b.n	8005124 <_raise_r+0x12>
 8005154:	2400      	movs	r4, #0
 8005156:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800515a:	4628      	mov	r0, r5
 800515c:	4798      	blx	r3
 800515e:	2000      	movs	r0, #0
 8005160:	e7e0      	b.n	8005124 <_raise_r+0x12>
	...

08005164 <raise>:
 8005164:	4b02      	ldr	r3, [pc, #8]	; (8005170 <raise+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f7ff bfd2 	b.w	8005112 <_raise_r>
 800516e:	bf00      	nop
 8005170:	20000228 	.word	0x20000228

08005174 <_kill_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d07      	ldr	r5, [pc, #28]	; (8005194 <_kill_r+0x20>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	f7fb fd31 	bl	8000be8 <_kill>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d102      	bne.n	8005190 <_kill_r+0x1c>
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	b103      	cbz	r3, 8005190 <_kill_r+0x1c>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd38      	pop	{r3, r4, r5, pc}
 8005192:	bf00      	nop
 8005194:	20000c8c 	.word	0x20000c8c

08005198 <_getpid_r>:
 8005198:	f7fb bd1e 	b.w	8000bd8 <_getpid>

0800519c <__sread>:
 800519c:	b510      	push	{r4, lr}
 800519e:	460c      	mov	r4, r1
 80051a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a4:	f000 f89c 	bl	80052e0 <_read_r>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	bfab      	itete	ge
 80051ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ae:	89a3      	ldrhlt	r3, [r4, #12]
 80051b0:	181b      	addge	r3, r3, r0
 80051b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051b6:	bfac      	ite	ge
 80051b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80051ba:	81a3      	strhlt	r3, [r4, #12]
 80051bc:	bd10      	pop	{r4, pc}

080051be <__swrite>:
 80051be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	461f      	mov	r7, r3
 80051c4:	898b      	ldrh	r3, [r1, #12]
 80051c6:	05db      	lsls	r3, r3, #23
 80051c8:	4605      	mov	r5, r0
 80051ca:	460c      	mov	r4, r1
 80051cc:	4616      	mov	r6, r2
 80051ce:	d505      	bpl.n	80051dc <__swrite+0x1e>
 80051d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d4:	2302      	movs	r3, #2
 80051d6:	2200      	movs	r2, #0
 80051d8:	f000 f868 	bl	80052ac <_lseek_r>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	4632      	mov	r2, r6
 80051ea:	463b      	mov	r3, r7
 80051ec:	4628      	mov	r0, r5
 80051ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	f000 b817 	b.w	8005224 <_write_r>

080051f6 <__sseek>:
 80051f6:	b510      	push	{r4, lr}
 80051f8:	460c      	mov	r4, r1
 80051fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fe:	f000 f855 	bl	80052ac <_lseek_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	bf15      	itete	ne
 8005208:	6560      	strne	r0, [r4, #84]	; 0x54
 800520a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800520e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005212:	81a3      	strheq	r3, [r4, #12]
 8005214:	bf18      	it	ne
 8005216:	81a3      	strhne	r3, [r4, #12]
 8005218:	bd10      	pop	{r4, pc}

0800521a <__sclose>:
 800521a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521e:	f000 b813 	b.w	8005248 <_close_r>
	...

08005224 <_write_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d07      	ldr	r5, [pc, #28]	; (8005244 <_write_r+0x20>)
 8005228:	4604      	mov	r4, r0
 800522a:	4608      	mov	r0, r1
 800522c:	4611      	mov	r1, r2
 800522e:	2200      	movs	r2, #0
 8005230:	602a      	str	r2, [r5, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f7fb fd0f 	bl	8000c56 <_write>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_write_r+0x1e>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_write_r+0x1e>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000c8c 	.word	0x20000c8c

08005248 <_close_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d06      	ldr	r5, [pc, #24]	; (8005264 <_close_r+0x1c>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fb fd1b 	bl	8000c8e <_close>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_close_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_close_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000c8c 	.word	0x20000c8c

08005268 <_fstat_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d07      	ldr	r5, [pc, #28]	; (8005288 <_fstat_r+0x20>)
 800526c:	2300      	movs	r3, #0
 800526e:	4604      	mov	r4, r0
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	f7fb fd16 	bl	8000ca6 <_fstat>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d102      	bne.n	8005284 <_fstat_r+0x1c>
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	b103      	cbz	r3, 8005284 <_fstat_r+0x1c>
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	bf00      	nop
 8005288:	20000c8c 	.word	0x20000c8c

0800528c <_isatty_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d06      	ldr	r5, [pc, #24]	; (80052a8 <_isatty_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fb fd15 	bl	8000cc6 <_isatty>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_isatty_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_isatty_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	20000c8c 	.word	0x20000c8c

080052ac <_lseek_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_lseek_r+0x20>)
 80052b0:	4604      	mov	r4, r0
 80052b2:	4608      	mov	r0, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	602a      	str	r2, [r5, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7fb fd0e 	bl	8000cdc <_lseek>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_lseek_r+0x1e>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_lseek_r+0x1e>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	20000c8c 	.word	0x20000c8c

080052d0 <_malloc_usable_size_r>:
 80052d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d4:	1f18      	subs	r0, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfbc      	itt	lt
 80052da:	580b      	ldrlt	r3, [r1, r0]
 80052dc:	18c0      	addlt	r0, r0, r3
 80052de:	4770      	bx	lr

080052e0 <_read_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d07      	ldr	r5, [pc, #28]	; (8005300 <_read_r+0x20>)
 80052e4:	4604      	mov	r4, r0
 80052e6:	4608      	mov	r0, r1
 80052e8:	4611      	mov	r1, r2
 80052ea:	2200      	movs	r2, #0
 80052ec:	602a      	str	r2, [r5, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7fb fc94 	bl	8000c1c <_read>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_read_r+0x1e>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_read_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20000c8c 	.word	0x20000c8c

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
