
CRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005628  08005628  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  2000028c  080058bc  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  080058bc  00020c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3a0  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e5  00000000  00000000  0002b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001770b  00000000  00000000  0002ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d32b  00000000  00000000  0004632b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087903  00000000  00000000  00053656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daf59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff8  00000000  00000000  000dafac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000028c 	.word	0x2000028c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052a8 	.word	0x080052a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000290 	.word	0x20000290
 80001dc:	080052a8 	.word	0x080052a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <BUTTON_Press_Short_Callback>:
 * CRC 32	10 02 00 11 22 33 24 C2 31 6D 10 03
 */
//uint8_t tx_frame_data[] = {0x00, 0x11, 0x22, 0x33};
uint8_t tx_frame_data[255];
uint8_t tx_frame_len = 0;
void BUTTON_Press_Short_Callback(BUTTON_HandleTypedef *ButtonX){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <BUTTON_Press_Short_Callback+0x24>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d105      	bne.n	80005b0 <BUTTON_Press_Short_Callback+0x1c>
		FRAME_SYNC_Transmit(tx_frame_data, tx_frame_len);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <BUTTON_Press_Short_Callback+0x28>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <BUTTON_Press_Short_Callback+0x2c>)
 80005ac:	f003 f83c 	bl	8003628 <FRAME_SYNC_Transmit>
	}
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000334 	.word	0x20000334
 80005bc:	2000044f 	.word	0x2000044f
 80005c0:	20000350 	.word	0x20000350

080005c4 <FRAME_SYNC_RxCpltCallback>:

void FRAME_SYNC_RxCpltCallback(uint8_t *p_rx_data, uint8_t data_size){
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b09f      	sub	sp, #124	; 0x7c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nData: ";
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <FRAME_SYNC_RxCpltCallback+0xac>)
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005da:	e883 0003 	stmia.w	r3, {r0, r1}
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	225c      	movs	r2, #92	; 0x5c
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fb74 	bl	8003cd4 <memset>
	for(int i = 0; i < data_size; i++){
 80005ec:	2300      	movs	r3, #0
 80005ee:	677b      	str	r3, [r7, #116]	; 0x74
 80005f0:	e015      	b.n	800061e <FRAME_SYNC_RxCpltCallback+0x5a>
		char temp_str[4];
		sprintf(temp_str, "%02X ", p_rx_data[i]);
 80005f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	491c      	ldr	r1, [pc, #112]	; (8000674 <FRAME_SYNC_RxCpltCallback+0xb0>)
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fb6e 	bl	8003ce4 <siprintf>
		strcat(tx_str, temp_str);
 8000608:	f107 020c 	add.w	r2, r7, #12
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fb86 	bl	8003d24 <strcat>
	for(int i = 0; i < data_size; i++){
 8000618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800061a:	3301      	adds	r3, #1
 800061c:	677b      	str	r3, [r7, #116]	; 0x74
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000622:	429a      	cmp	r2, r3
 8000624:	dbe5      	blt.n	80005f2 <FRAME_SYNC_RxCpltCallback+0x2e>
	}
	strcat(tx_str, "\nCRC Correct\n");
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdd8 	bl	80001e0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4413      	add	r3, r2
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <FRAME_SYNC_RxCpltCallback+0xb4>)
 800063c:	461c      	mov	r4, r3
 800063e:	4613      	mov	r3, r2
 8000640:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000642:	6020      	str	r0, [r4, #0]
 8000644:	6061      	str	r1, [r4, #4]
 8000646:	60a2      	str	r2, [r4, #8]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdc5 	bl	80001e0 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	f107 0110 	add.w	r1, r7, #16
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <FRAME_SYNC_RxCpltCallback+0xb8>)
 8000664:	f001 fc29 	bl	8001eba <HAL_UART_Transmit>

}
 8000668:	bf00      	nop
 800066a:	377c      	adds	r7, #124	; 0x7c
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	080052d8 	.word	0x080052d8
 8000674:	080052c0 	.word	0x080052c0
 8000678:	080052c8 	.word	0x080052c8
 800067c:	200002ec 	.word	0x200002ec

08000680 <FRAME_SYNC_RxFailCallback>:

void FRAME_SYNC_RxFailCallback(uint8_t *p_rx_data, uint8_t data_size){
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nCRC Fail\n";
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <FRAME_SYNC_RxFailCallback+0x50>)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	ca07      	ldmia	r2, {r0, r1, r2}
 8000694:	c303      	stmia	r3!, {r0, r1}
 8000696:	801a      	strh	r2, [r3, #0]
 8000698:	3302      	adds	r3, #2
 800069a:	0c12      	lsrs	r2, r2, #16
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	f107 0317 	add.w	r3, r7, #23
 80006a2:	2259      	movs	r2, #89	; 0x59
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fb14 	bl	8003cd4 <memset>
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd95 	bl	80001e0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f107 010c 	add.w	r1, r7, #12
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <FRAME_SYNC_RxFailCallback+0x54>)
 80006c4:	f001 fbf9 	bl	8001eba <HAL_UART_Transmit>
}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	; 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	0800533c 	.word	0x0800533c
 80006d4:	200002ec 	.word	0x200002ec

080006d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_UART_RxCpltCallback+0x54>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d10a      	bne.n	8000702 <HAL_UART_RxCpltCallback+0x2a>
		COMMAND_LINE_Receive(uart_rx_buf);
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fe4b 	bl	800338c <COMMAND_LINE_Receive>
		HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	490d      	ldr	r1, [pc, #52]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HAL_UART_RxCpltCallback+0x54>)
 80006fc:	f001 fc6f 	bl	8001fde <HAL_UART_Receive_IT>
	} else if(huart->Instance == huart2.Instance){
		UART_Receive(uart_rx_buf);
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
	}
}
 8000700:	e00f      	b.n	8000722 <HAL_UART_RxCpltCallback+0x4a>
	} else if(huart->Instance == huart2.Instance){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_UART_RxCpltCallback+0x5c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d109      	bne.n	8000722 <HAL_UART_RxCpltCallback+0x4a>
		UART_Receive(uart_rx_buf);
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fa64 	bl	8003be0 <UART_Receive>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	4905      	ldr	r1, [pc, #20]	; (8000730 <HAL_UART_RxCpltCallback+0x58>)
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_UART_RxCpltCallback+0x5c>)
 800071e:	f001 fc5e 	bl	8001fde <HAL_UART_Receive_IT>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200002ec 	.word	0x200002ec
 8000730:	20000330 	.word	0x20000330
 8000734:	200002a8 	.word	0x200002a8

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fb4c 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f832 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f8ec 	bl	8000920 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000748:	f000 f896 	bl	8000878 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800074c:	f000 f8be 	bl	80008cc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  BUTTON_Init(&btn, GPIOA, GPIO_PIN_0, 0);
 8000750:	2300      	movs	r3, #0
 8000752:	2201      	movs	r2, #1
 8000754:	490e      	ldr	r1, [pc, #56]	; (8000790 <main+0x58>)
 8000756:	480f      	ldr	r0, [pc, #60]	; (8000794 <main+0x5c>)
 8000758:	f003 f966 	bl	8003a28 <BUTTON_Init>
  BUTTON_Set_Callback_Function(NULL, NULL, BUTTON_Press_Short_Callback, NULL);
 800075c:	2300      	movs	r3, #0
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <main+0x60>)
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f003 f98a 	bl	8003a7c <BUTTON_Set_Callback_Function>

  HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	490c      	ldr	r1, [pc, #48]	; (800079c <main+0x64>)
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <main+0x68>)
 800076e:	f001 fc36 	bl	8001fde <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	4909      	ldr	r1, [pc, #36]	; (800079c <main+0x64>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <main+0x6c>)
 8000778:	f001 fc31 	bl	8001fde <HAL_UART_Receive_IT>
  UART_Init();
 800077c:	f003 fa22 	bl	8003bc4 <UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BUTTON_Handle(&btn);
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <main+0x5c>)
 8000782:	f003 f8b9 	bl	80038f8 <BUTTON_Handle>

	  UART_Handle();
 8000786:	f003 fa3b 	bl	8003c00 <UART_Handle>

	  COMMAND_LINE_Handle();
 800078a:	f002 fd03 	bl	8003194 <COMMAND_LINE_Handle>
	  BUTTON_Handle(&btn);
 800078e:	e7f7      	b.n	8000780 <main+0x48>
 8000790:	40020000 	.word	0x40020000
 8000794:	20000334 	.word	0x20000334
 8000798:	08000595 	.word	0x08000595
 800079c:	20000330 	.word	0x20000330
 80007a0:	200002ec 	.word	0x200002ec
 80007a4:	200002a8 	.word	0x200002a8

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fa8c 	bl	8003cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SystemClock_Config+0xc8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a26      	ldr	r2, [pc, #152]	; (8000870 <SystemClock_Config+0xc8>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xc8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <SystemClock_Config+0xcc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <SystemClock_Config+0xcc>)
 80007f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <SystemClock_Config+0xcc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000818:	2308      	movs	r3, #8
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fe9f 	bl	8001570 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000838:	f000 f8d2 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2103      	movs	r1, #3
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f901 	bl	8001a60 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000864:	f000 f8bc 	bl	80009e0 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f001 fab6 	bl	8001e20 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f891 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200002a8 	.word	0x200002a8
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART6_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART6_UART_Init+0x4c>)
 8000904:	f001 fa8c 	bl	8001e20 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f867 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200002ec 	.word	0x200002ec
 800091c:	40011400 	.word	0x40011400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_GPIO_Init+0xb4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a25      	ldr	r2, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xb4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_GPIO_Init+0xb8>)
 8000992:	f000 fdd3 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000996:	2301      	movs	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_GPIO_Init+0xbc>)
 80009aa:	f000 fc2b 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xb8>)
 80009c8:	f000 fc1c 	bl	8001204 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020000 	.word	0x40020000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a3a      	ldr	r2, [pc, #232]	; (8000b44 <HAL_UART_MspInit+0x108>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d134      	bne.n	8000ac8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a38      	ldr	r2, [pc, #224]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a96:	230c      	movs	r3, #12
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4826      	ldr	r0, [pc, #152]	; (8000b4c <HAL_UART_MspInit+0x110>)
 8000ab2:	f000 fba7 	bl	8001204 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2026      	movs	r0, #38	; 0x26
 8000abc:	f000 fad9 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac0:	2026      	movs	r0, #38	; 0x26
 8000ac2:	f000 faf2 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ac6:	e038      	b.n	8000b3a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <HAL_UART_MspInit+0x114>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d133      	bne.n	8000b3a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0x10c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0a:	23c0      	movs	r3, #192	; 0xc0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <HAL_UART_MspInit+0x118>)
 8000b26:	f000 fb6d 	bl	8001204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2047      	movs	r0, #71	; 0x47
 8000b30:	f000 fa9f 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b34:	2047      	movs	r0, #71	; 0x47
 8000b36:	f000 fab8 	bl	80010aa <HAL_NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40011400 	.word	0x40011400
 8000b54:	40020800 	.word	0x40020800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f96a 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f001 fa45 	bl	8002040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200002a8 	.word	0x200002a8

08000bc0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <USART6_IRQHandler+0x10>)
 8000bc6:	f001 fa3b 	bl	8002040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200002ec 	.word	0x200002ec

08000bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
	return 1;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_kill>:

int _kill(int pid, int sig)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bee:	f003 f839 	bl	8003c64 <__errno>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2216      	movs	r2, #22
 8000bf6:	601a      	str	r2, [r3, #0]
	return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_exit>:

void _exit (int status)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffe7 	bl	8000be4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c16:	e7fe      	b.n	8000c16 <_exit+0x12>

08000c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
	}

return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
	}
	return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f002 ff9e 	bl	8003c64 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20000450 	.word	0x20000450
 8000d5c:	20000c90 	.word	0x20000c90

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 ff5d 	bl	8003c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fcbf 	bl	8000738 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8000dc8:	08005630 	.word	0x08005630
  ldr r2, =_sbss
 8000dcc:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8000dd0:	20000c90 	.word	0x20000c90

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f92b 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	200f      	movs	r0, #15
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdee 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f943 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f90b 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000454 	.word	0x20000454

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000454 	.word	0x20000454

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff29 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff3e 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff31 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff feda 	bl	8000ea4 <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d008      	beq.n	8001110 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e052      	b.n	80011b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0216 	bic.w	r2, r2, #22
 800111e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800112e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <HAL_DMA_Abort+0x62>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0208 	bic.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001160:	e013      	b.n	800118a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001162:	f7ff fe9f 	bl	8000ea4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b05      	cmp	r3, #5
 800116e:	d90c      	bls.n	800118a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e015      	b.n	80011b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e4      	bne.n	8001162 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	223f      	movs	r2, #63	; 0x3f
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d004      	beq.n	80011dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e00c      	b.n	80011f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2205      	movs	r2, #5
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e159      	b.n	80014d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8148 	bne.w	80014ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a2 	beq.w	80014ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a56      	ldr	r2, [pc, #344]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b54      	ldr	r3, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <HAL_GPIO_Init+0x2f0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x202>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x1fe>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2f8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_GPIO_Init+0x2fc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x1f6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a45      	ldr	r2, [pc, #276]	; (8001504 <HAL_GPIO_Init+0x300>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x1f2>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x204>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x204>
 8001406:	2300      	movs	r3, #0
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x304>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x304>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	f67f aea2 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e001      	b.n	800152e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e267      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d075      	beq.n	800167a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05b      	beq.n	8001678 <HAL_RCC_OscConfig+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d157      	bne.n	8001678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e242      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x74>
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6f      	ldr	r2, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b6d      	ldr	r3, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6c      	ldr	r2, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 8001608:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a68      	ldr	r2, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fc3c 	bl	8000ea4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fc38 	bl	8000ea4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e207      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xc0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fc28 	bl	8000ea4 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fc24 	bl	8000ea4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1f3      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0xe8>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	2b08      	cmp	r3, #8
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1c7      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x244>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fbdd 	bl	8000ea4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fbd9 	bl	8000ea4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1a8      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4925      	ldr	r1, [pc, #148]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x244>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fbbc 	bl	8000ea4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fbb8 	bl	8000ea4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e187      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d036      	beq.n	80017c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fb9c 	bl	8000ea4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fb98 	bl	8000ea4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e167      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x200>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb85 	bl	8000ea4 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e00e      	b.n	80017bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fb81 	bl	8000ea4 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d907      	bls.n	80017bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e150      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	42470000 	.word	0x42470000
 80017b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ea      	bne.n	800179e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8097 	beq.w	8001904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a7c      	ldr	r2, [pc, #496]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b77      	ldr	r3, [pc, #476]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a73      	ldr	r2, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fb41 	bl	8000ea4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fb3d 	bl	8000ea4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e10c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x474>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x2ea>
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x30c>
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5b      	ldr	r2, [pc, #364]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800187c:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a57      	ldr	r2, [pc, #348]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a54      	ldr	r2, [pc, #336]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fb02 	bl	8000ea4 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff fafe 	bl	8000ea4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0cb      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ee      	beq.n	80018a4 <HAL_RCC_OscConfig+0x334>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff faec 	bl	8000ea4 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fae8 	bl	8000ea4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0b5      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ee      	bne.n	80018d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a1 	beq.w	8001a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	d05c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d141      	bne.n	80019a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fabc 	bl	8000ea4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fab8 	bl	8000ea4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e087      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	491b      	ldr	r1, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fa91 	bl	8000ea4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fa8d 	bl	8000ea4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e05c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x416>
 80019a4:	e054      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa7a 	bl	8000ea4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa76 	bl	8000ea4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e045      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x444>
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e038      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000
 80019e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4ec>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cc      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d90c      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d044      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e067      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff f9a8 	bl	8000ea4 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff f9a4 	bl	8000ea4 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20c      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f908 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	080053c0 	.word	0x080053c0
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c30:	b090      	sub	sp, #64	; 0x40
 8001c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d00d      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x40>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	f200 80a1 	bhi.w	8001d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5e:	e09b      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c64:	e09b      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6a:	e098      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d028      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c94:	2100      	movs	r1, #0
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c98:	fb03 f201 	mul.w	r2, r3, r1
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a43      	ldr	r2, [pc, #268]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8001caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cac:	460a      	mov	r2, r1
 8001cae:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	61fa      	str	r2, [r7, #28]
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cc6:	f7fe fae3 	bl	8000290 <__aeabi_uldivmod>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd2:	e053      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	2200      	movs	r2, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	617a      	str	r2, [r7, #20]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ce6:	f04f 0b00 	mov.w	fp, #0
 8001cea:	4652      	mov	r2, sl
 8001cec:	465b      	mov	r3, fp
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0159      	lsls	r1, r3, #5
 8001cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfc:	0150      	lsls	r0, r2, #5
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ebb2 080a 	subs.w	r8, r2, sl
 8001d06:	eb63 090b 	sbc.w	r9, r3, fp
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d22:	eb63 0509 	sbc.w	r5, r3, r9
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	00eb      	lsls	r3, r5, #3
 8001d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d34:	00e2      	lsls	r2, r4, #3
 8001d36:	4614      	mov	r4, r2
 8001d38:	461d      	mov	r5, r3
 8001d3a:	eb14 030a 	adds.w	r3, r4, sl
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	eb45 030b 	adc.w	r3, r5, fp
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d52:	4629      	mov	r1, r5
 8001d54:	028b      	lsls	r3, r1, #10
 8001d56:	4621      	mov	r1, r4
 8001d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	028a      	lsls	r2, r1, #10
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	2200      	movs	r2, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	60fa      	str	r2, [r7, #12]
 8001d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d70:	f7fe fa8e 	bl	8000290 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d96:	e002      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3740      	adds	r7, #64	; 0x40
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	017d7840 	.word	0x017d7840

08001db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	080053d0 	.word	0x080053d0

08001df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dfc:	f7ff ffdc 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0b5b      	lsrs	r3, r3, #13
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	080053d0 	.word	0x080053d0

08001e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e03f      	b.n	8001eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fdf8 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fddf 	bl	8002a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b08a      	sub	sp, #40	; 0x28
 8001ebe:	af02      	add	r7, sp, #8
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d17c      	bne.n	8001fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_UART_Transmit+0x2c>
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e075      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_Transmit+0x3e>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e06e      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2221      	movs	r2, #33	; 0x21
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe ffc9 	bl	8000ea4 <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f28:	d108      	bne.n	8001f3c <HAL_UART_Transmit+0x82>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	e003      	b.n	8001f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f4c:	e02a      	b.n	8001fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fb1f 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e036      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3302      	adds	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e007      	b.n	8001f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1cf      	bne.n	8001f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 faef 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d11d      	bne.n	8002034 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_UART_Receive_IT+0x26>
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e016      	b.n	8002036 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_UART_Receive_IT+0x38>
 8002012:	2302      	movs	r3, #2
 8002014:	e00f      	b.n	8002036 <HAL_UART_Receive_IT+0x58>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	461a      	mov	r2, r3
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fb24 	bl	8002678 <UART_Start_Receive_IT>
 8002030:	4603      	mov	r3, r0
 8002032:	e000      	b.n	8002036 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0ba      	sub	sp, #232	; 0xe8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800207e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_UART_IRQHandler+0x66>
 8002092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fc07 	bl	80028b2 <UART_Receive_IT>
      return;
 80020a4:	e256      	b.n	8002554 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80de 	beq.w	800226c <HAL_UART_IRQHandler+0x22c>
 80020b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80d1 	beq.w	800226c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_UART_IRQHandler+0xae>
 80020d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_UART_IRQHandler+0xd2>
 80020fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_UART_IRQHandler+0xf6>
 800211e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f043 0204 	orr.w	r2, r3, #4
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d011      	beq.n	8002166 <HAL_UART_IRQHandler+0x126>
 8002142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800214e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f043 0208 	orr.w	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 81ed 	beq.w	800254a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_UART_IRQHandler+0x14e>
 800217c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fb92 	bl	80028b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <HAL_UART_IRQHandler+0x17a>
 80021b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04f      	beq.n	800225a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa9a 	bl	80026f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d141      	bne.n	8002252 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3314      	adds	r3, #20
 80021d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021dc:	e853 3f00 	ldrex	r3, [r3]
 80021e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3314      	adds	r3, #20
 80021f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800220a:	e841 2300 	strex	r3, r2, [r1]
 800220e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1d9      	bne.n	80021ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	2b00      	cmp	r3, #0
 8002220:	d013      	beq.n	800224a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	4a7d      	ldr	r2, [pc, #500]	; (800241c <HAL_UART_IRQHandler+0x3dc>)
 8002228:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe ffc5 	bl	80011be <HAL_DMA_Abort_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002244:	4610      	mov	r0, r2
 8002246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002248:	e00e      	b.n	8002268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f990 	bl	8002570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002250:	e00a      	b.n	8002268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f98c 	bl	8002570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	e006      	b.n	8002268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f988 	bl	8002570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002266:	e170      	b.n	800254a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	bf00      	nop
    return;
 800226a:	e16e      	b.n	800254a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	2b01      	cmp	r3, #1
 8002272:	f040 814a 	bne.w	800250a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8143 	beq.w	800250a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 813c 	beq.w	800250a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	f040 80b4 	bne.w	8002420 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8140 	beq.w	800254e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022d6:	429a      	cmp	r2, r3
 80022d8:	f080 8139 	bcs.w	800254e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ee:	f000 8088 	beq.w	8002402 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800230c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	330c      	adds	r3, #12
 800231a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800231e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800232a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800232e:	e841 2300 	strex	r3, r2, [r1]
 8002332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1d9      	bne.n	80022f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3314      	adds	r3, #20
 8002344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002348:	e853 3f00 	ldrex	r3, [r3]
 800234c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800234e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3314      	adds	r3, #20
 800235e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800236a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800236e:	e841 2300 	strex	r3, r2, [r1]
 8002372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e1      	bne.n	800233e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002384:	e853 3f00 	ldrex	r3, [r3]
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3314      	adds	r3, #20
 800239a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800239e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023a6:	e841 2300 	strex	r3, r2, [r1]
 80023aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e3      	bne.n	800237a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	330c      	adds	r3, #12
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ca:	e853 3f00 	ldrex	r3, [r3]
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d2:	f023 0310 	bic.w	r3, r3, #16
 80023d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80023e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ec:	e841 2300 	strex	r3, r2, [r1]
 80023f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e3      	bne.n	80023c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fe6e 	bl	80010de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800240a:	b29b      	uxth	r3, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	b29b      	uxth	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8b6 	bl	8002584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002418:	e099      	b.n	800254e <HAL_UART_IRQHandler+0x50e>
 800241a:	bf00      	nop
 800241c:	080027bb 	.word	0x080027bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002428:	b29b      	uxth	r3, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 808b 	beq.w	8002552 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800243c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8086 	beq.w	8002552 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800245c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800246a:	647a      	str	r2, [r7, #68]	; 0x44
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002472:	e841 2300 	strex	r3, r2, [r1]
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e3      	bne.n	8002446 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3314      	adds	r3, #20
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	e853 3f00 	ldrex	r3, [r3]
 800248c:	623b      	str	r3, [r7, #32]
   return(result);
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3314      	adds	r3, #20
 800249e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024a2:	633a      	str	r2, [r7, #48]	; 0x30
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	e841 2300 	strex	r3, r2, [r1]
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e3      	bne.n	800247e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024e8:	61fa      	str	r2, [r7, #28]
 80024ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	e841 2300 	strex	r3, r2, [r1]
 80024f4:	617b      	str	r3, [r7, #20]
   return(result);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e3      	bne.n	80024c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f83e 	bl	8002584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002508:	e023      	b.n	8002552 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_UART_IRQHandler+0x4ea>
 8002516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f95d 	bl	80027e2 <UART_Transmit_IT>
    return;
 8002528:	e014      	b.n	8002554 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800252a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00e      	beq.n	8002554 <HAL_UART_IRQHandler+0x514>
 8002536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f99d 	bl	8002882 <UART_EndTransmit_IT>
    return;
 8002548:	e004      	b.n	8002554 <HAL_UART_IRQHandler+0x514>
    return;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <HAL_UART_IRQHandler+0x514>
      return;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <HAL_UART_IRQHandler+0x514>
      return;
 8002552:	bf00      	nop
  }
}
 8002554:	37e8      	adds	r7, #232	; 0xe8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop

0800255c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b090      	sub	sp, #64	; 0x40
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	e050      	b.n	8002650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d04c      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0x30>
 80025bc:	f7fe fc72 	bl	8000ea4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d241      	bcs.n	8002650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	330c      	adds	r3, #12
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	e853 3f00 	ldrex	r3, [r3]
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ec:	637a      	str	r2, [r7, #52]	; 0x34
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f4:	e841 2300 	strex	r3, r2, [r1]
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e5      	bne.n	80025cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3314      	adds	r3, #20
 8002606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	613b      	str	r3, [r7, #16]
   return(result);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3314      	adds	r3, #20
 800261e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002620:	623a      	str	r2, [r7, #32]
 8002622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002624:	69f9      	ldr	r1, [r7, #28]
 8002626:	6a3a      	ldr	r2, [r7, #32]
 8002628:	e841 2300 	strex	r3, r2, [r1]
 800262c:	61bb      	str	r3, [r7, #24]
   return(result);
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e5      	bne.n	8002600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e00f      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d09f      	beq.n	80025ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3740      	adds	r7, #64	; 0x40
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2222      	movs	r2, #34	; 0x22
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b095      	sub	sp, #84	; 0x54
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	e853 3f00 	ldrex	r3, [r3]
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800271c:	643a      	str	r2, [r7, #64]	; 0x40
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e5      	bne.n	80026fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002758:	e841 2300 	strex	r3, r2, [r1]
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e5      	bne.n	8002730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	2b01      	cmp	r3, #1
 800276a:	d119      	bne.n	80027a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	60bb      	str	r3, [r7, #8]
   return(result);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f023 0310 	bic.w	r3, r3, #16
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800278c:	61ba      	str	r2, [r7, #24]
 800278e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	613b      	str	r3, [r7, #16]
   return(result);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027ae:	bf00      	nop
 80027b0:	3754      	adds	r7, #84	; 0x54
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fecb 	bl	8002570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b21      	cmp	r3, #33	; 0x21
 80027f4:	d13e      	bne.n	8002874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	d114      	bne.n	800282a <UART_Transmit_IT+0x48>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d110      	bne.n	800282a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	1c9a      	adds	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]
 8002828:	e008      	b.n	800283c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6211      	str	r1, [r2, #32]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800286e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002898:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe5a 	bl	800255c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b08c      	sub	sp, #48	; 0x30
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b22      	cmp	r3, #34	; 0x22
 80028c4:	f040 80ab 	bne.w	8002a1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	d117      	bne.n	8002902 <UART_Receive_IT+0x50>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d113      	bne.n	8002902 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002900:	e026      	b.n	8002950 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d007      	beq.n	8002926 <UART_Receive_IT+0x74>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <UART_Receive_IT+0x82>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e008      	b.n	8002946 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002940:	b2da      	uxtb	r2, r3
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4619      	mov	r1, r3
 800295e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002960:	2b00      	cmp	r3, #0
 8002962:	d15a      	bne.n	8002a1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0220 	bic.w	r2, r2, #32
 8002972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d135      	bne.n	8002a10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	330c      	adds	r3, #12
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f023 0310 	bic.w	r3, r3, #16
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ca:	623a      	str	r2, [r7, #32]
 80029cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e5      	bne.n	80029aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d10a      	bne.n	8002a02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fdbb 	bl	8002584 <HAL_UARTEx_RxEventCallback>
 8002a0e:	e002      	b.n	8002a16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd fe61 	bl	80006d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e002      	b.n	8002a20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b0c0      	sub	sp, #256	; 0x100
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	ea40 0301 	orr.w	r3, r0, r1
 8002a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a80:	f021 010c 	bic.w	r1, r1, #12
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	6999      	ldr	r1, [r3, #24]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	ea40 0301 	orr.w	r3, r0, r1
 8002aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b8f      	ldr	r3, [pc, #572]	; (8002cf4 <UART_SetConfig+0x2cc>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d005      	beq.n	8002ac8 <UART_SetConfig+0xa0>
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <UART_SetConfig+0x2d0>)
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d104      	bne.n	8002ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac8:	f7ff f996 	bl	8001df8 <HAL_RCC_GetPCLK2Freq>
 8002acc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ad0:	e003      	b.n	8002ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ad2:	f7ff f97d 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae4:	f040 810c 	bne.w	8002d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002afa:	4622      	mov	r2, r4
 8002afc:	462b      	mov	r3, r5
 8002afe:	1891      	adds	r1, r2, r2
 8002b00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b02:	415b      	adcs	r3, r3
 8002b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	eb12 0801 	adds.w	r8, r2, r1
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb43 0901 	adc.w	r9, r3, r1
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	eb18 0303 	adds.w	r3, r8, r3
 8002b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b38:	462b      	mov	r3, r5
 8002b3a:	eb49 0303 	adc.w	r3, r9, r3
 8002b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b56:	460b      	mov	r3, r1
 8002b58:	18db      	adds	r3, r3, r3
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	eb42 0303 	adc.w	r3, r2, r3
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
 8002b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b6c:	f7fd fb90 	bl	8000290 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002b76:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	011c      	lsls	r4, r3, #4
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	469b      	mov	fp, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002be4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bec:	460b      	mov	r3, r1
 8002bee:	18db      	adds	r3, r3, r3
 8002bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	eb42 0303 	adc.w	r3, r2, r3
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c02:	f7fd fb45 	bl	8000290 <__aeabi_uldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2264      	movs	r2, #100	; 0x64
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	1acb      	subs	r3, r1, r3
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002c24:	fba3 2302 	umull	r2, r3, r3, r2
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c30:	441c      	add	r4, r3
 8002c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	1891      	adds	r1, r2, r2
 8002c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c54:	4641      	mov	r1, r8
 8002c56:	1851      	adds	r1, r2, r1
 8002c58:	6339      	str	r1, [r7, #48]	; 0x30
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	414b      	adcs	r3, r1
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c6c:	4659      	mov	r1, fp
 8002c6e:	00cb      	lsls	r3, r1, #3
 8002c70:	4651      	mov	r1, sl
 8002c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c76:	4651      	mov	r1, sl
 8002c78:	00ca      	lsls	r2, r1, #3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4642      	mov	r2, r8
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c88:	464b      	mov	r3, r9
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ca8:	460b      	mov	r3, r1
 8002caa:	18db      	adds	r3, r3, r3
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cae:	4613      	mov	r3, r2
 8002cb0:	eb42 0303 	adc.w	r3, r2, r3
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cbe:	f7fd fae7 	bl	8000290 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2164      	movs	r1, #100	; 0x64
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3332      	adds	r3, #50	; 0x32
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	f003 0207 	and.w	r2, r3, #7
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4422      	add	r2, r4
 8002cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf0:	e105      	b.n	8002efe <UART_SetConfig+0x4d6>
 8002cf2:	bf00      	nop
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d12:	4642      	mov	r2, r8
 8002d14:	464b      	mov	r3, r9
 8002d16:	1891      	adds	r1, r2, r2
 8002d18:	6239      	str	r1, [r7, #32]
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d22:	4641      	mov	r1, r8
 8002d24:	1854      	adds	r4, r2, r1
 8002d26:	4649      	mov	r1, r9
 8002d28:	eb43 0501 	adc.w	r5, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	00eb      	lsls	r3, r5, #3
 8002d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3a:	00e2      	lsls	r2, r4, #3
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d48:	464b      	mov	r3, r9
 8002d4a:	eb45 0303 	adc.w	r3, r5, r3
 8002d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d6e:	4629      	mov	r1, r5
 8002d70:	008b      	lsls	r3, r1, #2
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d78:	4621      	mov	r1, r4
 8002d7a:	008a      	lsls	r2, r1, #2
 8002d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d80:	f7fd fa86 	bl	8000290 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011c      	lsls	r4, r3, #4
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	61b9      	str	r1, [r7, #24]
 8002dac:	415b      	adcs	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6139      	str	r1, [r7, #16]
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	008b      	lsls	r3, r1, #2
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e16:	4641      	mov	r1, r8
 8002e18:	008a      	lsls	r2, r1, #2
 8002e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e1e:	f7fd fa37 	bl	8000290 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	; 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	3332      	adds	r3, #50	; 0x32
 8002e3a:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e46:	441c      	add	r4, r3
 8002e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e50:	677a      	str	r2, [r7, #116]	; 0x74
 8002e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e56:	4642      	mov	r2, r8
 8002e58:	464b      	mov	r3, r9
 8002e5a:	1891      	adds	r1, r2, r2
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	415b      	adcs	r3, r3
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e66:	4641      	mov	r1, r8
 8002e68:	1851      	adds	r1, r2, r1
 8002e6a:	6039      	str	r1, [r7, #0]
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	414b      	adcs	r3, r1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e7e:	4659      	mov	r1, fp
 8002e80:	00cb      	lsls	r3, r1, #3
 8002e82:	4651      	mov	r1, sl
 8002e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e88:	4651      	mov	r1, sl
 8002e8a:	00ca      	lsls	r2, r1, #3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4603      	mov	r3, r0
 8002e92:	4642      	mov	r2, r8
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8002eac:	667a      	str	r2, [r7, #100]	; 0x64
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eba:	4649      	mov	r1, r9
 8002ebc:	008b      	lsls	r3, r1, #2
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	008a      	lsls	r2, r1, #2
 8002ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ecc:	f7fd f9e0 	bl	8000290 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4422      	add	r2, r4
 8002efc:	609a      	str	r2, [r3, #8]
}
 8002efe:	bf00      	nop
 8002f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f04:	46bd      	mov	sp, r7
 8002f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0a:	bf00      	nop
 8002f0c:	51eb851f 	.word	0x51eb851f

08002f10 <update_crc_16>:
 *
 * The function update_crc_16() calculates a new CRC-16 value based on the
 * previous value of the CRC and the next byte of data to be checked.
 */

uint16_t update_crc_16( uint16_t crc, unsigned char c ) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	80fb      	strh	r3, [r7, #6]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	717b      	strb	r3, [r7, #5]

	uint16_t tmp;
	uint16_t short_c;

	short_c = 0x00ff & (uint16_t) c;
 8002f20:	797b      	ldrb	r3, [r7, #5]
 8002f22:	81fb      	strh	r3, [r7, #14]

	if ( ! crc_tab16_init ) init_crc16_tab();
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <update_crc_16+0x4c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	f083 0301 	eor.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <update_crc_16+0x26>
 8002f32:	f000 f817 	bl	8002f64 <init_crc16_tab>

	tmp =  crc       ^ short_c;
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	89fb      	ldrh	r3, [r7, #14]
 8002f3a:	4053      	eors	r3, r2
 8002f3c:	81bb      	strh	r3, [r7, #12]
	crc = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	89bb      	ldrh	r3, [r7, #12]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4905      	ldr	r1, [pc, #20]	; (8002f60 <update_crc_16+0x50>)
 8002f4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f4e:	4053      	eors	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]

	return crc;
 8002f52:	88fb      	ldrh	r3, [r7, #6]

}  /* update_crc_16 */
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000458 	.word	0x20000458
 8002f60:	2000045c 	.word	0x2000045c

08002f64 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	80fb      	strh	r3, [r7, #6]
 8002f6e:	e029      	b.n	8002fc4 <init_crc16_tab+0x60>

		crc = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	807b      	strh	r3, [r7, #2]
		c   = i;
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	80bb      	strh	r3, [r7, #4]
 8002f7c:	e017      	b.n	8002fae <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	883b      	ldrh	r3, [r7, #0]
 8002f82:	4053      	eors	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <init_crc16_tab+0x38>
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <init_crc16_tab+0x78>)
 8002f96:	4053      	eors	r3, r2
 8002f98:	807b      	strh	r3, [r7, #2]
 8002f9a:	e002      	b.n	8002fa2 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8002fa2:	883b      	ldrh	r3, [r7, #0]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8002fa8:	88bb      	ldrh	r3, [r7, #4]
 8002faa:	3301      	adds	r3, #1
 8002fac:	80bb      	strh	r3, [r7, #4]
 8002fae:	88bb      	ldrh	r3, [r7, #4]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d9e4      	bls.n	8002f7e <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	490a      	ldr	r1, [pc, #40]	; (8002fe0 <init_crc16_tab+0x7c>)
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	80fb      	strh	r3, [r7, #6]
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d9d2      	bls.n	8002f70 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <init_crc16_tab+0x80>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	ffffa001 	.word	0xffffa001
 8002fe0:	2000045c 	.word	0x2000045c
 8002fe4:	20000458 	.word	0x20000458

08002fe8 <update_crc_32>:
 *
 * The function update_crc_32() calculates a new CRC-32 value based on the
 * previous value of the CRC and the next byte of the data to be checked.
 */

uint32_t update_crc_32( uint32_t crc, unsigned char c ) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]

	uint32_t tmp;
	uint32_t long_c;

	long_c = 0x000000ffL & (uint32_t) c;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	60fb      	str	r3, [r7, #12]

	if ( ! crc_tab32_init ) init_crc32_tab();
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <update_crc_32+0x48>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	f083 0301 	eor.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <update_crc_32+0x22>
 8003006:	f000 f817 	bl	8003038 <init_crc32_tab>

	tmp = crc ^ long_c;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4053      	eors	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]
	crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0a1a      	lsrs	r2, r3, #8
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4906      	ldr	r1, [pc, #24]	; (8003034 <update_crc_32+0x4c>)
 800301c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003020:	4053      	eors	r3, r2
 8003022:	607b      	str	r3, [r7, #4]

	return crc & 0xffffffffL;;
 8003024:	687b      	ldr	r3, [r7, #4]

}  /* update_crc_32 */
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000065c 	.word	0x2000065c
 8003034:	20000660 	.word	0x20000660

08003038 <init_crc32_tab>:
 * For optimal speed, the CRC32 calculation uses a table with pre-calculated
 * bit patterns which are used in the XOR operations in the program. This table
 * is generated once, the first time the CRC update routine is called.
 */

static void init_crc32_tab( void ) {
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0

	uint32_t i;
	uint32_t j;
	uint32_t crc;

	for (i=0; i<256; i++) {
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	e020      	b.n	8003086 <init_crc32_tab+0x4e>

		crc = i;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	607b      	str	r3, [r7, #4]

		for (j=0; j<8; j++) {
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e010      	b.n	8003070 <init_crc32_tab+0x38>

			if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ CRC_POLY_32;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <init_crc32_tab+0x2c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	085a      	lsrs	r2, r3, #1
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <init_crc32_tab+0x68>)
 800305e:	4053      	eors	r3, r2
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	e002      	b.n	800306a <init_crc32_tab+0x32>
			else                     crc =   crc >> 1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	607b      	str	r3, [r7, #4]
		for (j=0; j<8; j++) {
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3301      	adds	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b07      	cmp	r3, #7
 8003074:	d9eb      	bls.n	800304e <init_crc32_tab+0x16>
		}

		crc_tab32[i] = crc;
 8003076:	490b      	ldr	r1, [pc, #44]	; (80030a4 <init_crc32_tab+0x6c>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<256; i++) {
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2bff      	cmp	r3, #255	; 0xff
 800308a:	d9db      	bls.n	8003044 <init_crc32_tab+0xc>
	}

	crc_tab32_init = true;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <init_crc32_tab+0x70>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]

}  /* init_crc32_tab */
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	edb88320 	.word	0xedb88320
 80030a4:	20000660 	.word	0x20000660
 80030a8:	2000065c 	.word	0x2000065c

080030ac <update_crc_8>:
 * Given a databyte and the previous value of the CRC value, the function
 * update_crc_8() calculates and returns the new actual CRC value of the data
 * comming in.
 */

uint8_t update_crc_8( unsigned char crc, unsigned char val ) {
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	460a      	mov	r2, r1
 80030b6:	71fb      	strb	r3, [r7, #7]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71bb      	strb	r3, [r7, #6]

	return crc_8_table[val ^ crc];
 80030bc:	79ba      	ldrb	r2, [r7, #6]
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4053      	eors	r3, r2
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <update_crc_8+0x2c>)
 80030c8:	5c9b      	ldrb	r3, [r3, r2]

}  /* update_crc_8 */
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	2000000c 	.word	0x2000000c

080030dc <str2hex>:

uint8_t cl_buf[255];
uint8_t cl_pointer = 0;
uint8_t cl_flag = 0;

static uint8_t str2hex(char *str){
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++){
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e047      	b.n	800317e <str2hex+0xa2>
		uint8_t temp_data;
		if(str[i] >= '0' && str[i] <= '9'){
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b2f      	cmp	r3, #47	; 0x2f
 80030f8:	d90c      	bls.n	8003114 <str2hex+0x38>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b39      	cmp	r3, #57	; 0x39
 8003104:	d806      	bhi.n	8003114 <str2hex+0x38>
			temp_data = str[i] - '0';
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	3b30      	subs	r3, #48	; 0x30
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	e024      	b.n	800315e <str2hex+0x82>
		} else if(str[i] >= 'A' && str[i] <= 'F'){
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d90c      	bls.n	800313a <str2hex+0x5e>
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b46      	cmp	r3, #70	; 0x46
 800312a:	d806      	bhi.n	800313a <str2hex+0x5e>
			temp_data = str[i] - 55;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3b37      	subs	r3, #55	; 0x37
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e011      	b.n	800315e <str2hex+0x82>
		} else if(str[i] >= 'a' && str[i] <= 'f'){
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b60      	cmp	r3, #96	; 0x60
 8003144:	d90b      	bls.n	800315e <str2hex+0x82>
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b66      	cmp	r3, #102	; 0x66
 8003150:	d805      	bhi.n	800315e <str2hex+0x82>
			temp_data = str[i] - 87;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	3b57      	subs	r3, #87	; 0x57
 800315c:	73fb      	strb	r3, [r7, #15]
		}
		result |= temp_data << ((1 - i) * 4);
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f1c3 0301 	rsb	r3, r3, #1
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	b25a      	sxtb	r2, r3
 800316e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003172:	4313      	orrs	r3, r2
 8003174:	b25b      	sxtb	r3, r3
 8003176:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++){
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3301      	adds	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b01      	cmp	r3, #1
 8003182:	ddb4      	ble.n	80030ee <str2hex+0x12>
	}
	return result;
 8003184:	7dfb      	ldrb	r3, [r7, #23]
}
 8003186:	4618      	mov	r0, r3
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <COMMAND_LINE_Handle>:

void COMMAND_LINE_Init(){

}

void COMMAND_LINE_Handle(){
 8003194:	b580      	push	{r7, lr}
 8003196:	b0d6      	sub	sp, #344	; 0x158
 8003198:	af00      	add	r7, sp, #0
	if(cl_flag){
 800319a:	4b70      	ldr	r3, [pc, #448]	; (800335c <COMMAND_LINE_Handle+0x1c8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80d7 	beq.w	8003352 <COMMAND_LINE_Handle+0x1be>
		char *arg_list[10];
		uint8_t arg_num = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

		char *temp_token = strtok((char *)cl_buf, " ");
 80031aa:	496d      	ldr	r1, [pc, #436]	; (8003360 <COMMAND_LINE_Handle+0x1cc>)
 80031ac:	486d      	ldr	r0, [pc, #436]	; (8003364 <COMMAND_LINE_Handle+0x1d0>)
 80031ae:	f000 fdeb 	bl	8003d88 <strtok>
 80031b2:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		while(temp_token != NULL){
 80031b6:	e013      	b.n	80031e0 <COMMAND_LINE_Handle+0x4c>
			arg_list[arg_num++] = temp_token;
 80031b8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	f887 2157 	strb.w	r2, [r7, #343]	; 0x157
 80031c2:	4619      	mov	r1, r3
 80031c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031c8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80031cc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80031d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			temp_token = strtok(NULL, " ");
 80031d4:	4962      	ldr	r1, [pc, #392]	; (8003360 <COMMAND_LINE_Handle+0x1cc>)
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 fdd6 	bl	8003d88 <strtok>
 80031dc:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		while(temp_token != NULL){
 80031e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e7      	bne.n	80031b8 <COMMAND_LINE_Handle+0x24>
		}

		if(strstr(arg_list[0], "CRC")){
 80031e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80031ec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	495d      	ldr	r1, [pc, #372]	; (8003368 <COMMAND_LINE_Handle+0x1d4>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fdb1 	bl	8003d5c <strstr>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d06c      	beq.n	80032da <COMMAND_LINE_Handle+0x146>
			if(strstr(arg_list[1], "8") || strstr(arg_list[1], "16") || strstr(arg_list[1], "32")){
 8003200:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003204:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2138      	movs	r1, #56	; 0x38
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fd98 	bl	8003d42 <strchr>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d117      	bne.n	8003248 <COMMAND_LINE_Handle+0xb4>
 8003218:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800321c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4952      	ldr	r1, [pc, #328]	; (800336c <COMMAND_LINE_Handle+0x1d8>)
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fd99 	bl	8003d5c <strstr>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <COMMAND_LINE_Handle+0xb4>
 8003230:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003234:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	494d      	ldr	r1, [pc, #308]	; (8003370 <COMMAND_LINE_Handle+0x1dc>)
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd8d 	bl	8003d5c <strstr>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d023      	beq.n	8003290 <COMMAND_LINE_Handle+0xfc>
				FRAME_SYNC_DATA_t temp_data = {atoi(arg_list[1]) / 8};
 8003248:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800324c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003250:	4618      	mov	r0, r3
 8003252:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003256:	461a      	mov	r2, r3
 8003258:	2100      	movs	r1, #0
 800325a:	f000 fd3b 	bl	8003cd4 <memset>
 800325e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003262:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fcf7 	bl	8003c5c <atoi>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	da00      	bge.n	8003276 <COMMAND_LINE_Handle+0xe2>
 8003274:	3307      	adds	r3, #7
 8003276:	10db      	asrs	r3, r3, #3
 8003278:	b2da      	uxtb	r2, r3
 800327a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800327e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003282:	701a      	strb	r2, [r3, #0]
				FRAME_SYNC_Change_Setting(&temp_data);
 8003284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f9b9 	bl	8003600 <FRAME_SYNC_Change_Setting>
			if(strstr(arg_list[1], "8") || strstr(arg_list[1], "16") || strstr(arg_list[1], "32")){
 800328e:	e05a      	b.n	8003346 <COMMAND_LINE_Handle+0x1b2>
			} else if(strstr(arg_list[1], "?")){
 8003290:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003294:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	213f      	movs	r1, #63	; 0x3f
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fd50 	bl	8003d42 <strchr>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d04e      	beq.n	8003346 <COMMAND_LINE_Handle+0x1b2>
				uint8_t temp_str[8];
				sprintf((char *)temp_str, "CRC-%d\n", FRAME_SYNC_CRC_Type() * 8);
 80032a8:	f000 f99e 	bl	80035e8 <FRAME_SYNC_CRC_Type>
 80032ac:	4603      	mov	r3, r0
 80032ae:	00da      	lsls	r2, r3, #3
 80032b0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80032b4:	492f      	ldr	r1, [pc, #188]	; (8003374 <COMMAND_LINE_Handle+0x1e0>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fd14 	bl	8003ce4 <siprintf>
				HAL_UART_Transmit(&huart6, temp_str, strlen((char *)temp_str), 1000);
 80032bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fc ff8d 	bl	80001e0 <strlen>
 80032c6:	4603      	mov	r3, r0
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80032ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d2:	4829      	ldr	r0, [pc, #164]	; (8003378 <COMMAND_LINE_Handle+0x1e4>)
 80032d4:	f7fe fdf1 	bl	8001eba <HAL_UART_Transmit>
 80032d8:	e035      	b.n	8003346 <COMMAND_LINE_Handle+0x1b2>
			}
		} else if(strstr(arg_list[0], "DATA") != NULL){
 80032da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80032de:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4925      	ldr	r1, [pc, #148]	; (800337c <COMMAND_LINE_Handle+0x1e8>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fd38 	bl	8003d5c <strstr>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d029      	beq.n	8003346 <COMMAND_LINE_Handle+0x1b2>
			tx_frame_len = arg_num - 1;
 80032f2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <COMMAND_LINE_Handle+0x1ec>)
 80032fc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++){
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003304:	e018      	b.n	8003338 <COMMAND_LINE_Handle+0x1a4>
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 8003306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003310:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fedf 	bl	80030dc <str2hex>
 800331e:	4603      	mov	r3, r0
 8003320:	4619      	mov	r1, r3
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <COMMAND_LINE_Handle+0x1f0>)
 8003324:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++){
 800332e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003332:	3301      	adds	r3, #1
 8003334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003338:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800333c:	3b01      	subs	r3, #1
 800333e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003342:	429a      	cmp	r2, r3
 8003344:	dbdf      	blt.n	8003306 <COMMAND_LINE_Handle+0x172>
			}
		}

		cl_pointer = 0;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <COMMAND_LINE_Handle+0x1f4>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
		cl_flag = 0;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <COMMAND_LINE_Handle+0x1c8>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
	}
}
 8003352:	bf00      	nop
 8003354:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000b60 	.word	0x20000b60
 8003360:	080053a0 	.word	0x080053a0
 8003364:	20000a60 	.word	0x20000a60
 8003368:	080053a4 	.word	0x080053a4
 800336c:	080053a8 	.word	0x080053a8
 8003370:	080053ac 	.word	0x080053ac
 8003374:	080053b0 	.word	0x080053b0
 8003378:	200002ec 	.word	0x200002ec
 800337c:	080053b8 	.word	0x080053b8
 8003380:	2000044f 	.word	0x2000044f
 8003384:	20000350 	.word	0x20000350
 8003388:	20000b5f 	.word	0x20000b5f

0800338c <COMMAND_LINE_Receive>:

void COMMAND_LINE_Receive(uint8_t rx_data){
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	if(rx_data != '\n'){
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	2b0a      	cmp	r3, #10
 800339a:	d00a      	beq.n	80033b2 <COMMAND_LINE_Receive+0x26>
		cl_buf[cl_pointer++] = rx_data;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <COMMAND_LINE_Receive+0x44>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	b2d1      	uxtb	r1, r2
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <COMMAND_LINE_Receive+0x44>)
 80033a6:	7011      	strb	r1, [r2, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <COMMAND_LINE_Receive+0x48>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	5453      	strb	r3, [r2, r1]
	} else{
		cl_buf[cl_pointer] = '\0';
		cl_flag = 1;
	}
}
 80033b0:	e008      	b.n	80033c4 <COMMAND_LINE_Receive+0x38>
		cl_buf[cl_pointer] = '\0';
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <COMMAND_LINE_Receive+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <COMMAND_LINE_Receive+0x48>)
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]
		cl_flag = 1;
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <COMMAND_LINE_Receive+0x4c>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	20000b5f 	.word	0x20000b5f
 80033d4:	20000a60 	.word	0x20000a60
 80033d8:	20000b60 	.word	0x20000b60

080033dc <Rx_Reset>:

extern UART_HandleTypeDef huart;

FRAME_SYNC_DATA_t FS_Data = {CRC_8};

static void Rx_Reset(){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0c8      	sub	sp, #288	; 0x120
 80033e0:	af00      	add	r7, sp, #0
	FRAME_SYNC_DATA_t temp_data = {FS_Data.crc_type};
 80033e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80033e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80033f0:	461a      	mov	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f000 fc6e 	bl	8003cd4 <memset>
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <Rx_Reset+0x4c>)
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003400:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003404:	701a      	strb	r2, [r3, #0]
	FS_Data = temp_data;
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <Rx_Reset+0x4c>)
 8003408:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800340c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003418:	461a      	mov	r2, r3
 800341a:	f000 fc4d 	bl	8003cb8 <memcpy>
}
 800341e:	bf00      	nop
 8003420:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	2000010c 	.word	0x2000010c

0800342c <CRC_Update>:

static void CRC_Update(uint32_t *crc, uint8_t data){
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
	switch(FS_Data.crc_type){
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <CRC_Update+0x78>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d020      	beq.n	8003482 <CRC_Update+0x56>
 8003440:	2b04      	cmp	r3, #4
 8003442:	dc29      	bgt.n	8003498 <CRC_Update+0x6c>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <CRC_Update+0x22>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d00d      	beq.n	8003468 <CRC_Update+0x3c>
			break;
		case CRC_32:
			*crc = update_crc_32(*crc, data);
			break;
		default:
			break;
 800344c:	e024      	b.n	8003498 <CRC_Update+0x6c>
			*crc = update_crc_8((uint8_t)*crc, data);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fe27 	bl	80030ac <update_crc_8>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	601a      	str	r2, [r3, #0]
			break;
 8003466:	e018      	b.n	800349a <CRC_Update+0x6e>
			*crc = update_crc_16((uint16_t)*crc, data);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fd4c 	bl	8002f10 <update_crc_16>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	601a      	str	r2, [r3, #0]
			break;
 8003480:	e00b      	b.n	800349a <CRC_Update+0x6e>
			*crc = update_crc_32(*crc, data);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fdac 	bl	8002fe8 <update_crc_32>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
			break;
 8003496:	e000      	b.n	800349a <CRC_Update+0x6e>
			break;
 8003498:	bf00      	nop
	}
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2000010c 	.word	0x2000010c

080034a8 <Stuffed_Transmit>:

static void Stuffed_Transmit(uint8_t tx_data){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
	if(FS_Data.is_using_tx_stuff_byte && tx_data == DLE){
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <Stuffed_Transmit+0x4c>)
 80034b4:	7b1b      	ldrb	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <Stuffed_Transmit+0x2c>
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d109      	bne.n	80034d4 <Stuffed_Transmit+0x2c>
		CRC_Update(&FS_Data.tx_checksum, DLE);
 80034c0:	2110      	movs	r1, #16
 80034c2:	480d      	ldr	r0, [pc, #52]	; (80034f8 <Stuffed_Transmit+0x50>)
 80034c4:	f7ff ffb2 	bl	800342c <CRC_Update>
		HAL_UART_Transmit(&huart, &tx_data, 1, 100);
 80034c8:	1df9      	adds	r1, r7, #7
 80034ca:	2364      	movs	r3, #100	; 0x64
 80034cc:	2201      	movs	r2, #1
 80034ce:	480b      	ldr	r0, [pc, #44]	; (80034fc <Stuffed_Transmit+0x54>)
 80034d0:	f7fe fcf3 	bl	8001eba <HAL_UART_Transmit>
	}
	CRC_Update(&FS_Data.tx_checksum, tx_data);
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4807      	ldr	r0, [pc, #28]	; (80034f8 <Stuffed_Transmit+0x50>)
 80034da:	f7ff ffa7 	bl	800342c <CRC_Update>
	HAL_UART_Transmit(&huart, &tx_data, 1, 100);
 80034de:	1df9      	adds	r1, r7, #7
 80034e0:	2364      	movs	r3, #100	; 0x64
 80034e2:	2201      	movs	r2, #1
 80034e4:	4805      	ldr	r0, [pc, #20]	; (80034fc <Stuffed_Transmit+0x54>)
 80034e6:	f7fe fce8 	bl	8001eba <HAL_UART_Transmit>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000010c 	.word	0x2000010c
 80034f8:	20000110 	.word	0x20000110
 80034fc:	200002a8 	.word	0x200002a8

08003500 <Check_Frame>:

static void Check_Frame(uint8_t *p_frame, uint32_t size){
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size; i++){
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e012      	b.n	8003536 <Check_Frame+0x36>
		if(p_frame[i] < 0x20 || p_frame[i] > 0x7E){
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b1f      	cmp	r3, #31
 800351a:	d905      	bls.n	8003528 <Check_Frame+0x28>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b7e      	cmp	r3, #126	; 0x7e
 8003526:	d903      	bls.n	8003530 <Check_Frame+0x30>
			FS_Data.is_using_tx_stuff_byte = 1;
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <Check_Frame+0x48>)
 800352a:	2201      	movs	r2, #1
 800352c:	731a      	strb	r2, [r3, #12]
			return;
 800352e:	e006      	b.n	800353e <Check_Frame+0x3e>
	for(int i = 0; i < size; i++){
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3301      	adds	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d8e8      	bhi.n	8003510 <Check_Frame+0x10>
		}
	}
}
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	2000010c 	.word	0x2000010c

0800354c <CRC_Transmit>:

static void CRC_Transmit(uint32_t *crc){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	switch(FS_Data.crc_type){
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <CRC_Transmit+0x94>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d01b      	beq.n	8003594 <CRC_Transmit+0x48>
 800355c:	2b04      	cmp	r3, #4
 800355e:	dc3a      	bgt.n	80035d6 <CRC_Transmit+0x8a>
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <CRC_Transmit+0x1e>
 8003564:	2b02      	cmp	r3, #2
 8003566:	d007      	beq.n	8003578 <CRC_Transmit+0x2c>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 1, 1, 100);
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 2, 1, 100);
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 3, 1, 100);
			break;
		default:
			break;
 8003568:	e035      	b.n	80035d6 <CRC_Transmit+0x8a>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 0, 1, 100);
 800356a:	2364      	movs	r3, #100	; 0x64
 800356c:	2201      	movs	r2, #1
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	481c      	ldr	r0, [pc, #112]	; (80035e4 <CRC_Transmit+0x98>)
 8003572:	f7fe fca2 	bl	8001eba <HAL_UART_Transmit>
			break;
 8003576:	e02f      	b.n	80035d8 <CRC_Transmit+0x8c>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 0, 1, 100);
 8003578:	2364      	movs	r3, #100	; 0x64
 800357a:	2201      	movs	r2, #1
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4819      	ldr	r0, [pc, #100]	; (80035e4 <CRC_Transmit+0x98>)
 8003580:	f7fe fc9b 	bl	8001eba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 1, 1, 100);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	2364      	movs	r3, #100	; 0x64
 800358a:	2201      	movs	r2, #1
 800358c:	4815      	ldr	r0, [pc, #84]	; (80035e4 <CRC_Transmit+0x98>)
 800358e:	f7fe fc94 	bl	8001eba <HAL_UART_Transmit>
			break;
 8003592:	e021      	b.n	80035d8 <CRC_Transmit+0x8c>
			*crc = ~(*crc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	43da      	mvns	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 0, 1, 100);
 800359e:	2364      	movs	r3, #100	; 0x64
 80035a0:	2201      	movs	r2, #1
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	480f      	ldr	r0, [pc, #60]	; (80035e4 <CRC_Transmit+0x98>)
 80035a6:	f7fe fc88 	bl	8001eba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 1, 1, 100);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	2364      	movs	r3, #100	; 0x64
 80035b0:	2201      	movs	r2, #1
 80035b2:	480c      	ldr	r0, [pc, #48]	; (80035e4 <CRC_Transmit+0x98>)
 80035b4:	f7fe fc81 	bl	8001eba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 2, 1, 100);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1c99      	adds	r1, r3, #2
 80035bc:	2364      	movs	r3, #100	; 0x64
 80035be:	2201      	movs	r2, #1
 80035c0:	4808      	ldr	r0, [pc, #32]	; (80035e4 <CRC_Transmit+0x98>)
 80035c2:	f7fe fc7a 	bl	8001eba <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)crc + 3, 1, 100);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1cd9      	adds	r1, r3, #3
 80035ca:	2364      	movs	r3, #100	; 0x64
 80035cc:	2201      	movs	r2, #1
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <CRC_Transmit+0x98>)
 80035d0:	f7fe fc73 	bl	8001eba <HAL_UART_Transmit>
			break;
 80035d4:	e000      	b.n	80035d8 <CRC_Transmit+0x8c>
			break;
 80035d6:	bf00      	nop
	}
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	2000010c 	.word	0x2000010c
 80035e4:	200002a8 	.word	0x200002a8

080035e8 <FRAME_SYNC_CRC_Type>:

void FRAME_SYNC_Init(){

}

uint8_t FRAME_SYNC_CRC_Type(){
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
	return FS_Data.crc_type;
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <FRAME_SYNC_CRC_Type+0x14>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000010c 	.word	0x2000010c

08003600 <FRAME_SYNC_Change_Setting>:

void FRAME_SYNC_Change_Setting(FRAME_SYNC_DATA_t *p_new_data){
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	FS_Data = *p_new_data;
 8003608:	4a06      	ldr	r2, [pc, #24]	; (8003624 <FRAME_SYNC_Change_Setting+0x24>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003614:	461a      	mov	r2, r3
 8003616:	f000 fb4f 	bl	8003cb8 <memcpy>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000010c 	.word	0x2000010c

08003628 <FRAME_SYNC_Transmit>:

void FRAME_SYNC_Transmit(uint8_t *tx_frame, uint8_t size){
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_data;
	if(FS_Data.crc_type == CRC_32){
 8003634:	4b35      	ldr	r3, [pc, #212]	; (800370c <FRAME_SYNC_Transmit+0xe4>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d104      	bne.n	8003646 <FRAME_SYNC_Transmit+0x1e>
		FS_Data.tx_checksum = 0xFFFFFFFF;
 800363c:	4b33      	ldr	r3, [pc, #204]	; (800370c <FRAME_SYNC_Transmit+0xe4>)
 800363e:	f04f 32ff 	mov.w	r2, #4294967295
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	e002      	b.n	800364c <FRAME_SYNC_Transmit+0x24>
	} else{
		FS_Data.tx_checksum = 0;
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <FRAME_SYNC_Transmit+0xe4>)
 8003648:	2200      	movs	r2, #0
 800364a:	605a      	str	r2, [r3, #4]
	}
	Check_Frame(tx_frame, size);
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff55 	bl	8003500 <Check_Frame>

	// Transmit STX
	if(FS_Data.is_using_tx_stuff_byte){
 8003656:	4b2d      	ldr	r3, [pc, #180]	; (800370c <FRAME_SYNC_Transmit+0xe4>)
 8003658:	7b1b      	ldrb	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <FRAME_SYNC_Transmit+0x50>
		temp_data = DLE;
 800365e:	2310      	movs	r3, #16
 8003660:	72fb      	strb	r3, [r7, #11]
		CRC_Update(&FS_Data.tx_checksum, DLE);
 8003662:	2110      	movs	r1, #16
 8003664:	482a      	ldr	r0, [pc, #168]	; (8003710 <FRAME_SYNC_Transmit+0xe8>)
 8003666:	f7ff fee1 	bl	800342c <CRC_Update>
		HAL_UART_Transmit(&huart2, &temp_data, 1, 100);
 800366a:	f107 010b 	add.w	r1, r7, #11
 800366e:	2364      	movs	r3, #100	; 0x64
 8003670:	2201      	movs	r2, #1
 8003672:	4828      	ldr	r0, [pc, #160]	; (8003714 <FRAME_SYNC_Transmit+0xec>)
 8003674:	f7fe fc21 	bl	8001eba <HAL_UART_Transmit>
	}
	CRC_Update(&FS_Data.tx_checksum, STX);
 8003678:	2102      	movs	r1, #2
 800367a:	4825      	ldr	r0, [pc, #148]	; (8003710 <FRAME_SYNC_Transmit+0xe8>)
 800367c:	f7ff fed6 	bl	800342c <CRC_Update>
	temp_data = STX;
 8003680:	2302      	movs	r3, #2
 8003682:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart2, &temp_data, 1, 100);
 8003684:	f107 010b 	add.w	r1, r7, #11
 8003688:	2364      	movs	r3, #100	; 0x64
 800368a:	2201      	movs	r2, #1
 800368c:	4821      	ldr	r0, [pc, #132]	; (8003714 <FRAME_SYNC_Transmit+0xec>)
 800368e:	f7fe fc14 	bl	8001eba <HAL_UART_Transmit>

	// Transmit data length
	Stuffed_Transmit(size);
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff07 	bl	80034a8 <Stuffed_Transmit>

	// Transmit data
	for(int i = 0; i < size; i++){
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e009      	b.n	80036b4 <FRAME_SYNC_Transmit+0x8c>
		Stuffed_Transmit(tx_frame[i]);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fefd 	bl	80034a8 <Stuffed_Transmit>
	for(int i = 0; i < size; i++){
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	dbf1      	blt.n	80036a0 <FRAME_SYNC_Transmit+0x78>
	}

	// Transmit ETX
	if(FS_Data.is_using_tx_stuff_byte){
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <FRAME_SYNC_Transmit+0xe4>)
 80036be:	7b1b      	ldrb	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <FRAME_SYNC_Transmit+0xb6>
		temp_data = DLE;
 80036c4:	2310      	movs	r3, #16
 80036c6:	72fb      	strb	r3, [r7, #11]
		CRC_Update(&FS_Data.tx_checksum, DLE);
 80036c8:	2110      	movs	r1, #16
 80036ca:	4811      	ldr	r0, [pc, #68]	; (8003710 <FRAME_SYNC_Transmit+0xe8>)
 80036cc:	f7ff feae 	bl	800342c <CRC_Update>
		HAL_UART_Transmit(&huart2, &temp_data, 1, 100);
 80036d0:	f107 010b 	add.w	r1, r7, #11
 80036d4:	2364      	movs	r3, #100	; 0x64
 80036d6:	2201      	movs	r2, #1
 80036d8:	480e      	ldr	r0, [pc, #56]	; (8003714 <FRAME_SYNC_Transmit+0xec>)
 80036da:	f7fe fbee 	bl	8001eba <HAL_UART_Transmit>
	}
	CRC_Update(&FS_Data.tx_checksum, ETX);
 80036de:	2103      	movs	r1, #3
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <FRAME_SYNC_Transmit+0xe8>)
 80036e2:	f7ff fea3 	bl	800342c <CRC_Update>
	temp_data = ETX;
 80036e6:	2303      	movs	r3, #3
 80036e8:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart2, &temp_data, 1, 100);
 80036ea:	f107 010b 	add.w	r1, r7, #11
 80036ee:	2364      	movs	r3, #100	; 0x64
 80036f0:	2201      	movs	r2, #1
 80036f2:	4808      	ldr	r0, [pc, #32]	; (8003714 <FRAME_SYNC_Transmit+0xec>)
 80036f4:	f7fe fbe1 	bl	8001eba <HAL_UART_Transmit>

	// Transmit crc
	CRC_Transmit(&FS_Data.tx_checksum);
 80036f8:	4805      	ldr	r0, [pc, #20]	; (8003710 <FRAME_SYNC_Transmit+0xe8>)
 80036fa:	f7ff ff27 	bl	800354c <CRC_Transmit>

	FS_Data.is_using_tx_stuff_byte = 0;
 80036fe:	4b03      	ldr	r3, [pc, #12]	; (800370c <FRAME_SYNC_Transmit+0xe4>)
 8003700:	2200      	movs	r2, #0
 8003702:	731a      	strb	r2, [r3, #12]
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	2000010c 	.word	0x2000010c
 8003710:	20000110 	.word	0x20000110
 8003714:	200002a8 	.word	0x200002a8

08003718 <FRAME_SYNC_Receive>:

void FRAME_SYNC_Receive(uint8_t rx_data){
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
	// Stuff byte handle
	if(rx_data == DLE){
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b10      	cmp	r3, #16
 8003726:	d127      	bne.n	8003778 <FRAME_SYNC_Receive+0x60>
		if(FS_Data.rx_state == SEARCHING_STX){
 8003728:	4b70      	ldr	r3, [pc, #448]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800372a:	7bdb      	ldrb	r3, [r3, #15]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <FRAME_SYNC_Receive+0x40>
			FS_Data.is_using_rx_stuff_byte = 1;
 8003730:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003732:	2201      	movs	r2, #1
 8003734:	735a      	strb	r2, [r3, #13]
			if(FS_Data.crc_type == CRC_32){
 8003736:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d104      	bne.n	8003748 <FRAME_SYNC_Receive+0x30>
				FS_Data.rx_checksum = 0xFFFFFFFF;
 800373e:	4b6b      	ldr	r3, [pc, #428]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	e002      	b.n	800374e <FRAME_SYNC_Receive+0x36>
			} else{
				FS_Data.rx_checksum = 0;
 8003748:	4b68      	ldr	r3, [pc, #416]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
			}
			CRC_Update(&FS_Data.rx_checksum, DLE);
 800374e:	2110      	movs	r1, #16
 8003750:	4867      	ldr	r0, [pc, #412]	; (80038f0 <FRAME_SYNC_Receive+0x1d8>)
 8003752:	f7ff fe6b 	bl	800342c <CRC_Update>
			return;
 8003756:	e0c6      	b.n	80038e6 <FRAME_SYNC_Receive+0x1ce>
		} else{
			if(FS_Data.is_using_rx_stuff_byte && FS_Data.num_dle_byte == 0){
 8003758:	4b64      	ldr	r3, [pc, #400]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800375a:	7b5b      	ldrb	r3, [r3, #13]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <FRAME_SYNC_Receive+0x60>
 8003760:	4b62      	ldr	r3, [pc, #392]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003762:	7b9b      	ldrb	r3, [r3, #14]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <FRAME_SYNC_Receive+0x60>
				CRC_Update(&FS_Data.rx_checksum, DLE);
 8003768:	2110      	movs	r1, #16
 800376a:	4861      	ldr	r0, [pc, #388]	; (80038f0 <FRAME_SYNC_Receive+0x1d8>)
 800376c:	f7ff fe5e 	bl	800342c <CRC_Update>
				FS_Data.num_dle_byte = 1;
 8003770:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003772:	2201      	movs	r2, #1
 8003774:	739a      	strb	r2, [r3, #14]
				return;
 8003776:	e0b6      	b.n	80038e6 <FRAME_SYNC_Receive+0x1ce>
			}
		}
	}
	FS_Data.num_dle_byte = 0;
 8003778:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800377a:	2200      	movs	r2, #0
 800377c:	739a      	strb	r2, [r3, #14]

	// Data handle
	switch(FS_Data.rx_state){
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003780:	7bdb      	ldrb	r3, [r3, #15]
 8003782:	2b04      	cmp	r3, #4
 8003784:	f200 80a4 	bhi.w	80038d0 <FRAME_SYNC_Receive+0x1b8>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <FRAME_SYNC_Receive+0x78>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a5 	.word	0x080037a5
 8003794:	080037d1 	.word	0x080037d1
 8003798:	080037eb 	.word	0x080037eb
 800379c:	08003827 	.word	0x08003827
 80037a0:	08003853 	.word	0x08003853
		case SEARCHING_STX:
			if(rx_data == STX){
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d108      	bne.n	80037bc <FRAME_SYNC_Receive+0xa4>
				CRC_Update(&FS_Data.rx_checksum, rx_data);
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4850      	ldr	r0, [pc, #320]	; (80038f0 <FRAME_SYNC_Receive+0x1d8>)
 80037b0:	f7ff fe3c 	bl	800342c <CRC_Update>
				FS_Data.rx_state = RECEIVING_NUM_DATA;
 80037b4:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	73da      	strb	r2, [r3, #15]
			} else{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
			}
			break;
 80037ba:	e08e      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
				Rx_Reset();
 80037bc:	f7ff fe0e 	bl	80033dc <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
 80037c0:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80037c2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80037c6:	4619      	mov	r1, r3
 80037c8:	484a      	ldr	r0, [pc, #296]	; (80038f4 <FRAME_SYNC_Receive+0x1dc>)
 80037ca:	f7fc ff59 	bl	8000680 <FRAME_SYNC_RxFailCallback>
			break;
 80037ce:	e084      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
		case RECEIVING_NUM_DATA:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4619      	mov	r1, r3
 80037d4:	4846      	ldr	r0, [pc, #280]	; (80038f0 <FRAME_SYNC_Receive+0x1d8>)
 80037d6:	f7ff fe29 	bl	800342c <CRC_Update>
			FS_Data.rx_length = rx_data;
 80037da:	4a44      	ldr	r2, [pc, #272]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
			FS_Data.rx_state = RECEIVING_DATA;
 80037e2:	4b42      	ldr	r3, [pc, #264]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80037e4:	2202      	movs	r2, #2
 80037e6:	73da      	strb	r2, [r3, #15]
			break;
 80037e8:	e077      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
		case RECEIVING_DATA:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4619      	mov	r1, r3
 80037ee:	4840      	ldr	r0, [pc, #256]	; (80038f0 <FRAME_SYNC_Receive+0x1d8>)
 80037f0:	f7ff fe1c 	bl	800342c <CRC_Update>
			FS_Data.rx_buf[FS_Data.rx_pointer++] = rx_data;
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80037f6:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	b2d1      	uxtb	r1, r2
 80037fe:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003800:	f882 110f 	strb.w	r1, [r2, #271]	; 0x10f
 8003804:	461a      	mov	r2, r3
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003808:	4413      	add	r3, r2
 800380a:	79fa      	ldrb	r2, [r7, #7]
 800380c:	741a      	strb	r2, [r3, #16]
			if(FS_Data.rx_pointer == FS_Data.rx_length){
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003810:	f893 210f 	ldrb.w	r2, [r3, #271]	; 0x10f
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003816:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800381a:	429a      	cmp	r2, r3
 800381c:	d15a      	bne.n	80038d4 <FRAME_SYNC_Receive+0x1bc>
				FS_Data.rx_state = RECEIVING_ETX;
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003820:	2203      	movs	r2, #3
 8003822:	73da      	strb	r2, [r3, #15]
			}
			break;
 8003824:	e056      	b.n	80038d4 <FRAME_SYNC_Receive+0x1bc>
		case RECEIVING_ETX:
			if(rx_data == ETX){
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d108      	bne.n	800383e <FRAME_SYNC_Receive+0x126>
				CRC_Update(&FS_Data.rx_checksum, rx_data);
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	4619      	mov	r1, r3
 8003830:	482f      	ldr	r0, [pc, #188]	; (80038f0 <FRAME_SYNC_Receive+0x1d8>)
 8003832:	f7ff fdfb 	bl	800342c <CRC_Update>
				FS_Data.rx_state = RECEIVING_CRC;
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003838:	2204      	movs	r2, #4
 800383a:	73da      	strb	r2, [r3, #15]
			} else{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
			}
			break;
 800383c:	e04d      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
				Rx_Reset();
 800383e:	f7ff fdcd 	bl	80033dc <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
 8003842:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003844:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003848:	4619      	mov	r1, r3
 800384a:	482a      	ldr	r0, [pc, #168]	; (80038f4 <FRAME_SYNC_Receive+0x1dc>)
 800384c:	f7fc ff18 	bl	8000680 <FRAME_SYNC_RxFailCallback>
			break;
 8003850:	e043      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
		case RECEIVING_CRC:
			FS_Data.rx_crc |= (uint32_t)rx_data << ((FS_Data.rx_num_crc_byte) * 8);
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003854:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003858:	79f9      	ldrb	r1, [r7, #7]
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800385c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	4313      	orrs	r3, r2
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800386a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
			FS_Data.rx_num_crc_byte++;
 800386e:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003870:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003874:	3301      	adds	r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800387a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
			if(FS_Data.rx_num_crc_byte == FS_Data.crc_type){
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003880:	f893 2111 	ldrb.w	r2, [r3, #273]	; 0x111
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d125      	bne.n	80038d8 <FRAME_SYNC_Receive+0x1c0>
				if(FS_Data.crc_type == CRC_32) FS_Data.rx_checksum = ~FS_Data.rx_checksum;
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d104      	bne.n	800389e <FRAME_SYNC_Receive+0x186>
 8003894:	4b15      	ldr	r3, [pc, #84]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	43db      	mvns	r3, r3
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 800389c:	6093      	str	r3, [r2, #8]
				if(FS_Data.rx_crc == FS_Data.rx_checksum){
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80038a0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <FRAME_SYNC_Receive+0x1a4>
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_buf, FS_Data.rx_length);
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80038ae:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80038b2:	4619      	mov	r1, r3
 80038b4:	480f      	ldr	r0, [pc, #60]	; (80038f4 <FRAME_SYNC_Receive+0x1dc>)
 80038b6:	f7fc fe85 	bl	80005c4 <FRAME_SYNC_RxCpltCallback>
 80038ba:	e006      	b.n	80038ca <FRAME_SYNC_Receive+0x1b2>
				} else{
					FRAME_SYNC_RxFailCallback(FS_Data.rx_buf, FS_Data.rx_length);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80038be:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80038c2:	4619      	mov	r1, r3
 80038c4:	480b      	ldr	r0, [pc, #44]	; (80038f4 <FRAME_SYNC_Receive+0x1dc>)
 80038c6:	f7fc fedb 	bl	8000680 <FRAME_SYNC_RxFailCallback>
				}
				Rx_Reset();
 80038ca:	f7ff fd87 	bl	80033dc <Rx_Reset>
			}
			break;
 80038ce:	e003      	b.n	80038d8 <FRAME_SYNC_Receive+0x1c0>
		default:
			break;
 80038d0:	bf00      	nop
 80038d2:	e002      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
			break;
 80038d4:	bf00      	nop
 80038d6:	e000      	b.n	80038da <FRAME_SYNC_Receive+0x1c2>
			break;
 80038d8:	bf00      	nop
	}

	FS_Data.receiving_timer = HAL_GetTick();
 80038da:	f7fd fae3 	bl	8000ea4 <HAL_GetTick>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a02      	ldr	r2, [pc, #8]	; (80038ec <FRAME_SYNC_Receive+0x1d4>)
 80038e2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

}
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000010c 	.word	0x2000010c
 80038f0:	20000114 	.word	0x20000114
 80038f4:	2000011c 	.word	0x2000011c

080038f8 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8b1b      	ldrh	r3, [r3, #24]
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f7fd fdfe 	bl	800150c <HAL_GPIO_ReadPin>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	789b      	ldrb	r3, [r3, #2]
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	429a      	cmp	r2, r3
 800391c:	d00a      	beq.n	8003934 <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 800392a:	f7fd fabb 	bl	8000ea4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <BUTTON_Handle+0x62>
 800393c:	f7fd fab2 	bl	8000ea4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b0e      	cmp	r3, #14
 800394a:	d906      	bls.n	800395a <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	789a      	ldrb	r2, [r3, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	429a      	cmp	r2, r3
 8003964:	d03c      	beq.n	80039e0 <BUTTON_Handle+0xe8>
		if(ButtonX->BTN_Current == !ButtonX->releasing_state){
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7c1b      	ldrb	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	429a      	cmp	r2, r3
 800397c:	d110      	bne.n	80039a0 <BUTTON_Handle+0xa8>
			if(__BUTTON_Pressing_Callback != NULL){
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <BUTTON_Handle+0x120>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <BUTTON_Handle+0x96>
				__BUTTON_Pressing_Callback(ButtonX);
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <BUTTON_Handle+0x120>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 8003994:	f7fd fa86 	bl	8000ea4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	e01b      	b.n	80039d8 <BUTTON_Handle+0xe0>
		}
		else{
			ButtonX->is_press = 0;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 80039a6:	f7fd fa7d 	bl	8000ea4 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b6:	d807      	bhi.n	80039c8 <BUTTON_Handle+0xd0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <BUTTON_Handle+0x124>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <BUTTON_Handle+0xd0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <BUTTON_Handle+0x124>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <BUTTON_Handle+0x128>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <BUTTON_Handle+0xe0>
				__BUTTON_Releasing_Callback(ButtonX);
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <BUTTON_Handle+0x128>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	791b      	ldrb	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <BUTTON_Handle+0x118>
 80039e8:	f7fd fa5c 	bl	8000ea4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80039f8:	d30a      	bcc.n	8003a10 <BUTTON_Handle+0x118>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <BUTTON_Handle+0x12c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <BUTTON_Handle+0x112>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <BUTTON_Handle+0x12c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	711a      	strb	r2, [r3, #4]
	}
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000b64 	.word	0x20000b64
 8003a1c:	20000b6c 	.word	0x20000b6c
 8003a20:	20000b68 	.word	0x20000b68
 8003a24:	20000b70 	.word	0x20000b70

08003a28 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t releasing_state){
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	460b      	mov	r3, r1
 8003a38:	80fb      	strh	r3, [r7, #6]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	717b      	strb	r3, [r7, #5]
	ButtonX->GPIOx = GPIOx;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	615a      	str	r2, [r3, #20]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	831a      	strh	r2, [r3, #24]
	ButtonX->releasing_state = releasing_state;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	797a      	ldrb	r2, [r7, #5]
 8003a4e:	741a      	strb	r2, [r3, #16]
	ButtonX->BTN_Current = releasing_state;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	797a      	ldrb	r2, [r7, #5]
 8003a54:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = releasing_state;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	797a      	ldrb	r2, [r7, #5]
 8003a5a:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = releasing_state;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	797a      	ldrb	r2, [r7, #5]
 8003a60:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	711a      	strb	r2, [r3, #4]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <BUTTON_Set_Callback_Function+0x34>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <BUTTON_Set_Callback_Function+0x38>)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <BUTTON_Set_Callback_Function+0x3c>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <BUTTON_Set_Callback_Function+0x40>)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6013      	str	r3, [r2, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000b64 	.word	0x20000b64
 8003ab4:	20000b68 	.word	0x20000b68
 8003ab8:	20000b6c 	.word	0x20000b6c
 8003abc:	20000b70 	.word	0x20000b70

08003ac0 <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_buffer, uint16_t p_max_length){
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	811a      	strh	r2, [r3, #8]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t p_data){
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	889b      	ldrh	r3, [r3, #4]
 8003b02:	3301      	adds	r3, #1
 8003b04:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	891b      	ldrh	r3, [r3, #8]
 8003b0a:	89fa      	ldrh	r2, [r7, #14]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d301      	bcc.n	8003b14 <RING_BUFFER_Push+0x22>
		t_next = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	81fb      	strh	r3, [r7, #14]

	if(t_next == p_ring_buffer->tail)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	88db      	ldrh	r3, [r3, #6]
 8003b18:	89fa      	ldrh	r2, [r7, #14]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d102      	bne.n	8003b24 <RING_BUFFER_Push+0x32>
		return -1;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	e00a      	b.n	8003b3a <RING_BUFFER_Push+0x48>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	8892      	ldrh	r2, [r2, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->head = t_next;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	89fa      	ldrh	r2, [r7, #14]
 8003b36:	809a      	strh	r2, [r3, #4]

	return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_data){
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	88da      	ldrh	r2, [r3, #6]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d102      	bne.n	8003b62 <RING_BUFFER_Pop+0x1c>
		return -1;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	e016      	b.n	8003b90 <RING_BUFFER_Pop+0x4a>

	t_next = p_ring_buffer->tail + 1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	88db      	ldrh	r3, [r3, #6]
 8003b66:	3301      	adds	r3, #1
 8003b68:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	891b      	ldrh	r3, [r3, #8]
 8003b6e:	89fa      	ldrh	r2, [r7, #14]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d301      	bcc.n	8003b78 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	88d2      	ldrh	r2, [r2, #6]
 8003b80:	4413      	add	r3, r2
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->tail = t_next;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	89fa      	ldrh	r2, [r7, #14]
 8003b8c:	80da      	strh	r2, [r3, #6]

	return 0;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
//	} else if(p_ring_buffer->head < p_ring_buffer->tail){
//		return p_ring_buffer->max_length - (p_ring_buffer->head - p_ring_buffer->tail);
//	} else if(p_ring_buffer->head == p_ring_buffer->tail){
//		return 0;
//	}
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	889a      	ldrh	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	88db      	ldrh	r3, [r3, #6]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	b29b      	uxth	r3, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <UART_Init>:
static uint8_t uart_buffer[UART_MAX_LEN];
RING_BUFFER_HandleTypeDef uart_ring_buffer;

extern UART_HandleTypeDef huart2;

void UART_Init(){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	RING_BUFFER_Init(&uart_ring_buffer, uart_buffer, UART_MAX_LEN);
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <UART_Init+0x14>)
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <UART_Init+0x18>)
 8003bce:	f7ff ff77 	bl	8003ac0 <RING_BUFFER_Init>
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000b74 	.word	0x20000b74
 8003bdc:	20000c74 	.word	0x20000c74

08003be0 <UART_Receive>:

void UART_Receive(uint8_t Rx_Buffer){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	RING_BUFFER_Push(&uart_ring_buffer, Rx_Buffer);
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	4619      	mov	r1, r3
 8003bee:	4803      	ldr	r0, [pc, #12]	; (8003bfc <UART_Receive+0x1c>)
 8003bf0:	f7ff ff7f 	bl	8003af2 <RING_BUFFER_Push>
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000c74 	.word	0x20000c74

08003c00 <UART_Handle>:

__weak void UART_Handle(){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
	if(UART_Available() != 0){
 8003c06:	f000 f81f 	bl	8003c48 <UART_Available>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <UART_Handle+0x20>
		uint8_t t_data = UART_Read();
 8003c10:	f000 f80a 	bl	8003c28 <UART_Read>
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Receive(t_data);
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fd7c 	bl	8003718 <FRAME_SYNC_Receive>
	}
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_Read>:

uint8_t UART_Read(){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	uint8_t t_data;
	RING_BUFFER_Pop(&uart_ring_buffer, &t_data);
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	4619      	mov	r1, r3
 8003c32:	4804      	ldr	r0, [pc, #16]	; (8003c44 <UART_Read+0x1c>)
 8003c34:	f7ff ff87 	bl	8003b46 <RING_BUFFER_Pop>
	return t_data;
 8003c38:	79fb      	ldrb	r3, [r7, #7]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000c74 	.word	0x20000c74

08003c48 <UART_Available>:

uint16_t UART_Available(){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	return RING_BUFFER_Available(&uart_ring_buffer);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <UART_Available+0x10>)
 8003c4e:	f7ff ffa5 	bl	8003b9c <RING_BUFFER_Available>
 8003c52:	4603      	mov	r3, r0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000c74 	.word	0x20000c74

08003c5c <atoi>:
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f000 b970 	b.w	8003f44 <strtol>

08003c64 <__errno>:
 8003c64:	4b01      	ldr	r3, [pc, #4]	; (8003c6c <__errno+0x8>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000228 	.word	0x20000228

08003c70 <__libc_init_array>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	4d0d      	ldr	r5, [pc, #52]	; (8003ca8 <__libc_init_array+0x38>)
 8003c74:	4c0d      	ldr	r4, [pc, #52]	; (8003cac <__libc_init_array+0x3c>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	42a6      	cmp	r6, r4
 8003c7e:	d109      	bne.n	8003c94 <__libc_init_array+0x24>
 8003c80:	4d0b      	ldr	r5, [pc, #44]	; (8003cb0 <__libc_init_array+0x40>)
 8003c82:	4c0c      	ldr	r4, [pc, #48]	; (8003cb4 <__libc_init_array+0x44>)
 8003c84:	f001 fb10 	bl	80052a8 <_init>
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	42a6      	cmp	r6, r4
 8003c90:	d105      	bne.n	8003c9e <__libc_init_array+0x2e>
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c98:	4798      	blx	r3
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7ee      	b.n	8003c7c <__libc_init_array+0xc>
 8003c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca2:	4798      	blx	r3
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	e7f2      	b.n	8003c8e <__libc_init_array+0x1e>
 8003ca8:	08005628 	.word	0x08005628
 8003cac:	08005628 	.word	0x08005628
 8003cb0:	08005628 	.word	0x08005628
 8003cb4:	0800562c 	.word	0x0800562c

08003cb8 <memcpy>:
 8003cb8:	440a      	add	r2, r1
 8003cba:	4291      	cmp	r1, r2
 8003cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cc0:	d100      	bne.n	8003cc4 <memcpy+0xc>
 8003cc2:	4770      	bx	lr
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cce:	4291      	cmp	r1, r2
 8003cd0:	d1f9      	bne.n	8003cc6 <memcpy+0xe>
 8003cd2:	bd10      	pop	{r4, pc}

08003cd4 <memset>:
 8003cd4:	4402      	add	r2, r0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <siprintf>:
 8003ce4:	b40e      	push	{r1, r2, r3}
 8003ce6:	b500      	push	{lr}
 8003ce8:	b09c      	sub	sp, #112	; 0x70
 8003cea:	ab1d      	add	r3, sp, #116	; 0x74
 8003cec:	9002      	str	r0, [sp, #8]
 8003cee:	9006      	str	r0, [sp, #24]
 8003cf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cf4:	4809      	ldr	r0, [pc, #36]	; (8003d1c <siprintf+0x38>)
 8003cf6:	9107      	str	r1, [sp, #28]
 8003cf8:	9104      	str	r1, [sp, #16]
 8003cfa:	4909      	ldr	r1, [pc, #36]	; (8003d20 <siprintf+0x3c>)
 8003cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d00:	9105      	str	r1, [sp, #20]
 8003d02:	6800      	ldr	r0, [r0, #0]
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	a902      	add	r1, sp, #8
 8003d08:	f000 fa9a 	bl	8004240 <_svfiprintf_r>
 8003d0c:	9b02      	ldr	r3, [sp, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	b01c      	add	sp, #112	; 0x70
 8003d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d18:	b003      	add	sp, #12
 8003d1a:	4770      	bx	lr
 8003d1c:	20000228 	.word	0x20000228
 8003d20:	ffff0208 	.word	0xffff0208

08003d24 <strcat>:
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4602      	mov	r2, r0
 8003d28:	7814      	ldrb	r4, [r2, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	3201      	adds	r2, #1
 8003d2e:	2c00      	cmp	r4, #0
 8003d30:	d1fa      	bne.n	8003d28 <strcat+0x4>
 8003d32:	3b01      	subs	r3, #1
 8003d34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	d1f9      	bne.n	8003d34 <strcat+0x10>
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <strchr>:
 8003d42:	b2c9      	uxtb	r1, r1
 8003d44:	4603      	mov	r3, r0
 8003d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4a:	b11a      	cbz	r2, 8003d54 <strchr+0x12>
 8003d4c:	428a      	cmp	r2, r1
 8003d4e:	d1f9      	bne.n	8003d44 <strchr+0x2>
 8003d50:	4618      	mov	r0, r3
 8003d52:	4770      	bx	lr
 8003d54:	2900      	cmp	r1, #0
 8003d56:	bf18      	it	ne
 8003d58:	2300      	movne	r3, #0
 8003d5a:	e7f9      	b.n	8003d50 <strchr+0xe>

08003d5c <strstr>:
 8003d5c:	780a      	ldrb	r2, [r1, #0]
 8003d5e:	b570      	push	{r4, r5, r6, lr}
 8003d60:	b96a      	cbnz	r2, 8003d7e <strstr+0x22>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d109      	bne.n	8003d7c <strstr+0x20>
 8003d68:	460c      	mov	r4, r1
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f6      	beq.n	8003d62 <strstr+0x6>
 8003d74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d78:	429e      	cmp	r6, r3
 8003d7a:	d0f7      	beq.n	8003d6c <strstr+0x10>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	7803      	ldrb	r3, [r0, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ef      	bne.n	8003d64 <strstr+0x8>
 8003d84:	4618      	mov	r0, r3
 8003d86:	e7ec      	b.n	8003d62 <strstr+0x6>

08003d88 <strtok>:
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <strtok+0x5c>)
 8003d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d8c:	681e      	ldr	r6, [r3, #0]
 8003d8e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003d90:	4605      	mov	r5, r0
 8003d92:	b9fc      	cbnz	r4, 8003dd4 <strtok+0x4c>
 8003d94:	2050      	movs	r0, #80	; 0x50
 8003d96:	9101      	str	r1, [sp, #4]
 8003d98:	f000 f90e 	bl	8003fb8 <malloc>
 8003d9c:	9901      	ldr	r1, [sp, #4]
 8003d9e:	65b0      	str	r0, [r6, #88]	; 0x58
 8003da0:	4602      	mov	r2, r0
 8003da2:	b920      	cbnz	r0, 8003dae <strtok+0x26>
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <strtok+0x60>)
 8003da6:	4811      	ldr	r0, [pc, #68]	; (8003dec <strtok+0x64>)
 8003da8:	2157      	movs	r1, #87	; 0x57
 8003daa:	f000 f8d5 	bl	8003f58 <__assert_func>
 8003dae:	e9c0 4400 	strd	r4, r4, [r0]
 8003db2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003db6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003dba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003dbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003dc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003dc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003dca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003dce:	6184      	str	r4, [r0, #24]
 8003dd0:	7704      	strb	r4, [r0, #28]
 8003dd2:	6244      	str	r4, [r0, #36]	; 0x24
 8003dd4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4628      	mov	r0, r5
 8003dda:	b002      	add	sp, #8
 8003ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003de0:	f000 b806 	b.w	8003df0 <__strtok_r>
 8003de4:	20000228 	.word	0x20000228
 8003de8:	080053dc 	.word	0x080053dc
 8003dec:	080053f3 	.word	0x080053f3

08003df0 <__strtok_r>:
 8003df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df2:	b908      	cbnz	r0, 8003df8 <__strtok_r+0x8>
 8003df4:	6810      	ldr	r0, [r2, #0]
 8003df6:	b188      	cbz	r0, 8003e1c <__strtok_r+0x2c>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e00:	460f      	mov	r7, r1
 8003e02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e06:	b91e      	cbnz	r6, 8003e10 <__strtok_r+0x20>
 8003e08:	b965      	cbnz	r5, 8003e24 <__strtok_r+0x34>
 8003e0a:	6015      	str	r5, [r2, #0]
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	e005      	b.n	8003e1c <__strtok_r+0x2c>
 8003e10:	42b5      	cmp	r5, r6
 8003e12:	d1f6      	bne.n	8003e02 <__strtok_r+0x12>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <__strtok_r+0xa>
 8003e18:	6014      	str	r4, [r2, #0]
 8003e1a:	7003      	strb	r3, [r0, #0]
 8003e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1e:	461c      	mov	r4, r3
 8003e20:	e00c      	b.n	8003e3c <__strtok_r+0x4c>
 8003e22:	b915      	cbnz	r5, 8003e2a <__strtok_r+0x3a>
 8003e24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e28:	460e      	mov	r6, r1
 8003e2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003e2e:	42ab      	cmp	r3, r5
 8003e30:	d1f7      	bne.n	8003e22 <__strtok_r+0x32>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f3      	beq.n	8003e1e <__strtok_r+0x2e>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003e3c:	6014      	str	r4, [r2, #0]
 8003e3e:	e7ed      	b.n	8003e1c <__strtok_r+0x2c>

08003e40 <_strtol_l.constprop.0>:
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e46:	d001      	beq.n	8003e4c <_strtol_l.constprop.0+0xc>
 8003e48:	2b24      	cmp	r3, #36	; 0x24
 8003e4a:	d906      	bls.n	8003e5a <_strtol_l.constprop.0+0x1a>
 8003e4c:	f7ff ff0a 	bl	8003c64 <__errno>
 8003e50:	2316      	movs	r3, #22
 8003e52:	6003      	str	r3, [r0, #0]
 8003e54:	2000      	movs	r0, #0
 8003e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003f40 <_strtol_l.constprop.0+0x100>
 8003e5e:	460d      	mov	r5, r1
 8003e60:	462e      	mov	r6, r5
 8003e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e66:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003e6a:	f017 0708 	ands.w	r7, r7, #8
 8003e6e:	d1f7      	bne.n	8003e60 <_strtol_l.constprop.0+0x20>
 8003e70:	2c2d      	cmp	r4, #45	; 0x2d
 8003e72:	d132      	bne.n	8003eda <_strtol_l.constprop.0+0x9a>
 8003e74:	782c      	ldrb	r4, [r5, #0]
 8003e76:	2701      	movs	r7, #1
 8003e78:	1cb5      	adds	r5, r6, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d05b      	beq.n	8003f36 <_strtol_l.constprop.0+0xf6>
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d109      	bne.n	8003e96 <_strtol_l.constprop.0+0x56>
 8003e82:	2c30      	cmp	r4, #48	; 0x30
 8003e84:	d107      	bne.n	8003e96 <_strtol_l.constprop.0+0x56>
 8003e86:	782c      	ldrb	r4, [r5, #0]
 8003e88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003e8c:	2c58      	cmp	r4, #88	; 0x58
 8003e8e:	d14d      	bne.n	8003f2c <_strtol_l.constprop.0+0xec>
 8003e90:	786c      	ldrb	r4, [r5, #1]
 8003e92:	2310      	movs	r3, #16
 8003e94:	3502      	adds	r5, #2
 8003e96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003e9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e9e:	f04f 0c00 	mov.w	ip, #0
 8003ea2:	fbb8 f9f3 	udiv	r9, r8, r3
 8003ea6:	4666      	mov	r6, ip
 8003ea8:	fb03 8a19 	mls	sl, r3, r9, r8
 8003eac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003eb0:	f1be 0f09 	cmp.w	lr, #9
 8003eb4:	d816      	bhi.n	8003ee4 <_strtol_l.constprop.0+0xa4>
 8003eb6:	4674      	mov	r4, lr
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	dd24      	ble.n	8003f06 <_strtol_l.constprop.0+0xc6>
 8003ebc:	f1bc 0f00 	cmp.w	ip, #0
 8003ec0:	db1e      	blt.n	8003f00 <_strtol_l.constprop.0+0xc0>
 8003ec2:	45b1      	cmp	r9, r6
 8003ec4:	d31c      	bcc.n	8003f00 <_strtol_l.constprop.0+0xc0>
 8003ec6:	d101      	bne.n	8003ecc <_strtol_l.constprop.0+0x8c>
 8003ec8:	45a2      	cmp	sl, r4
 8003eca:	db19      	blt.n	8003f00 <_strtol_l.constprop.0+0xc0>
 8003ecc:	fb06 4603 	mla	r6, r6, r3, r4
 8003ed0:	f04f 0c01 	mov.w	ip, #1
 8003ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ed8:	e7e8      	b.n	8003eac <_strtol_l.constprop.0+0x6c>
 8003eda:	2c2b      	cmp	r4, #43	; 0x2b
 8003edc:	bf04      	itt	eq
 8003ede:	782c      	ldrbeq	r4, [r5, #0]
 8003ee0:	1cb5      	addeq	r5, r6, #2
 8003ee2:	e7ca      	b.n	8003e7a <_strtol_l.constprop.0+0x3a>
 8003ee4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003ee8:	f1be 0f19 	cmp.w	lr, #25
 8003eec:	d801      	bhi.n	8003ef2 <_strtol_l.constprop.0+0xb2>
 8003eee:	3c37      	subs	r4, #55	; 0x37
 8003ef0:	e7e2      	b.n	8003eb8 <_strtol_l.constprop.0+0x78>
 8003ef2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003ef6:	f1be 0f19 	cmp.w	lr, #25
 8003efa:	d804      	bhi.n	8003f06 <_strtol_l.constprop.0+0xc6>
 8003efc:	3c57      	subs	r4, #87	; 0x57
 8003efe:	e7db      	b.n	8003eb8 <_strtol_l.constprop.0+0x78>
 8003f00:	f04f 3cff 	mov.w	ip, #4294967295
 8003f04:	e7e6      	b.n	8003ed4 <_strtol_l.constprop.0+0x94>
 8003f06:	f1bc 0f00 	cmp.w	ip, #0
 8003f0a:	da05      	bge.n	8003f18 <_strtol_l.constprop.0+0xd8>
 8003f0c:	2322      	movs	r3, #34	; 0x22
 8003f0e:	6003      	str	r3, [r0, #0]
 8003f10:	4646      	mov	r6, r8
 8003f12:	b942      	cbnz	r2, 8003f26 <_strtol_l.constprop.0+0xe6>
 8003f14:	4630      	mov	r0, r6
 8003f16:	e79e      	b.n	8003e56 <_strtol_l.constprop.0+0x16>
 8003f18:	b107      	cbz	r7, 8003f1c <_strtol_l.constprop.0+0xdc>
 8003f1a:	4276      	negs	r6, r6
 8003f1c:	2a00      	cmp	r2, #0
 8003f1e:	d0f9      	beq.n	8003f14 <_strtol_l.constprop.0+0xd4>
 8003f20:	f1bc 0f00 	cmp.w	ip, #0
 8003f24:	d000      	beq.n	8003f28 <_strtol_l.constprop.0+0xe8>
 8003f26:	1e69      	subs	r1, r5, #1
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	e7f3      	b.n	8003f14 <_strtol_l.constprop.0+0xd4>
 8003f2c:	2430      	movs	r4, #48	; 0x30
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1b1      	bne.n	8003e96 <_strtol_l.constprop.0+0x56>
 8003f32:	2308      	movs	r3, #8
 8003f34:	e7af      	b.n	8003e96 <_strtol_l.constprop.0+0x56>
 8003f36:	2c30      	cmp	r4, #48	; 0x30
 8003f38:	d0a5      	beq.n	8003e86 <_strtol_l.constprop.0+0x46>
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	e7ab      	b.n	8003e96 <_strtol_l.constprop.0+0x56>
 8003f3e:	bf00      	nop
 8003f40:	0800548d 	.word	0x0800548d

08003f44 <strtol>:
 8003f44:	4613      	mov	r3, r2
 8003f46:	460a      	mov	r2, r1
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4802      	ldr	r0, [pc, #8]	; (8003f54 <strtol+0x10>)
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f7ff bf77 	b.w	8003e40 <_strtol_l.constprop.0>
 8003f52:	bf00      	nop
 8003f54:	20000228 	.word	0x20000228

08003f58 <__assert_func>:
 8003f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <__assert_func+0x2c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4605      	mov	r5, r0
 8003f64:	68d8      	ldr	r0, [r3, #12]
 8003f66:	b14c      	cbz	r4, 8003f7c <__assert_func+0x24>
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <__assert_func+0x30>)
 8003f6a:	9100      	str	r1, [sp, #0]
 8003f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f70:	4906      	ldr	r1, [pc, #24]	; (8003f8c <__assert_func+0x34>)
 8003f72:	462b      	mov	r3, r5
 8003f74:	f000 f80e 	bl	8003f94 <fiprintf>
 8003f78:	f000 fe20 	bl	8004bbc <abort>
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <__assert_func+0x38>)
 8003f7e:	461c      	mov	r4, r3
 8003f80:	e7f3      	b.n	8003f6a <__assert_func+0x12>
 8003f82:	bf00      	nop
 8003f84:	20000228 	.word	0x20000228
 8003f88:	08005450 	.word	0x08005450
 8003f8c:	0800545d 	.word	0x0800545d
 8003f90:	0800548b 	.word	0x0800548b

08003f94 <fiprintf>:
 8003f94:	b40e      	push	{r1, r2, r3}
 8003f96:	b503      	push	{r0, r1, lr}
 8003f98:	4601      	mov	r1, r0
 8003f9a:	ab03      	add	r3, sp, #12
 8003f9c:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <fiprintf+0x20>)
 8003f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	f000 fa75 	bl	8004494 <_vfiprintf_r>
 8003faa:	b002      	add	sp, #8
 8003fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb0:	b003      	add	sp, #12
 8003fb2:	4770      	bx	lr
 8003fb4:	20000228 	.word	0x20000228

08003fb8 <malloc>:
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <malloc+0xc>)
 8003fba:	4601      	mov	r1, r0
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f000 b86f 	b.w	80040a0 <_malloc_r>
 8003fc2:	bf00      	nop
 8003fc4:	20000228 	.word	0x20000228

08003fc8 <_free_r>:
 8003fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	d044      	beq.n	8004058 <_free_r+0x90>
 8003fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd2:	9001      	str	r0, [sp, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8003fda:	bfb8      	it	lt
 8003fdc:	18e4      	addlt	r4, r4, r3
 8003fde:	f001 f82f 	bl	8005040 <__malloc_lock>
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <_free_r+0x94>)
 8003fe4:	9801      	ldr	r0, [sp, #4]
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	b933      	cbnz	r3, 8003ff8 <_free_r+0x30>
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	6014      	str	r4, [r2, #0]
 8003fee:	b003      	add	sp, #12
 8003ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ff4:	f001 b82a 	b.w	800504c <__malloc_unlock>
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d908      	bls.n	800400e <_free_r+0x46>
 8003ffc:	6825      	ldr	r5, [r4, #0]
 8003ffe:	1961      	adds	r1, r4, r5
 8004000:	428b      	cmp	r3, r1
 8004002:	bf01      	itttt	eq
 8004004:	6819      	ldreq	r1, [r3, #0]
 8004006:	685b      	ldreq	r3, [r3, #4]
 8004008:	1949      	addeq	r1, r1, r5
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	e7ed      	b.n	8003fea <_free_r+0x22>
 800400e:	461a      	mov	r2, r3
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	b10b      	cbz	r3, 8004018 <_free_r+0x50>
 8004014:	42a3      	cmp	r3, r4
 8004016:	d9fa      	bls.n	800400e <_free_r+0x46>
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	1855      	adds	r5, r2, r1
 800401c:	42a5      	cmp	r5, r4
 800401e:	d10b      	bne.n	8004038 <_free_r+0x70>
 8004020:	6824      	ldr	r4, [r4, #0]
 8004022:	4421      	add	r1, r4
 8004024:	1854      	adds	r4, r2, r1
 8004026:	42a3      	cmp	r3, r4
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	d1e0      	bne.n	8003fee <_free_r+0x26>
 800402c:	681c      	ldr	r4, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	6053      	str	r3, [r2, #4]
 8004032:	4421      	add	r1, r4
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	e7da      	b.n	8003fee <_free_r+0x26>
 8004038:	d902      	bls.n	8004040 <_free_r+0x78>
 800403a:	230c      	movs	r3, #12
 800403c:	6003      	str	r3, [r0, #0]
 800403e:	e7d6      	b.n	8003fee <_free_r+0x26>
 8004040:	6825      	ldr	r5, [r4, #0]
 8004042:	1961      	adds	r1, r4, r5
 8004044:	428b      	cmp	r3, r1
 8004046:	bf04      	itt	eq
 8004048:	6819      	ldreq	r1, [r3, #0]
 800404a:	685b      	ldreq	r3, [r3, #4]
 800404c:	6063      	str	r3, [r4, #4]
 800404e:	bf04      	itt	eq
 8004050:	1949      	addeq	r1, r1, r5
 8004052:	6021      	streq	r1, [r4, #0]
 8004054:	6054      	str	r4, [r2, #4]
 8004056:	e7ca      	b.n	8003fee <_free_r+0x26>
 8004058:	b003      	add	sp, #12
 800405a:	bd30      	pop	{r4, r5, pc}
 800405c:	20000c80 	.word	0x20000c80

08004060 <sbrk_aligned>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4e0e      	ldr	r6, [pc, #56]	; (800409c <sbrk_aligned+0x3c>)
 8004064:	460c      	mov	r4, r1
 8004066:	6831      	ldr	r1, [r6, #0]
 8004068:	4605      	mov	r5, r0
 800406a:	b911      	cbnz	r1, 8004072 <sbrk_aligned+0x12>
 800406c:	f000 fcd6 	bl	8004a1c <_sbrk_r>
 8004070:	6030      	str	r0, [r6, #0]
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 fcd1 	bl	8004a1c <_sbrk_r>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d00a      	beq.n	8004094 <sbrk_aligned+0x34>
 800407e:	1cc4      	adds	r4, r0, #3
 8004080:	f024 0403 	bic.w	r4, r4, #3
 8004084:	42a0      	cmp	r0, r4
 8004086:	d007      	beq.n	8004098 <sbrk_aligned+0x38>
 8004088:	1a21      	subs	r1, r4, r0
 800408a:	4628      	mov	r0, r5
 800408c:	f000 fcc6 	bl	8004a1c <_sbrk_r>
 8004090:	3001      	adds	r0, #1
 8004092:	d101      	bne.n	8004098 <sbrk_aligned+0x38>
 8004094:	f04f 34ff 	mov.w	r4, #4294967295
 8004098:	4620      	mov	r0, r4
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	20000c84 	.word	0x20000c84

080040a0 <_malloc_r>:
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	1ccd      	adds	r5, r1, #3
 80040a6:	f025 0503 	bic.w	r5, r5, #3
 80040aa:	3508      	adds	r5, #8
 80040ac:	2d0c      	cmp	r5, #12
 80040ae:	bf38      	it	cc
 80040b0:	250c      	movcc	r5, #12
 80040b2:	2d00      	cmp	r5, #0
 80040b4:	4607      	mov	r7, r0
 80040b6:	db01      	blt.n	80040bc <_malloc_r+0x1c>
 80040b8:	42a9      	cmp	r1, r5
 80040ba:	d905      	bls.n	80040c8 <_malloc_r+0x28>
 80040bc:	230c      	movs	r3, #12
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	2600      	movs	r6, #0
 80040c2:	4630      	mov	r0, r6
 80040c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c8:	4e2e      	ldr	r6, [pc, #184]	; (8004184 <_malloc_r+0xe4>)
 80040ca:	f000 ffb9 	bl	8005040 <__malloc_lock>
 80040ce:	6833      	ldr	r3, [r6, #0]
 80040d0:	461c      	mov	r4, r3
 80040d2:	bb34      	cbnz	r4, 8004122 <_malloc_r+0x82>
 80040d4:	4629      	mov	r1, r5
 80040d6:	4638      	mov	r0, r7
 80040d8:	f7ff ffc2 	bl	8004060 <sbrk_aligned>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	4604      	mov	r4, r0
 80040e0:	d14d      	bne.n	800417e <_malloc_r+0xde>
 80040e2:	6834      	ldr	r4, [r6, #0]
 80040e4:	4626      	mov	r6, r4
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	d140      	bne.n	800416c <_malloc_r+0xcc>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	4631      	mov	r1, r6
 80040ee:	4638      	mov	r0, r7
 80040f0:	eb04 0803 	add.w	r8, r4, r3
 80040f4:	f000 fc92 	bl	8004a1c <_sbrk_r>
 80040f8:	4580      	cmp	r8, r0
 80040fa:	d13a      	bne.n	8004172 <_malloc_r+0xd2>
 80040fc:	6821      	ldr	r1, [r4, #0]
 80040fe:	3503      	adds	r5, #3
 8004100:	1a6d      	subs	r5, r5, r1
 8004102:	f025 0503 	bic.w	r5, r5, #3
 8004106:	3508      	adds	r5, #8
 8004108:	2d0c      	cmp	r5, #12
 800410a:	bf38      	it	cc
 800410c:	250c      	movcc	r5, #12
 800410e:	4629      	mov	r1, r5
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ffa5 	bl	8004060 <sbrk_aligned>
 8004116:	3001      	adds	r0, #1
 8004118:	d02b      	beq.n	8004172 <_malloc_r+0xd2>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	442b      	add	r3, r5
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	e00e      	b.n	8004140 <_malloc_r+0xa0>
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	1b52      	subs	r2, r2, r5
 8004126:	d41e      	bmi.n	8004166 <_malloc_r+0xc6>
 8004128:	2a0b      	cmp	r2, #11
 800412a:	d916      	bls.n	800415a <_malloc_r+0xba>
 800412c:	1961      	adds	r1, r4, r5
 800412e:	42a3      	cmp	r3, r4
 8004130:	6025      	str	r5, [r4, #0]
 8004132:	bf18      	it	ne
 8004134:	6059      	strne	r1, [r3, #4]
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	bf08      	it	eq
 800413a:	6031      	streq	r1, [r6, #0]
 800413c:	5162      	str	r2, [r4, r5]
 800413e:	604b      	str	r3, [r1, #4]
 8004140:	4638      	mov	r0, r7
 8004142:	f104 060b 	add.w	r6, r4, #11
 8004146:	f000 ff81 	bl	800504c <__malloc_unlock>
 800414a:	f026 0607 	bic.w	r6, r6, #7
 800414e:	1d23      	adds	r3, r4, #4
 8004150:	1af2      	subs	r2, r6, r3
 8004152:	d0b6      	beq.n	80040c2 <_malloc_r+0x22>
 8004154:	1b9b      	subs	r3, r3, r6
 8004156:	50a3      	str	r3, [r4, r2]
 8004158:	e7b3      	b.n	80040c2 <_malloc_r+0x22>
 800415a:	6862      	ldr	r2, [r4, #4]
 800415c:	42a3      	cmp	r3, r4
 800415e:	bf0c      	ite	eq
 8004160:	6032      	streq	r2, [r6, #0]
 8004162:	605a      	strne	r2, [r3, #4]
 8004164:	e7ec      	b.n	8004140 <_malloc_r+0xa0>
 8004166:	4623      	mov	r3, r4
 8004168:	6864      	ldr	r4, [r4, #4]
 800416a:	e7b2      	b.n	80040d2 <_malloc_r+0x32>
 800416c:	4634      	mov	r4, r6
 800416e:	6876      	ldr	r6, [r6, #4]
 8004170:	e7b9      	b.n	80040e6 <_malloc_r+0x46>
 8004172:	230c      	movs	r3, #12
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4638      	mov	r0, r7
 8004178:	f000 ff68 	bl	800504c <__malloc_unlock>
 800417c:	e7a1      	b.n	80040c2 <_malloc_r+0x22>
 800417e:	6025      	str	r5, [r4, #0]
 8004180:	e7de      	b.n	8004140 <_malloc_r+0xa0>
 8004182:	bf00      	nop
 8004184:	20000c80 	.word	0x20000c80

08004188 <__ssputs_r>:
 8004188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	688e      	ldr	r6, [r1, #8]
 800418e:	429e      	cmp	r6, r3
 8004190:	4682      	mov	sl, r0
 8004192:	460c      	mov	r4, r1
 8004194:	4690      	mov	r8, r2
 8004196:	461f      	mov	r7, r3
 8004198:	d838      	bhi.n	800420c <__ssputs_r+0x84>
 800419a:	898a      	ldrh	r2, [r1, #12]
 800419c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041a0:	d032      	beq.n	8004208 <__ssputs_r+0x80>
 80041a2:	6825      	ldr	r5, [r4, #0]
 80041a4:	6909      	ldr	r1, [r1, #16]
 80041a6:	eba5 0901 	sub.w	r9, r5, r1
 80041aa:	6965      	ldr	r5, [r4, #20]
 80041ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b4:	3301      	adds	r3, #1
 80041b6:	444b      	add	r3, r9
 80041b8:	106d      	asrs	r5, r5, #1
 80041ba:	429d      	cmp	r5, r3
 80041bc:	bf38      	it	cc
 80041be:	461d      	movcc	r5, r3
 80041c0:	0553      	lsls	r3, r2, #21
 80041c2:	d531      	bpl.n	8004228 <__ssputs_r+0xa0>
 80041c4:	4629      	mov	r1, r5
 80041c6:	f7ff ff6b 	bl	80040a0 <_malloc_r>
 80041ca:	4606      	mov	r6, r0
 80041cc:	b950      	cbnz	r0, 80041e4 <__ssputs_r+0x5c>
 80041ce:	230c      	movs	r3, #12
 80041d0:	f8ca 3000 	str.w	r3, [sl]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e4:	6921      	ldr	r1, [r4, #16]
 80041e6:	464a      	mov	r2, r9
 80041e8:	f7ff fd66 	bl	8003cb8 <memcpy>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	6126      	str	r6, [r4, #16]
 80041fa:	6165      	str	r5, [r4, #20]
 80041fc:	444e      	add	r6, r9
 80041fe:	eba5 0509 	sub.w	r5, r5, r9
 8004202:	6026      	str	r6, [r4, #0]
 8004204:	60a5      	str	r5, [r4, #8]
 8004206:	463e      	mov	r6, r7
 8004208:	42be      	cmp	r6, r7
 800420a:	d900      	bls.n	800420e <__ssputs_r+0x86>
 800420c:	463e      	mov	r6, r7
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	4632      	mov	r2, r6
 8004212:	4641      	mov	r1, r8
 8004214:	f000 fefa 	bl	800500c <memmove>
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	1b9b      	subs	r3, r3, r6
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	4433      	add	r3, r6
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	2000      	movs	r0, #0
 8004226:	e7db      	b.n	80041e0 <__ssputs_r+0x58>
 8004228:	462a      	mov	r2, r5
 800422a:	f000 ff15 	bl	8005058 <_realloc_r>
 800422e:	4606      	mov	r6, r0
 8004230:	2800      	cmp	r0, #0
 8004232:	d1e1      	bne.n	80041f8 <__ssputs_r+0x70>
 8004234:	6921      	ldr	r1, [r4, #16]
 8004236:	4650      	mov	r0, sl
 8004238:	f7ff fec6 	bl	8003fc8 <_free_r>
 800423c:	e7c7      	b.n	80041ce <__ssputs_r+0x46>
	...

08004240 <_svfiprintf_r>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	4698      	mov	r8, r3
 8004246:	898b      	ldrh	r3, [r1, #12]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	b09d      	sub	sp, #116	; 0x74
 800424c:	4607      	mov	r7, r0
 800424e:	460d      	mov	r5, r1
 8004250:	4614      	mov	r4, r2
 8004252:	d50e      	bpl.n	8004272 <_svfiprintf_r+0x32>
 8004254:	690b      	ldr	r3, [r1, #16]
 8004256:	b963      	cbnz	r3, 8004272 <_svfiprintf_r+0x32>
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	f7ff ff21 	bl	80040a0 <_malloc_r>
 800425e:	6028      	str	r0, [r5, #0]
 8004260:	6128      	str	r0, [r5, #16]
 8004262:	b920      	cbnz	r0, 800426e <_svfiprintf_r+0x2e>
 8004264:	230c      	movs	r3, #12
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	e0d1      	b.n	8004412 <_svfiprintf_r+0x1d2>
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	616b      	str	r3, [r5, #20]
 8004272:	2300      	movs	r3, #0
 8004274:	9309      	str	r3, [sp, #36]	; 0x24
 8004276:	2320      	movs	r3, #32
 8004278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800427c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004280:	2330      	movs	r3, #48	; 0x30
 8004282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800442c <_svfiprintf_r+0x1ec>
 8004286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800428a:	f04f 0901 	mov.w	r9, #1
 800428e:	4623      	mov	r3, r4
 8004290:	469a      	mov	sl, r3
 8004292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004296:	b10a      	cbz	r2, 800429c <_svfiprintf_r+0x5c>
 8004298:	2a25      	cmp	r2, #37	; 0x25
 800429a:	d1f9      	bne.n	8004290 <_svfiprintf_r+0x50>
 800429c:	ebba 0b04 	subs.w	fp, sl, r4
 80042a0:	d00b      	beq.n	80042ba <_svfiprintf_r+0x7a>
 80042a2:	465b      	mov	r3, fp
 80042a4:	4622      	mov	r2, r4
 80042a6:	4629      	mov	r1, r5
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff ff6d 	bl	8004188 <__ssputs_r>
 80042ae:	3001      	adds	r0, #1
 80042b0:	f000 80aa 	beq.w	8004408 <_svfiprintf_r+0x1c8>
 80042b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042b6:	445a      	add	r2, fp
 80042b8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ba:	f89a 3000 	ldrb.w	r3, [sl]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80a2 	beq.w	8004408 <_svfiprintf_r+0x1c8>
 80042c4:	2300      	movs	r3, #0
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ce:	f10a 0a01 	add.w	sl, sl, #1
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	9307      	str	r3, [sp, #28]
 80042d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042da:	931a      	str	r3, [sp, #104]	; 0x68
 80042dc:	4654      	mov	r4, sl
 80042de:	2205      	movs	r2, #5
 80042e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e4:	4851      	ldr	r0, [pc, #324]	; (800442c <_svfiprintf_r+0x1ec>)
 80042e6:	f7fb ff83 	bl	80001f0 <memchr>
 80042ea:	9a04      	ldr	r2, [sp, #16]
 80042ec:	b9d8      	cbnz	r0, 8004326 <_svfiprintf_r+0xe6>
 80042ee:	06d0      	lsls	r0, r2, #27
 80042f0:	bf44      	itt	mi
 80042f2:	2320      	movmi	r3, #32
 80042f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f8:	0711      	lsls	r1, r2, #28
 80042fa:	bf44      	itt	mi
 80042fc:	232b      	movmi	r3, #43	; 0x2b
 80042fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004302:	f89a 3000 	ldrb.w	r3, [sl]
 8004306:	2b2a      	cmp	r3, #42	; 0x2a
 8004308:	d015      	beq.n	8004336 <_svfiprintf_r+0xf6>
 800430a:	9a07      	ldr	r2, [sp, #28]
 800430c:	4654      	mov	r4, sl
 800430e:	2000      	movs	r0, #0
 8004310:	f04f 0c0a 	mov.w	ip, #10
 8004314:	4621      	mov	r1, r4
 8004316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431a:	3b30      	subs	r3, #48	; 0x30
 800431c:	2b09      	cmp	r3, #9
 800431e:	d94e      	bls.n	80043be <_svfiprintf_r+0x17e>
 8004320:	b1b0      	cbz	r0, 8004350 <_svfiprintf_r+0x110>
 8004322:	9207      	str	r2, [sp, #28]
 8004324:	e014      	b.n	8004350 <_svfiprintf_r+0x110>
 8004326:	eba0 0308 	sub.w	r3, r0, r8
 800432a:	fa09 f303 	lsl.w	r3, r9, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	46a2      	mov	sl, r4
 8004334:	e7d2      	b.n	80042dc <_svfiprintf_r+0x9c>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	1d19      	adds	r1, r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	9103      	str	r1, [sp, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	bfbb      	ittet	lt
 8004342:	425b      	neglt	r3, r3
 8004344:	f042 0202 	orrlt.w	r2, r2, #2
 8004348:	9307      	strge	r3, [sp, #28]
 800434a:	9307      	strlt	r3, [sp, #28]
 800434c:	bfb8      	it	lt
 800434e:	9204      	strlt	r2, [sp, #16]
 8004350:	7823      	ldrb	r3, [r4, #0]
 8004352:	2b2e      	cmp	r3, #46	; 0x2e
 8004354:	d10c      	bne.n	8004370 <_svfiprintf_r+0x130>
 8004356:	7863      	ldrb	r3, [r4, #1]
 8004358:	2b2a      	cmp	r3, #42	; 0x2a
 800435a:	d135      	bne.n	80043c8 <_svfiprintf_r+0x188>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	9203      	str	r2, [sp, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bfb8      	it	lt
 8004368:	f04f 33ff 	movlt.w	r3, #4294967295
 800436c:	3402      	adds	r4, #2
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800443c <_svfiprintf_r+0x1fc>
 8004374:	7821      	ldrb	r1, [r4, #0]
 8004376:	2203      	movs	r2, #3
 8004378:	4650      	mov	r0, sl
 800437a:	f7fb ff39 	bl	80001f0 <memchr>
 800437e:	b140      	cbz	r0, 8004392 <_svfiprintf_r+0x152>
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	eba0 000a 	sub.w	r0, r0, sl
 8004386:	fa03 f000 	lsl.w	r0, r3, r0
 800438a:	9b04      	ldr	r3, [sp, #16]
 800438c:	4303      	orrs	r3, r0
 800438e:	3401      	adds	r4, #1
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004396:	4826      	ldr	r0, [pc, #152]	; (8004430 <_svfiprintf_r+0x1f0>)
 8004398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800439c:	2206      	movs	r2, #6
 800439e:	f7fb ff27 	bl	80001f0 <memchr>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d038      	beq.n	8004418 <_svfiprintf_r+0x1d8>
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <_svfiprintf_r+0x1f4>)
 80043a8:	bb1b      	cbnz	r3, 80043f2 <_svfiprintf_r+0x1b2>
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	3307      	adds	r3, #7
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	3308      	adds	r3, #8
 80043b4:	9303      	str	r3, [sp, #12]
 80043b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b8:	4433      	add	r3, r6
 80043ba:	9309      	str	r3, [sp, #36]	; 0x24
 80043bc:	e767      	b.n	800428e <_svfiprintf_r+0x4e>
 80043be:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c2:	460c      	mov	r4, r1
 80043c4:	2001      	movs	r0, #1
 80043c6:	e7a5      	b.n	8004314 <_svfiprintf_r+0xd4>
 80043c8:	2300      	movs	r3, #0
 80043ca:	3401      	adds	r4, #1
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	4619      	mov	r1, r3
 80043d0:	f04f 0c0a 	mov.w	ip, #10
 80043d4:	4620      	mov	r0, r4
 80043d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043da:	3a30      	subs	r2, #48	; 0x30
 80043dc:	2a09      	cmp	r2, #9
 80043de:	d903      	bls.n	80043e8 <_svfiprintf_r+0x1a8>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0c5      	beq.n	8004370 <_svfiprintf_r+0x130>
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	e7c3      	b.n	8004370 <_svfiprintf_r+0x130>
 80043e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ec:	4604      	mov	r4, r0
 80043ee:	2301      	movs	r3, #1
 80043f0:	e7f0      	b.n	80043d4 <_svfiprintf_r+0x194>
 80043f2:	ab03      	add	r3, sp, #12
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	462a      	mov	r2, r5
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <_svfiprintf_r+0x1f8>)
 80043fa:	a904      	add	r1, sp, #16
 80043fc:	4638      	mov	r0, r7
 80043fe:	f3af 8000 	nop.w
 8004402:	1c42      	adds	r2, r0, #1
 8004404:	4606      	mov	r6, r0
 8004406:	d1d6      	bne.n	80043b6 <_svfiprintf_r+0x176>
 8004408:	89ab      	ldrh	r3, [r5, #12]
 800440a:	065b      	lsls	r3, r3, #25
 800440c:	f53f af2c 	bmi.w	8004268 <_svfiprintf_r+0x28>
 8004410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004412:	b01d      	add	sp, #116	; 0x74
 8004414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004418:	ab03      	add	r3, sp, #12
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	462a      	mov	r2, r5
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <_svfiprintf_r+0x1f8>)
 8004420:	a904      	add	r1, sp, #16
 8004422:	4638      	mov	r0, r7
 8004424:	f000 f9d4 	bl	80047d0 <_printf_i>
 8004428:	e7eb      	b.n	8004402 <_svfiprintf_r+0x1c2>
 800442a:	bf00      	nop
 800442c:	0800558d 	.word	0x0800558d
 8004430:	08005597 	.word	0x08005597
 8004434:	00000000 	.word	0x00000000
 8004438:	08004189 	.word	0x08004189
 800443c:	08005593 	.word	0x08005593

08004440 <__sfputc_r>:
 8004440:	6893      	ldr	r3, [r2, #8]
 8004442:	3b01      	subs	r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	b410      	push	{r4}
 8004448:	6093      	str	r3, [r2, #8]
 800444a:	da08      	bge.n	800445e <__sfputc_r+0x1e>
 800444c:	6994      	ldr	r4, [r2, #24]
 800444e:	42a3      	cmp	r3, r4
 8004450:	db01      	blt.n	8004456 <__sfputc_r+0x16>
 8004452:	290a      	cmp	r1, #10
 8004454:	d103      	bne.n	800445e <__sfputc_r+0x1e>
 8004456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445a:	f000 baef 	b.w	8004a3c <__swbuf_r>
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	1c58      	adds	r0, r3, #1
 8004462:	6010      	str	r0, [r2, #0]
 8004464:	7019      	strb	r1, [r3, #0]
 8004466:	4608      	mov	r0, r1
 8004468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800446c:	4770      	bx	lr

0800446e <__sfputs_r>:
 800446e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	4614      	mov	r4, r2
 8004476:	18d5      	adds	r5, r2, r3
 8004478:	42ac      	cmp	r4, r5
 800447a:	d101      	bne.n	8004480 <__sfputs_r+0x12>
 800447c:	2000      	movs	r0, #0
 800447e:	e007      	b.n	8004490 <__sfputs_r+0x22>
 8004480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004484:	463a      	mov	r2, r7
 8004486:	4630      	mov	r0, r6
 8004488:	f7ff ffda 	bl	8004440 <__sfputc_r>
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	d1f3      	bne.n	8004478 <__sfputs_r+0xa>
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004494 <_vfiprintf_r>:
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	460d      	mov	r5, r1
 800449a:	b09d      	sub	sp, #116	; 0x74
 800449c:	4614      	mov	r4, r2
 800449e:	4698      	mov	r8, r3
 80044a0:	4606      	mov	r6, r0
 80044a2:	b118      	cbz	r0, 80044ac <_vfiprintf_r+0x18>
 80044a4:	6983      	ldr	r3, [r0, #24]
 80044a6:	b90b      	cbnz	r3, 80044ac <_vfiprintf_r+0x18>
 80044a8:	f000 fcaa 	bl	8004e00 <__sinit>
 80044ac:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <_vfiprintf_r+0x240>)
 80044ae:	429d      	cmp	r5, r3
 80044b0:	d11b      	bne.n	80044ea <_vfiprintf_r+0x56>
 80044b2:	6875      	ldr	r5, [r6, #4]
 80044b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b6:	07d9      	lsls	r1, r3, #31
 80044b8:	d405      	bmi.n	80044c6 <_vfiprintf_r+0x32>
 80044ba:	89ab      	ldrh	r3, [r5, #12]
 80044bc:	059a      	lsls	r2, r3, #22
 80044be:	d402      	bmi.n	80044c6 <_vfiprintf_r+0x32>
 80044c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044c2:	f000 fd3b 	bl	8004f3c <__retarget_lock_acquire_recursive>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	d501      	bpl.n	80044d0 <_vfiprintf_r+0x3c>
 80044cc:	692b      	ldr	r3, [r5, #16]
 80044ce:	b9eb      	cbnz	r3, 800450c <_vfiprintf_r+0x78>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 fb04 	bl	8004ae0 <__swsetup_r>
 80044d8:	b1c0      	cbz	r0, 800450c <_vfiprintf_r+0x78>
 80044da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044dc:	07dc      	lsls	r4, r3, #31
 80044de:	d50e      	bpl.n	80044fe <_vfiprintf_r+0x6a>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	b01d      	add	sp, #116	; 0x74
 80044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ea:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <_vfiprintf_r+0x244>)
 80044ec:	429d      	cmp	r5, r3
 80044ee:	d101      	bne.n	80044f4 <_vfiprintf_r+0x60>
 80044f0:	68b5      	ldr	r5, [r6, #8]
 80044f2:	e7df      	b.n	80044b4 <_vfiprintf_r+0x20>
 80044f4:	4b79      	ldr	r3, [pc, #484]	; (80046dc <_vfiprintf_r+0x248>)
 80044f6:	429d      	cmp	r5, r3
 80044f8:	bf08      	it	eq
 80044fa:	68f5      	ldreq	r5, [r6, #12]
 80044fc:	e7da      	b.n	80044b4 <_vfiprintf_r+0x20>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	0598      	lsls	r0, r3, #22
 8004502:	d4ed      	bmi.n	80044e0 <_vfiprintf_r+0x4c>
 8004504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004506:	f000 fd1a 	bl	8004f3e <__retarget_lock_release_recursive>
 800450a:	e7e9      	b.n	80044e0 <_vfiprintf_r+0x4c>
 800450c:	2300      	movs	r3, #0
 800450e:	9309      	str	r3, [sp, #36]	; 0x24
 8004510:	2320      	movs	r3, #32
 8004512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004516:	f8cd 800c 	str.w	r8, [sp, #12]
 800451a:	2330      	movs	r3, #48	; 0x30
 800451c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046e0 <_vfiprintf_r+0x24c>
 8004520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004524:	f04f 0901 	mov.w	r9, #1
 8004528:	4623      	mov	r3, r4
 800452a:	469a      	mov	sl, r3
 800452c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004530:	b10a      	cbz	r2, 8004536 <_vfiprintf_r+0xa2>
 8004532:	2a25      	cmp	r2, #37	; 0x25
 8004534:	d1f9      	bne.n	800452a <_vfiprintf_r+0x96>
 8004536:	ebba 0b04 	subs.w	fp, sl, r4
 800453a:	d00b      	beq.n	8004554 <_vfiprintf_r+0xc0>
 800453c:	465b      	mov	r3, fp
 800453e:	4622      	mov	r2, r4
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ff93 	bl	800446e <__sfputs_r>
 8004548:	3001      	adds	r0, #1
 800454a:	f000 80aa 	beq.w	80046a2 <_vfiprintf_r+0x20e>
 800454e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004550:	445a      	add	r2, fp
 8004552:	9209      	str	r2, [sp, #36]	; 0x24
 8004554:	f89a 3000 	ldrb.w	r3, [sl]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a2 	beq.w	80046a2 <_vfiprintf_r+0x20e>
 800455e:	2300      	movs	r3, #0
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004568:	f10a 0a01 	add.w	sl, sl, #1
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	9307      	str	r3, [sp, #28]
 8004570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004574:	931a      	str	r3, [sp, #104]	; 0x68
 8004576:	4654      	mov	r4, sl
 8004578:	2205      	movs	r2, #5
 800457a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457e:	4858      	ldr	r0, [pc, #352]	; (80046e0 <_vfiprintf_r+0x24c>)
 8004580:	f7fb fe36 	bl	80001f0 <memchr>
 8004584:	9a04      	ldr	r2, [sp, #16]
 8004586:	b9d8      	cbnz	r0, 80045c0 <_vfiprintf_r+0x12c>
 8004588:	06d1      	lsls	r1, r2, #27
 800458a:	bf44      	itt	mi
 800458c:	2320      	movmi	r3, #32
 800458e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004592:	0713      	lsls	r3, r2, #28
 8004594:	bf44      	itt	mi
 8004596:	232b      	movmi	r3, #43	; 0x2b
 8004598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459c:	f89a 3000 	ldrb.w	r3, [sl]
 80045a0:	2b2a      	cmp	r3, #42	; 0x2a
 80045a2:	d015      	beq.n	80045d0 <_vfiprintf_r+0x13c>
 80045a4:	9a07      	ldr	r2, [sp, #28]
 80045a6:	4654      	mov	r4, sl
 80045a8:	2000      	movs	r0, #0
 80045aa:	f04f 0c0a 	mov.w	ip, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045b4:	3b30      	subs	r3, #48	; 0x30
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d94e      	bls.n	8004658 <_vfiprintf_r+0x1c4>
 80045ba:	b1b0      	cbz	r0, 80045ea <_vfiprintf_r+0x156>
 80045bc:	9207      	str	r2, [sp, #28]
 80045be:	e014      	b.n	80045ea <_vfiprintf_r+0x156>
 80045c0:	eba0 0308 	sub.w	r3, r0, r8
 80045c4:	fa09 f303 	lsl.w	r3, r9, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	46a2      	mov	sl, r4
 80045ce:	e7d2      	b.n	8004576 <_vfiprintf_r+0xe2>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9103      	str	r1, [sp, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bfbb      	ittet	lt
 80045dc:	425b      	neglt	r3, r3
 80045de:	f042 0202 	orrlt.w	r2, r2, #2
 80045e2:	9307      	strge	r3, [sp, #28]
 80045e4:	9307      	strlt	r3, [sp, #28]
 80045e6:	bfb8      	it	lt
 80045e8:	9204      	strlt	r2, [sp, #16]
 80045ea:	7823      	ldrb	r3, [r4, #0]
 80045ec:	2b2e      	cmp	r3, #46	; 0x2e
 80045ee:	d10c      	bne.n	800460a <_vfiprintf_r+0x176>
 80045f0:	7863      	ldrb	r3, [r4, #1]
 80045f2:	2b2a      	cmp	r3, #42	; 0x2a
 80045f4:	d135      	bne.n	8004662 <_vfiprintf_r+0x1ce>
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	1d1a      	adds	r2, r3, #4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	9203      	str	r2, [sp, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bfb8      	it	lt
 8004602:	f04f 33ff 	movlt.w	r3, #4294967295
 8004606:	3402      	adds	r4, #2
 8004608:	9305      	str	r3, [sp, #20]
 800460a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046f0 <_vfiprintf_r+0x25c>
 800460e:	7821      	ldrb	r1, [r4, #0]
 8004610:	2203      	movs	r2, #3
 8004612:	4650      	mov	r0, sl
 8004614:	f7fb fdec 	bl	80001f0 <memchr>
 8004618:	b140      	cbz	r0, 800462c <_vfiprintf_r+0x198>
 800461a:	2340      	movs	r3, #64	; 0x40
 800461c:	eba0 000a 	sub.w	r0, r0, sl
 8004620:	fa03 f000 	lsl.w	r0, r3, r0
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	4303      	orrs	r3, r0
 8004628:	3401      	adds	r4, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004630:	482c      	ldr	r0, [pc, #176]	; (80046e4 <_vfiprintf_r+0x250>)
 8004632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004636:	2206      	movs	r2, #6
 8004638:	f7fb fdda 	bl	80001f0 <memchr>
 800463c:	2800      	cmp	r0, #0
 800463e:	d03f      	beq.n	80046c0 <_vfiprintf_r+0x22c>
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <_vfiprintf_r+0x254>)
 8004642:	bb1b      	cbnz	r3, 800468c <_vfiprintf_r+0x1f8>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	3307      	adds	r3, #7
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	3308      	adds	r3, #8
 800464e:	9303      	str	r3, [sp, #12]
 8004650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004652:	443b      	add	r3, r7
 8004654:	9309      	str	r3, [sp, #36]	; 0x24
 8004656:	e767      	b.n	8004528 <_vfiprintf_r+0x94>
 8004658:	fb0c 3202 	mla	r2, ip, r2, r3
 800465c:	460c      	mov	r4, r1
 800465e:	2001      	movs	r0, #1
 8004660:	e7a5      	b.n	80045ae <_vfiprintf_r+0x11a>
 8004662:	2300      	movs	r3, #0
 8004664:	3401      	adds	r4, #1
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	4619      	mov	r1, r3
 800466a:	f04f 0c0a 	mov.w	ip, #10
 800466e:	4620      	mov	r0, r4
 8004670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004674:	3a30      	subs	r2, #48	; 0x30
 8004676:	2a09      	cmp	r2, #9
 8004678:	d903      	bls.n	8004682 <_vfiprintf_r+0x1ee>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0c5      	beq.n	800460a <_vfiprintf_r+0x176>
 800467e:	9105      	str	r1, [sp, #20]
 8004680:	e7c3      	b.n	800460a <_vfiprintf_r+0x176>
 8004682:	fb0c 2101 	mla	r1, ip, r1, r2
 8004686:	4604      	mov	r4, r0
 8004688:	2301      	movs	r3, #1
 800468a:	e7f0      	b.n	800466e <_vfiprintf_r+0x1da>
 800468c:	ab03      	add	r3, sp, #12
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	462a      	mov	r2, r5
 8004692:	4b16      	ldr	r3, [pc, #88]	; (80046ec <_vfiprintf_r+0x258>)
 8004694:	a904      	add	r1, sp, #16
 8004696:	4630      	mov	r0, r6
 8004698:	f3af 8000 	nop.w
 800469c:	4607      	mov	r7, r0
 800469e:	1c78      	adds	r0, r7, #1
 80046a0:	d1d6      	bne.n	8004650 <_vfiprintf_r+0x1bc>
 80046a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046a4:	07d9      	lsls	r1, r3, #31
 80046a6:	d405      	bmi.n	80046b4 <_vfiprintf_r+0x220>
 80046a8:	89ab      	ldrh	r3, [r5, #12]
 80046aa:	059a      	lsls	r2, r3, #22
 80046ac:	d402      	bmi.n	80046b4 <_vfiprintf_r+0x220>
 80046ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046b0:	f000 fc45 	bl	8004f3e <__retarget_lock_release_recursive>
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	065b      	lsls	r3, r3, #25
 80046b8:	f53f af12 	bmi.w	80044e0 <_vfiprintf_r+0x4c>
 80046bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046be:	e711      	b.n	80044e4 <_vfiprintf_r+0x50>
 80046c0:	ab03      	add	r3, sp, #12
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	462a      	mov	r2, r5
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <_vfiprintf_r+0x258>)
 80046c8:	a904      	add	r1, sp, #16
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f880 	bl	80047d0 <_printf_i>
 80046d0:	e7e4      	b.n	800469c <_vfiprintf_r+0x208>
 80046d2:	bf00      	nop
 80046d4:	080055e0 	.word	0x080055e0
 80046d8:	08005600 	.word	0x08005600
 80046dc:	080055c0 	.word	0x080055c0
 80046e0:	0800558d 	.word	0x0800558d
 80046e4:	08005597 	.word	0x08005597
 80046e8:	00000000 	.word	0x00000000
 80046ec:	0800446f 	.word	0x0800446f
 80046f0:	08005593 	.word	0x08005593

080046f4 <_printf_common>:
 80046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	4616      	mov	r6, r2
 80046fa:	4699      	mov	r9, r3
 80046fc:	688a      	ldr	r2, [r1, #8]
 80046fe:	690b      	ldr	r3, [r1, #16]
 8004700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004704:	4293      	cmp	r3, r2
 8004706:	bfb8      	it	lt
 8004708:	4613      	movlt	r3, r2
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004710:	4607      	mov	r7, r0
 8004712:	460c      	mov	r4, r1
 8004714:	b10a      	cbz	r2, 800471a <_printf_common+0x26>
 8004716:	3301      	adds	r3, #1
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	0699      	lsls	r1, r3, #26
 800471e:	bf42      	ittt	mi
 8004720:	6833      	ldrmi	r3, [r6, #0]
 8004722:	3302      	addmi	r3, #2
 8004724:	6033      	strmi	r3, [r6, #0]
 8004726:	6825      	ldr	r5, [r4, #0]
 8004728:	f015 0506 	ands.w	r5, r5, #6
 800472c:	d106      	bne.n	800473c <_printf_common+0x48>
 800472e:	f104 0a19 	add.w	sl, r4, #25
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	6832      	ldr	r2, [r6, #0]
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	42ab      	cmp	r3, r5
 800473a:	dc26      	bgt.n	800478a <_printf_common+0x96>
 800473c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004740:	1e13      	subs	r3, r2, #0
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	bf18      	it	ne
 8004746:	2301      	movne	r3, #1
 8004748:	0692      	lsls	r2, r2, #26
 800474a:	d42b      	bmi.n	80047a4 <_printf_common+0xb0>
 800474c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004750:	4649      	mov	r1, r9
 8004752:	4638      	mov	r0, r7
 8004754:	47c0      	blx	r8
 8004756:	3001      	adds	r0, #1
 8004758:	d01e      	beq.n	8004798 <_printf_common+0xa4>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	68e5      	ldr	r5, [r4, #12]
 800475e:	6832      	ldr	r2, [r6, #0]
 8004760:	f003 0306 	and.w	r3, r3, #6
 8004764:	2b04      	cmp	r3, #4
 8004766:	bf08      	it	eq
 8004768:	1aad      	subeq	r5, r5, r2
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	bf0c      	ite	eq
 8004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004774:	2500      	movne	r5, #0
 8004776:	4293      	cmp	r3, r2
 8004778:	bfc4      	itt	gt
 800477a:	1a9b      	subgt	r3, r3, r2
 800477c:	18ed      	addgt	r5, r5, r3
 800477e:	2600      	movs	r6, #0
 8004780:	341a      	adds	r4, #26
 8004782:	42b5      	cmp	r5, r6
 8004784:	d11a      	bne.n	80047bc <_printf_common+0xc8>
 8004786:	2000      	movs	r0, #0
 8004788:	e008      	b.n	800479c <_printf_common+0xa8>
 800478a:	2301      	movs	r3, #1
 800478c:	4652      	mov	r2, sl
 800478e:	4649      	mov	r1, r9
 8004790:	4638      	mov	r0, r7
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d103      	bne.n	80047a0 <_printf_common+0xac>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7c6      	b.n	8004732 <_printf_common+0x3e>
 80047a4:	18e1      	adds	r1, r4, r3
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	2030      	movs	r0, #48	; 0x30
 80047aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ae:	4422      	add	r2, r4
 80047b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b8:	3302      	adds	r3, #2
 80047ba:	e7c7      	b.n	800474c <_printf_common+0x58>
 80047bc:	2301      	movs	r3, #1
 80047be:	4622      	mov	r2, r4
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d0e6      	beq.n	8004798 <_printf_common+0xa4>
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7d9      	b.n	8004782 <_printf_common+0x8e>
	...

080047d0 <_printf_i>:
 80047d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	7e0f      	ldrb	r7, [r1, #24]
 80047d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047d8:	2f78      	cmp	r7, #120	; 0x78
 80047da:	4691      	mov	r9, r2
 80047dc:	4680      	mov	r8, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	469a      	mov	sl, r3
 80047e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e6:	d807      	bhi.n	80047f8 <_printf_i+0x28>
 80047e8:	2f62      	cmp	r7, #98	; 0x62
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x32>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	f000 80d8 	beq.w	80049a2 <_printf_i+0x1d2>
 80047f2:	2f58      	cmp	r7, #88	; 0x58
 80047f4:	f000 80a3 	beq.w	800493e <_printf_i+0x16e>
 80047f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004800:	e03a      	b.n	8004878 <_printf_i+0xa8>
 8004802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004806:	2b15      	cmp	r3, #21
 8004808:	d8f6      	bhi.n	80047f8 <_printf_i+0x28>
 800480a:	a101      	add	r1, pc, #4	; (adr r1, 8004810 <_printf_i+0x40>)
 800480c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004810:	08004869 	.word	0x08004869
 8004814:	0800487d 	.word	0x0800487d
 8004818:	080047f9 	.word	0x080047f9
 800481c:	080047f9 	.word	0x080047f9
 8004820:	080047f9 	.word	0x080047f9
 8004824:	080047f9 	.word	0x080047f9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047f9 	.word	0x080047f9
 8004830:	080047f9 	.word	0x080047f9
 8004834:	080047f9 	.word	0x080047f9
 8004838:	080047f9 	.word	0x080047f9
 800483c:	08004989 	.word	0x08004989
 8004840:	080048ad 	.word	0x080048ad
 8004844:	0800496b 	.word	0x0800496b
 8004848:	080047f9 	.word	0x080047f9
 800484c:	080047f9 	.word	0x080047f9
 8004850:	080049ab 	.word	0x080049ab
 8004854:	080047f9 	.word	0x080047f9
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080047f9 	.word	0x080047f9
 8004860:	080047f9 	.word	0x080047f9
 8004864:	08004973 	.word	0x08004973
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	602a      	str	r2, [r5, #0]
 8004870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004878:	2301      	movs	r3, #1
 800487a:	e0a3      	b.n	80049c4 <_printf_i+0x1f4>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	6829      	ldr	r1, [r5, #0]
 8004880:	0606      	lsls	r6, r0, #24
 8004882:	f101 0304 	add.w	r3, r1, #4
 8004886:	d50a      	bpl.n	800489e <_printf_i+0xce>
 8004888:	680e      	ldr	r6, [r1, #0]
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	2e00      	cmp	r6, #0
 800488e:	da03      	bge.n	8004898 <_printf_i+0xc8>
 8004890:	232d      	movs	r3, #45	; 0x2d
 8004892:	4276      	negs	r6, r6
 8004894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004898:	485e      	ldr	r0, [pc, #376]	; (8004a14 <_printf_i+0x244>)
 800489a:	230a      	movs	r3, #10
 800489c:	e019      	b.n	80048d2 <_printf_i+0x102>
 800489e:	680e      	ldr	r6, [r1, #0]
 80048a0:	602b      	str	r3, [r5, #0]
 80048a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048a6:	bf18      	it	ne
 80048a8:	b236      	sxthne	r6, r6
 80048aa:	e7ef      	b.n	800488c <_printf_i+0xbc>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6820      	ldr	r0, [r4, #0]
 80048b0:	1d19      	adds	r1, r3, #4
 80048b2:	6029      	str	r1, [r5, #0]
 80048b4:	0601      	lsls	r1, r0, #24
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0xec>
 80048b8:	681e      	ldr	r6, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0xf2>
 80048bc:	0646      	lsls	r6, r0, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0xe8>
 80048c0:	881e      	ldrh	r6, [r3, #0]
 80048c2:	4854      	ldr	r0, [pc, #336]	; (8004a14 <_printf_i+0x244>)
 80048c4:	2f6f      	cmp	r7, #111	; 0x6f
 80048c6:	bf0c      	ite	eq
 80048c8:	2308      	moveq	r3, #8
 80048ca:	230a      	movne	r3, #10
 80048cc:	2100      	movs	r1, #0
 80048ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048d2:	6865      	ldr	r5, [r4, #4]
 80048d4:	60a5      	str	r5, [r4, #8]
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	bfa2      	ittt	ge
 80048da:	6821      	ldrge	r1, [r4, #0]
 80048dc:	f021 0104 	bicge.w	r1, r1, #4
 80048e0:	6021      	strge	r1, [r4, #0]
 80048e2:	b90e      	cbnz	r6, 80048e8 <_printf_i+0x118>
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	d04d      	beq.n	8004984 <_printf_i+0x1b4>
 80048e8:	4615      	mov	r5, r2
 80048ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ee:	fb03 6711 	mls	r7, r3, r1, r6
 80048f2:	5dc7      	ldrb	r7, [r0, r7]
 80048f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048f8:	4637      	mov	r7, r6
 80048fa:	42bb      	cmp	r3, r7
 80048fc:	460e      	mov	r6, r1
 80048fe:	d9f4      	bls.n	80048ea <_printf_i+0x11a>
 8004900:	2b08      	cmp	r3, #8
 8004902:	d10b      	bne.n	800491c <_printf_i+0x14c>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	07de      	lsls	r6, r3, #31
 8004908:	d508      	bpl.n	800491c <_printf_i+0x14c>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	6861      	ldr	r1, [r4, #4]
 800490e:	4299      	cmp	r1, r3
 8004910:	bfde      	ittt	le
 8004912:	2330      	movle	r3, #48	; 0x30
 8004914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800491c:	1b52      	subs	r2, r2, r5
 800491e:	6122      	str	r2, [r4, #16]
 8004920:	f8cd a000 	str.w	sl, [sp]
 8004924:	464b      	mov	r3, r9
 8004926:	aa03      	add	r2, sp, #12
 8004928:	4621      	mov	r1, r4
 800492a:	4640      	mov	r0, r8
 800492c:	f7ff fee2 	bl	80046f4 <_printf_common>
 8004930:	3001      	adds	r0, #1
 8004932:	d14c      	bne.n	80049ce <_printf_i+0x1fe>
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	b004      	add	sp, #16
 800493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493e:	4835      	ldr	r0, [pc, #212]	; (8004a14 <_printf_i+0x244>)
 8004940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004944:	6829      	ldr	r1, [r5, #0]
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f851 6b04 	ldr.w	r6, [r1], #4
 800494c:	6029      	str	r1, [r5, #0]
 800494e:	061d      	lsls	r5, r3, #24
 8004950:	d514      	bpl.n	800497c <_printf_i+0x1ac>
 8004952:	07df      	lsls	r7, r3, #31
 8004954:	bf44      	itt	mi
 8004956:	f043 0320 	orrmi.w	r3, r3, #32
 800495a:	6023      	strmi	r3, [r4, #0]
 800495c:	b91e      	cbnz	r6, 8004966 <_printf_i+0x196>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	f023 0320 	bic.w	r3, r3, #32
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	2310      	movs	r3, #16
 8004968:	e7b0      	b.n	80048cc <_printf_i+0xfc>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	2378      	movs	r3, #120	; 0x78
 8004974:	4828      	ldr	r0, [pc, #160]	; (8004a18 <_printf_i+0x248>)
 8004976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800497a:	e7e3      	b.n	8004944 <_printf_i+0x174>
 800497c:	0659      	lsls	r1, r3, #25
 800497e:	bf48      	it	mi
 8004980:	b2b6      	uxthmi	r6, r6
 8004982:	e7e6      	b.n	8004952 <_printf_i+0x182>
 8004984:	4615      	mov	r5, r2
 8004986:	e7bb      	b.n	8004900 <_printf_i+0x130>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	6826      	ldr	r6, [r4, #0]
 800498c:	6961      	ldr	r1, [r4, #20]
 800498e:	1d18      	adds	r0, r3, #4
 8004990:	6028      	str	r0, [r5, #0]
 8004992:	0635      	lsls	r5, r6, #24
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	d501      	bpl.n	800499c <_printf_i+0x1cc>
 8004998:	6019      	str	r1, [r3, #0]
 800499a:	e002      	b.n	80049a2 <_printf_i+0x1d2>
 800499c:	0670      	lsls	r0, r6, #25
 800499e:	d5fb      	bpl.n	8004998 <_printf_i+0x1c8>
 80049a0:	8019      	strh	r1, [r3, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	4615      	mov	r5, r2
 80049a8:	e7ba      	b.n	8004920 <_printf_i+0x150>
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	1d1a      	adds	r2, r3, #4
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	681d      	ldr	r5, [r3, #0]
 80049b2:	6862      	ldr	r2, [r4, #4]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7fb fc1a 	bl	80001f0 <memchr>
 80049bc:	b108      	cbz	r0, 80049c2 <_printf_i+0x1f2>
 80049be:	1b40      	subs	r0, r0, r5
 80049c0:	6060      	str	r0, [r4, #4]
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	2300      	movs	r3, #0
 80049c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049cc:	e7a8      	b.n	8004920 <_printf_i+0x150>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	462a      	mov	r2, r5
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	47d0      	blx	sl
 80049d8:	3001      	adds	r0, #1
 80049da:	d0ab      	beq.n	8004934 <_printf_i+0x164>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	079b      	lsls	r3, r3, #30
 80049e0:	d413      	bmi.n	8004a0a <_printf_i+0x23a>
 80049e2:	68e0      	ldr	r0, [r4, #12]
 80049e4:	9b03      	ldr	r3, [sp, #12]
 80049e6:	4298      	cmp	r0, r3
 80049e8:	bfb8      	it	lt
 80049ea:	4618      	movlt	r0, r3
 80049ec:	e7a4      	b.n	8004938 <_printf_i+0x168>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4632      	mov	r2, r6
 80049f2:	4649      	mov	r1, r9
 80049f4:	4640      	mov	r0, r8
 80049f6:	47d0      	blx	sl
 80049f8:	3001      	adds	r0, #1
 80049fa:	d09b      	beq.n	8004934 <_printf_i+0x164>
 80049fc:	3501      	adds	r5, #1
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	9903      	ldr	r1, [sp, #12]
 8004a02:	1a5b      	subs	r3, r3, r1
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dcf2      	bgt.n	80049ee <_printf_i+0x21e>
 8004a08:	e7eb      	b.n	80049e2 <_printf_i+0x212>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	f104 0619 	add.w	r6, r4, #25
 8004a10:	e7f5      	b.n	80049fe <_printf_i+0x22e>
 8004a12:	bf00      	nop
 8004a14:	0800559e 	.word	0x0800559e
 8004a18:	080055af 	.word	0x080055af

08004a1c <_sbrk_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d06      	ldr	r5, [pc, #24]	; (8004a38 <_sbrk_r+0x1c>)
 8004a20:	2300      	movs	r3, #0
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	f7fc f964 	bl	8000cf4 <_sbrk>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d102      	bne.n	8004a36 <_sbrk_r+0x1a>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	b103      	cbz	r3, 8004a36 <_sbrk_r+0x1a>
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	20000c8c 	.word	0x20000c8c

08004a3c <__swbuf_r>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	460e      	mov	r6, r1
 8004a40:	4614      	mov	r4, r2
 8004a42:	4605      	mov	r5, r0
 8004a44:	b118      	cbz	r0, 8004a4e <__swbuf_r+0x12>
 8004a46:	6983      	ldr	r3, [r0, #24]
 8004a48:	b90b      	cbnz	r3, 8004a4e <__swbuf_r+0x12>
 8004a4a:	f000 f9d9 	bl	8004e00 <__sinit>
 8004a4e:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <__swbuf_r+0x98>)
 8004a50:	429c      	cmp	r4, r3
 8004a52:	d12b      	bne.n	8004aac <__swbuf_r+0x70>
 8004a54:	686c      	ldr	r4, [r5, #4]
 8004a56:	69a3      	ldr	r3, [r4, #24]
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	071a      	lsls	r2, r3, #28
 8004a5e:	d52f      	bpl.n	8004ac0 <__swbuf_r+0x84>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	b36b      	cbz	r3, 8004ac0 <__swbuf_r+0x84>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	6820      	ldr	r0, [r4, #0]
 8004a68:	1ac0      	subs	r0, r0, r3
 8004a6a:	6963      	ldr	r3, [r4, #20]
 8004a6c:	b2f6      	uxtb	r6, r6
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	4637      	mov	r7, r6
 8004a72:	dc04      	bgt.n	8004a7e <__swbuf_r+0x42>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f92e 	bl	8004cd8 <_fflush_r>
 8004a7c:	bb30      	cbnz	r0, 8004acc <__swbuf_r+0x90>
 8004a7e:	68a3      	ldr	r3, [r4, #8]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	60a3      	str	r3, [r4, #8]
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	701e      	strb	r6, [r3, #0]
 8004a8c:	6963      	ldr	r3, [r4, #20]
 8004a8e:	3001      	adds	r0, #1
 8004a90:	4283      	cmp	r3, r0
 8004a92:	d004      	beq.n	8004a9e <__swbuf_r+0x62>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	07db      	lsls	r3, r3, #31
 8004a98:	d506      	bpl.n	8004aa8 <__swbuf_r+0x6c>
 8004a9a:	2e0a      	cmp	r6, #10
 8004a9c:	d104      	bne.n	8004aa8 <__swbuf_r+0x6c>
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 f919 	bl	8004cd8 <_fflush_r>
 8004aa6:	b988      	cbnz	r0, 8004acc <__swbuf_r+0x90>
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <__swbuf_r+0x9c>)
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d101      	bne.n	8004ab6 <__swbuf_r+0x7a>
 8004ab2:	68ac      	ldr	r4, [r5, #8]
 8004ab4:	e7cf      	b.n	8004a56 <__swbuf_r+0x1a>
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <__swbuf_r+0xa0>)
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	bf08      	it	eq
 8004abc:	68ec      	ldreq	r4, [r5, #12]
 8004abe:	e7ca      	b.n	8004a56 <__swbuf_r+0x1a>
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 f80c 	bl	8004ae0 <__swsetup_r>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d0cb      	beq.n	8004a64 <__swbuf_r+0x28>
 8004acc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ad0:	e7ea      	b.n	8004aa8 <__swbuf_r+0x6c>
 8004ad2:	bf00      	nop
 8004ad4:	080055e0 	.word	0x080055e0
 8004ad8:	08005600 	.word	0x08005600
 8004adc:	080055c0 	.word	0x080055c0

08004ae0 <__swsetup_r>:
 8004ae0:	4b32      	ldr	r3, [pc, #200]	; (8004bac <__swsetup_r+0xcc>)
 8004ae2:	b570      	push	{r4, r5, r6, lr}
 8004ae4:	681d      	ldr	r5, [r3, #0]
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	b125      	cbz	r5, 8004af6 <__swsetup_r+0x16>
 8004aec:	69ab      	ldr	r3, [r5, #24]
 8004aee:	b913      	cbnz	r3, 8004af6 <__swsetup_r+0x16>
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 f985 	bl	8004e00 <__sinit>
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <__swsetup_r+0xd0>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	d10f      	bne.n	8004b1c <__swsetup_r+0x3c>
 8004afc:	686c      	ldr	r4, [r5, #4]
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b04:	0719      	lsls	r1, r3, #28
 8004b06:	d42c      	bmi.n	8004b62 <__swsetup_r+0x82>
 8004b08:	06dd      	lsls	r5, r3, #27
 8004b0a:	d411      	bmi.n	8004b30 <__swsetup_r+0x50>
 8004b0c:	2309      	movs	r3, #9
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1a:	e03e      	b.n	8004b9a <__swsetup_r+0xba>
 8004b1c:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <__swsetup_r+0xd4>)
 8004b1e:	429c      	cmp	r4, r3
 8004b20:	d101      	bne.n	8004b26 <__swsetup_r+0x46>
 8004b22:	68ac      	ldr	r4, [r5, #8]
 8004b24:	e7eb      	b.n	8004afe <__swsetup_r+0x1e>
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <__swsetup_r+0xd8>)
 8004b28:	429c      	cmp	r4, r3
 8004b2a:	bf08      	it	eq
 8004b2c:	68ec      	ldreq	r4, [r5, #12]
 8004b2e:	e7e6      	b.n	8004afe <__swsetup_r+0x1e>
 8004b30:	0758      	lsls	r0, r3, #29
 8004b32:	d512      	bpl.n	8004b5a <__swsetup_r+0x7a>
 8004b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b36:	b141      	cbz	r1, 8004b4a <__swsetup_r+0x6a>
 8004b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d002      	beq.n	8004b46 <__swsetup_r+0x66>
 8004b40:	4630      	mov	r0, r6
 8004b42:	f7ff fa41 	bl	8003fc8 <_free_r>
 8004b46:	2300      	movs	r3, #0
 8004b48:	6363      	str	r3, [r4, #52]	; 0x34
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	2300      	movs	r3, #0
 8004b54:	6063      	str	r3, [r4, #4]
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	b94b      	cbnz	r3, 8004b7a <__swsetup_r+0x9a>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b70:	d003      	beq.n	8004b7a <__swsetup_r+0x9a>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 fa09 	bl	8004f8c <__smakebuf_r>
 8004b7a:	89a0      	ldrh	r0, [r4, #12]
 8004b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b80:	f010 0301 	ands.w	r3, r0, #1
 8004b84:	d00a      	beq.n	8004b9c <__swsetup_r+0xbc>
 8004b86:	2300      	movs	r3, #0
 8004b88:	60a3      	str	r3, [r4, #8]
 8004b8a:	6963      	ldr	r3, [r4, #20]
 8004b8c:	425b      	negs	r3, r3
 8004b8e:	61a3      	str	r3, [r4, #24]
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	b943      	cbnz	r3, 8004ba6 <__swsetup_r+0xc6>
 8004b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b98:	d1ba      	bne.n	8004b10 <__swsetup_r+0x30>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	0781      	lsls	r1, r0, #30
 8004b9e:	bf58      	it	pl
 8004ba0:	6963      	ldrpl	r3, [r4, #20]
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	e7f4      	b.n	8004b90 <__swsetup_r+0xb0>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e7f7      	b.n	8004b9a <__swsetup_r+0xba>
 8004baa:	bf00      	nop
 8004bac:	20000228 	.word	0x20000228
 8004bb0:	080055e0 	.word	0x080055e0
 8004bb4:	08005600 	.word	0x08005600
 8004bb8:	080055c0 	.word	0x080055c0

08004bbc <abort>:
 8004bbc:	b508      	push	{r3, lr}
 8004bbe:	2006      	movs	r0, #6
 8004bc0:	f000 faa2 	bl	8005108 <raise>
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fc f81d 	bl	8000c04 <_exit>
	...

08004bcc <__sflush_r>:
 8004bcc:	898a      	ldrh	r2, [r1, #12]
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	0710      	lsls	r0, r2, #28
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	d458      	bmi.n	8004c8c <__sflush_r+0xc0>
 8004bda:	684b      	ldr	r3, [r1, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dc05      	bgt.n	8004bec <__sflush_r+0x20>
 8004be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	dc02      	bgt.n	8004bec <__sflush_r+0x20>
 8004be6:	2000      	movs	r0, #0
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d0f9      	beq.n	8004be6 <__sflush_r+0x1a>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bf8:	682f      	ldr	r7, [r5, #0]
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	d032      	beq.n	8004c64 <__sflush_r+0x98>
 8004bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	075a      	lsls	r2, r3, #29
 8004c04:	d505      	bpl.n	8004c12 <__sflush_r+0x46>
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	1ac0      	subs	r0, r0, r3
 8004c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c0c:	b10b      	cbz	r3, 8004c12 <__sflush_r+0x46>
 8004c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c10:	1ac0      	subs	r0, r0, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	4602      	mov	r2, r0
 8004c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c18:	6a21      	ldr	r1, [r4, #32]
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	47b0      	blx	r6
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	d106      	bne.n	8004c32 <__sflush_r+0x66>
 8004c24:	6829      	ldr	r1, [r5, #0]
 8004c26:	291d      	cmp	r1, #29
 8004c28:	d82c      	bhi.n	8004c84 <__sflush_r+0xb8>
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <__sflush_r+0x108>)
 8004c2c:	40ca      	lsrs	r2, r1
 8004c2e:	07d6      	lsls	r6, r2, #31
 8004c30:	d528      	bpl.n	8004c84 <__sflush_r+0xb8>
 8004c32:	2200      	movs	r2, #0
 8004c34:	6062      	str	r2, [r4, #4]
 8004c36:	04d9      	lsls	r1, r3, #19
 8004c38:	6922      	ldr	r2, [r4, #16]
 8004c3a:	6022      	str	r2, [r4, #0]
 8004c3c:	d504      	bpl.n	8004c48 <__sflush_r+0x7c>
 8004c3e:	1c42      	adds	r2, r0, #1
 8004c40:	d101      	bne.n	8004c46 <__sflush_r+0x7a>
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	b903      	cbnz	r3, 8004c48 <__sflush_r+0x7c>
 8004c46:	6560      	str	r0, [r4, #84]	; 0x54
 8004c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4a:	602f      	str	r7, [r5, #0]
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d0ca      	beq.n	8004be6 <__sflush_r+0x1a>
 8004c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c54:	4299      	cmp	r1, r3
 8004c56:	d002      	beq.n	8004c5e <__sflush_r+0x92>
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f7ff f9b5 	bl	8003fc8 <_free_r>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	6360      	str	r0, [r4, #52]	; 0x34
 8004c62:	e7c1      	b.n	8004be8 <__sflush_r+0x1c>
 8004c64:	6a21      	ldr	r1, [r4, #32]
 8004c66:	2301      	movs	r3, #1
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b0      	blx	r6
 8004c6c:	1c41      	adds	r1, r0, #1
 8004c6e:	d1c7      	bne.n	8004c00 <__sflush_r+0x34>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0c4      	beq.n	8004c00 <__sflush_r+0x34>
 8004c76:	2b1d      	cmp	r3, #29
 8004c78:	d001      	beq.n	8004c7e <__sflush_r+0xb2>
 8004c7a:	2b16      	cmp	r3, #22
 8004c7c:	d101      	bne.n	8004c82 <__sflush_r+0xb6>
 8004c7e:	602f      	str	r7, [r5, #0]
 8004c80:	e7b1      	b.n	8004be6 <__sflush_r+0x1a>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	e7ad      	b.n	8004be8 <__sflush_r+0x1c>
 8004c8c:	690f      	ldr	r7, [r1, #16]
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	d0a9      	beq.n	8004be6 <__sflush_r+0x1a>
 8004c92:	0793      	lsls	r3, r2, #30
 8004c94:	680e      	ldr	r6, [r1, #0]
 8004c96:	bf08      	it	eq
 8004c98:	694b      	ldreq	r3, [r1, #20]
 8004c9a:	600f      	str	r7, [r1, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	eba6 0807 	sub.w	r8, r6, r7
 8004ca4:	608b      	str	r3, [r1, #8]
 8004ca6:	f1b8 0f00 	cmp.w	r8, #0
 8004caa:	dd9c      	ble.n	8004be6 <__sflush_r+0x1a>
 8004cac:	6a21      	ldr	r1, [r4, #32]
 8004cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cb0:	4643      	mov	r3, r8
 8004cb2:	463a      	mov	r2, r7
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b0      	blx	r6
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	dc06      	bgt.n	8004cca <__sflush_r+0xfe>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e78e      	b.n	8004be8 <__sflush_r+0x1c>
 8004cca:	4407      	add	r7, r0
 8004ccc:	eba8 0800 	sub.w	r8, r8, r0
 8004cd0:	e7e9      	b.n	8004ca6 <__sflush_r+0xda>
 8004cd2:	bf00      	nop
 8004cd4:	20400001 	.word	0x20400001

08004cd8 <_fflush_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	690b      	ldr	r3, [r1, #16]
 8004cdc:	4605      	mov	r5, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	b913      	cbnz	r3, 8004ce8 <_fflush_r+0x10>
 8004ce2:	2500      	movs	r5, #0
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	b118      	cbz	r0, 8004cf2 <_fflush_r+0x1a>
 8004cea:	6983      	ldr	r3, [r0, #24]
 8004cec:	b90b      	cbnz	r3, 8004cf2 <_fflush_r+0x1a>
 8004cee:	f000 f887 	bl	8004e00 <__sinit>
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <_fflush_r+0x6c>)
 8004cf4:	429c      	cmp	r4, r3
 8004cf6:	d11b      	bne.n	8004d30 <_fflush_r+0x58>
 8004cf8:	686c      	ldr	r4, [r5, #4]
 8004cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ef      	beq.n	8004ce2 <_fflush_r+0xa>
 8004d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d04:	07d0      	lsls	r0, r2, #31
 8004d06:	d404      	bmi.n	8004d12 <_fflush_r+0x3a>
 8004d08:	0599      	lsls	r1, r3, #22
 8004d0a:	d402      	bmi.n	8004d12 <_fflush_r+0x3a>
 8004d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d0e:	f000 f915 	bl	8004f3c <__retarget_lock_acquire_recursive>
 8004d12:	4628      	mov	r0, r5
 8004d14:	4621      	mov	r1, r4
 8004d16:	f7ff ff59 	bl	8004bcc <__sflush_r>
 8004d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d1c:	07da      	lsls	r2, r3, #31
 8004d1e:	4605      	mov	r5, r0
 8004d20:	d4e0      	bmi.n	8004ce4 <_fflush_r+0xc>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	059b      	lsls	r3, r3, #22
 8004d26:	d4dd      	bmi.n	8004ce4 <_fflush_r+0xc>
 8004d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2a:	f000 f908 	bl	8004f3e <__retarget_lock_release_recursive>
 8004d2e:	e7d9      	b.n	8004ce4 <_fflush_r+0xc>
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <_fflush_r+0x70>)
 8004d32:	429c      	cmp	r4, r3
 8004d34:	d101      	bne.n	8004d3a <_fflush_r+0x62>
 8004d36:	68ac      	ldr	r4, [r5, #8]
 8004d38:	e7df      	b.n	8004cfa <_fflush_r+0x22>
 8004d3a:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <_fflush_r+0x74>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	bf08      	it	eq
 8004d40:	68ec      	ldreq	r4, [r5, #12]
 8004d42:	e7da      	b.n	8004cfa <_fflush_r+0x22>
 8004d44:	080055e0 	.word	0x080055e0
 8004d48:	08005600 	.word	0x08005600
 8004d4c:	080055c0 	.word	0x080055c0

08004d50 <std>:
 8004d50:	2300      	movs	r3, #0
 8004d52:	b510      	push	{r4, lr}
 8004d54:	4604      	mov	r4, r0
 8004d56:	e9c0 3300 	strd	r3, r3, [r0]
 8004d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5e:	6083      	str	r3, [r0, #8]
 8004d60:	8181      	strh	r1, [r0, #12]
 8004d62:	6643      	str	r3, [r0, #100]	; 0x64
 8004d64:	81c2      	strh	r2, [r0, #14]
 8004d66:	6183      	str	r3, [r0, #24]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	305c      	adds	r0, #92	; 0x5c
 8004d6e:	f7fe ffb1 	bl	8003cd4 <memset>
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <std+0x38>)
 8004d74:	6263      	str	r3, [r4, #36]	; 0x24
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <std+0x3c>)
 8004d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <std+0x40>)
 8004d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <std+0x44>)
 8004d80:	6224      	str	r4, [r4, #32]
 8004d82:	6323      	str	r3, [r4, #48]	; 0x30
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	bf00      	nop
 8004d88:	08005141 	.word	0x08005141
 8004d8c:	08005163 	.word	0x08005163
 8004d90:	0800519b 	.word	0x0800519b
 8004d94:	080051bf 	.word	0x080051bf

08004d98 <_cleanup_r>:
 8004d98:	4901      	ldr	r1, [pc, #4]	; (8004da0 <_cleanup_r+0x8>)
 8004d9a:	f000 b8af 	b.w	8004efc <_fwalk_reent>
 8004d9e:	bf00      	nop
 8004da0:	08004cd9 	.word	0x08004cd9

08004da4 <__sfmoreglue>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	2268      	movs	r2, #104	; 0x68
 8004da8:	1e4d      	subs	r5, r1, #1
 8004daa:	4355      	muls	r5, r2
 8004dac:	460e      	mov	r6, r1
 8004dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004db2:	f7ff f975 	bl	80040a0 <_malloc_r>
 8004db6:	4604      	mov	r4, r0
 8004db8:	b140      	cbz	r0, 8004dcc <__sfmoreglue+0x28>
 8004dba:	2100      	movs	r1, #0
 8004dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8004dc0:	300c      	adds	r0, #12
 8004dc2:	60a0      	str	r0, [r4, #8]
 8004dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dc8:	f7fe ff84 	bl	8003cd4 <memset>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bd70      	pop	{r4, r5, r6, pc}

08004dd0 <__sfp_lock_acquire>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__sfp_lock_acquire+0x8>)
 8004dd2:	f000 b8b3 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	20000c89 	.word	0x20000c89

08004ddc <__sfp_lock_release>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__sfp_lock_release+0x8>)
 8004dde:	f000 b8ae 	b.w	8004f3e <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	20000c89 	.word	0x20000c89

08004de8 <__sinit_lock_acquire>:
 8004de8:	4801      	ldr	r0, [pc, #4]	; (8004df0 <__sinit_lock_acquire+0x8>)
 8004dea:	f000 b8a7 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 8004dee:	bf00      	nop
 8004df0:	20000c8a 	.word	0x20000c8a

08004df4 <__sinit_lock_release>:
 8004df4:	4801      	ldr	r0, [pc, #4]	; (8004dfc <__sinit_lock_release+0x8>)
 8004df6:	f000 b8a2 	b.w	8004f3e <__retarget_lock_release_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	20000c8a 	.word	0x20000c8a

08004e00 <__sinit>:
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4604      	mov	r4, r0
 8004e04:	f7ff fff0 	bl	8004de8 <__sinit_lock_acquire>
 8004e08:	69a3      	ldr	r3, [r4, #24]
 8004e0a:	b11b      	cbz	r3, 8004e14 <__sinit+0x14>
 8004e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e10:	f7ff bff0 	b.w	8004df4 <__sinit_lock_release>
 8004e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e18:	6523      	str	r3, [r4, #80]	; 0x50
 8004e1a:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <__sinit+0x68>)
 8004e1c:	4a13      	ldr	r2, [pc, #76]	; (8004e6c <__sinit+0x6c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	bf04      	itt	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	61a3      	streq	r3, [r4, #24]
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 f820 	bl	8004e70 <__sfp>
 8004e30:	6060      	str	r0, [r4, #4]
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 f81c 	bl	8004e70 <__sfp>
 8004e38:	60a0      	str	r0, [r4, #8]
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 f818 	bl	8004e70 <__sfp>
 8004e40:	2200      	movs	r2, #0
 8004e42:	60e0      	str	r0, [r4, #12]
 8004e44:	2104      	movs	r1, #4
 8004e46:	6860      	ldr	r0, [r4, #4]
 8004e48:	f7ff ff82 	bl	8004d50 <std>
 8004e4c:	68a0      	ldr	r0, [r4, #8]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2109      	movs	r1, #9
 8004e52:	f7ff ff7d 	bl	8004d50 <std>
 8004e56:	68e0      	ldr	r0, [r4, #12]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	2112      	movs	r1, #18
 8004e5c:	f7ff ff78 	bl	8004d50 <std>
 8004e60:	2301      	movs	r3, #1
 8004e62:	61a3      	str	r3, [r4, #24]
 8004e64:	e7d2      	b.n	8004e0c <__sinit+0xc>
 8004e66:	bf00      	nop
 8004e68:	080053d8 	.word	0x080053d8
 8004e6c:	08004d99 	.word	0x08004d99

08004e70 <__sfp>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	4607      	mov	r7, r0
 8004e74:	f7ff ffac 	bl	8004dd0 <__sfp_lock_acquire>
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <__sfp+0x84>)
 8004e7a:	681e      	ldr	r6, [r3, #0]
 8004e7c:	69b3      	ldr	r3, [r6, #24]
 8004e7e:	b913      	cbnz	r3, 8004e86 <__sfp+0x16>
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff ffbd 	bl	8004e00 <__sinit>
 8004e86:	3648      	adds	r6, #72	; 0x48
 8004e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	d503      	bpl.n	8004e98 <__sfp+0x28>
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	b30b      	cbz	r3, 8004ed8 <__sfp+0x68>
 8004e94:	6836      	ldr	r6, [r6, #0]
 8004e96:	e7f7      	b.n	8004e88 <__sfp+0x18>
 8004e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e9c:	b9d5      	cbnz	r5, 8004ed4 <__sfp+0x64>
 8004e9e:	4b16      	ldr	r3, [pc, #88]	; (8004ef8 <__sfp+0x88>)
 8004ea0:	60e3      	str	r3, [r4, #12]
 8004ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ea8:	f000 f847 	bl	8004f3a <__retarget_lock_init_recursive>
 8004eac:	f7ff ff96 	bl	8004ddc <__sfp_lock_release>
 8004eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004eb8:	6025      	str	r5, [r4, #0]
 8004eba:	61a5      	str	r5, [r4, #24]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ec4:	f7fe ff06 	bl	8003cd4 <memset>
 8004ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed4:	3468      	adds	r4, #104	; 0x68
 8004ed6:	e7d9      	b.n	8004e8c <__sfp+0x1c>
 8004ed8:	2104      	movs	r1, #4
 8004eda:	4638      	mov	r0, r7
 8004edc:	f7ff ff62 	bl	8004da4 <__sfmoreglue>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	6030      	str	r0, [r6, #0]
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d1d5      	bne.n	8004e94 <__sfp+0x24>
 8004ee8:	f7ff ff78 	bl	8004ddc <__sfp_lock_release>
 8004eec:	230c      	movs	r3, #12
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	e7ee      	b.n	8004ed0 <__sfp+0x60>
 8004ef2:	bf00      	nop
 8004ef4:	080053d8 	.word	0x080053d8
 8004ef8:	ffff0001 	.word	0xffff0001

08004efc <_fwalk_reent>:
 8004efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f00:	4606      	mov	r6, r0
 8004f02:	4688      	mov	r8, r1
 8004f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f08:	2700      	movs	r7, #0
 8004f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8004f12:	d505      	bpl.n	8004f20 <_fwalk_reent+0x24>
 8004f14:	6824      	ldr	r4, [r4, #0]
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	d1f7      	bne.n	8004f0a <_fwalk_reent+0xe>
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f20:	89ab      	ldrh	r3, [r5, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d907      	bls.n	8004f36 <_fwalk_reent+0x3a>
 8004f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	d003      	beq.n	8004f36 <_fwalk_reent+0x3a>
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4630      	mov	r0, r6
 8004f32:	47c0      	blx	r8
 8004f34:	4307      	orrs	r7, r0
 8004f36:	3568      	adds	r5, #104	; 0x68
 8004f38:	e7e9      	b.n	8004f0e <_fwalk_reent+0x12>

08004f3a <__retarget_lock_init_recursive>:
 8004f3a:	4770      	bx	lr

08004f3c <__retarget_lock_acquire_recursive>:
 8004f3c:	4770      	bx	lr

08004f3e <__retarget_lock_release_recursive>:
 8004f3e:	4770      	bx	lr

08004f40 <__swhatbuf_r>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	460e      	mov	r6, r1
 8004f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	b096      	sub	sp, #88	; 0x58
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	461d      	mov	r5, r3
 8004f50:	da08      	bge.n	8004f64 <__swhatbuf_r+0x24>
 8004f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	602a      	str	r2, [r5, #0]
 8004f5a:	061a      	lsls	r2, r3, #24
 8004f5c:	d410      	bmi.n	8004f80 <__swhatbuf_r+0x40>
 8004f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f62:	e00e      	b.n	8004f82 <__swhatbuf_r+0x42>
 8004f64:	466a      	mov	r2, sp
 8004f66:	f000 f951 	bl	800520c <_fstat_r>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	dbf1      	blt.n	8004f52 <__swhatbuf_r+0x12>
 8004f6e:	9a01      	ldr	r2, [sp, #4]
 8004f70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f78:	425a      	negs	r2, r3
 8004f7a:	415a      	adcs	r2, r3
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	e7ee      	b.n	8004f5e <__swhatbuf_r+0x1e>
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	2000      	movs	r0, #0
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	b016      	add	sp, #88	; 0x58
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f8c <__smakebuf_r>:
 8004f8c:	898b      	ldrh	r3, [r1, #12]
 8004f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f90:	079d      	lsls	r5, r3, #30
 8004f92:	4606      	mov	r6, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	d507      	bpl.n	8004fa8 <__smakebuf_r+0x1c>
 8004f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	6163      	str	r3, [r4, #20]
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	ab01      	add	r3, sp, #4
 8004faa:	466a      	mov	r2, sp
 8004fac:	f7ff ffc8 	bl	8004f40 <__swhatbuf_r>
 8004fb0:	9900      	ldr	r1, [sp, #0]
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff f873 	bl	80040a0 <_malloc_r>
 8004fba:	b948      	cbnz	r0, 8004fd0 <__smakebuf_r+0x44>
 8004fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc0:	059a      	lsls	r2, r3, #22
 8004fc2:	d4ef      	bmi.n	8004fa4 <__smakebuf_r+0x18>
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	e7e3      	b.n	8004f98 <__smakebuf_r+0xc>
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <__smakebuf_r+0x7c>)
 8004fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	6020      	str	r0, [r4, #0]
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	81a3      	strh	r3, [r4, #12]
 8004fde:	9b00      	ldr	r3, [sp, #0]
 8004fe0:	6163      	str	r3, [r4, #20]
 8004fe2:	9b01      	ldr	r3, [sp, #4]
 8004fe4:	6120      	str	r0, [r4, #16]
 8004fe6:	b15b      	cbz	r3, 8005000 <__smakebuf_r+0x74>
 8004fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f91f 	bl	8005230 <_isatty_r>
 8004ff2:	b128      	cbz	r0, 8005000 <__smakebuf_r+0x74>
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	89a0      	ldrh	r0, [r4, #12]
 8005002:	4305      	orrs	r5, r0
 8005004:	81a5      	strh	r5, [r4, #12]
 8005006:	e7cd      	b.n	8004fa4 <__smakebuf_r+0x18>
 8005008:	08004d99 	.word	0x08004d99

0800500c <memmove>:
 800500c:	4288      	cmp	r0, r1
 800500e:	b510      	push	{r4, lr}
 8005010:	eb01 0402 	add.w	r4, r1, r2
 8005014:	d902      	bls.n	800501c <memmove+0x10>
 8005016:	4284      	cmp	r4, r0
 8005018:	4623      	mov	r3, r4
 800501a:	d807      	bhi.n	800502c <memmove+0x20>
 800501c:	1e43      	subs	r3, r0, #1
 800501e:	42a1      	cmp	r1, r4
 8005020:	d008      	beq.n	8005034 <memmove+0x28>
 8005022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800502a:	e7f8      	b.n	800501e <memmove+0x12>
 800502c:	4402      	add	r2, r0
 800502e:	4601      	mov	r1, r0
 8005030:	428a      	cmp	r2, r1
 8005032:	d100      	bne.n	8005036 <memmove+0x2a>
 8005034:	bd10      	pop	{r4, pc}
 8005036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800503a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800503e:	e7f7      	b.n	8005030 <memmove+0x24>

08005040 <__malloc_lock>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__malloc_lock+0x8>)
 8005042:	f7ff bf7b 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	20000c88 	.word	0x20000c88

0800504c <__malloc_unlock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_unlock+0x8>)
 800504e:	f7ff bf76 	b.w	8004f3e <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	20000c88 	.word	0x20000c88

08005058 <_realloc_r>:
 8005058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505c:	4680      	mov	r8, r0
 800505e:	4614      	mov	r4, r2
 8005060:	460e      	mov	r6, r1
 8005062:	b921      	cbnz	r1, 800506e <_realloc_r+0x16>
 8005064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005068:	4611      	mov	r1, r2
 800506a:	f7ff b819 	b.w	80040a0 <_malloc_r>
 800506e:	b92a      	cbnz	r2, 800507c <_realloc_r+0x24>
 8005070:	f7fe ffaa 	bl	8003fc8 <_free_r>
 8005074:	4625      	mov	r5, r4
 8005076:	4628      	mov	r0, r5
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	f000 f8fa 	bl	8005274 <_malloc_usable_size_r>
 8005080:	4284      	cmp	r4, r0
 8005082:	4607      	mov	r7, r0
 8005084:	d802      	bhi.n	800508c <_realloc_r+0x34>
 8005086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800508a:	d812      	bhi.n	80050b2 <_realloc_r+0x5a>
 800508c:	4621      	mov	r1, r4
 800508e:	4640      	mov	r0, r8
 8005090:	f7ff f806 	bl	80040a0 <_malloc_r>
 8005094:	4605      	mov	r5, r0
 8005096:	2800      	cmp	r0, #0
 8005098:	d0ed      	beq.n	8005076 <_realloc_r+0x1e>
 800509a:	42bc      	cmp	r4, r7
 800509c:	4622      	mov	r2, r4
 800509e:	4631      	mov	r1, r6
 80050a0:	bf28      	it	cs
 80050a2:	463a      	movcs	r2, r7
 80050a4:	f7fe fe08 	bl	8003cb8 <memcpy>
 80050a8:	4631      	mov	r1, r6
 80050aa:	4640      	mov	r0, r8
 80050ac:	f7fe ff8c 	bl	8003fc8 <_free_r>
 80050b0:	e7e1      	b.n	8005076 <_realloc_r+0x1e>
 80050b2:	4635      	mov	r5, r6
 80050b4:	e7df      	b.n	8005076 <_realloc_r+0x1e>

080050b6 <_raise_r>:
 80050b6:	291f      	cmp	r1, #31
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4604      	mov	r4, r0
 80050bc:	460d      	mov	r5, r1
 80050be:	d904      	bls.n	80050ca <_raise_r+0x14>
 80050c0:	2316      	movs	r3, #22
 80050c2:	6003      	str	r3, [r0, #0]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	bd38      	pop	{r3, r4, r5, pc}
 80050ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80050cc:	b112      	cbz	r2, 80050d4 <_raise_r+0x1e>
 80050ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050d2:	b94b      	cbnz	r3, 80050e8 <_raise_r+0x32>
 80050d4:	4620      	mov	r0, r4
 80050d6:	f000 f831 	bl	800513c <_getpid_r>
 80050da:	462a      	mov	r2, r5
 80050dc:	4601      	mov	r1, r0
 80050de:	4620      	mov	r0, r4
 80050e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e4:	f000 b818 	b.w	8005118 <_kill_r>
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d00a      	beq.n	8005102 <_raise_r+0x4c>
 80050ec:	1c59      	adds	r1, r3, #1
 80050ee:	d103      	bne.n	80050f8 <_raise_r+0x42>
 80050f0:	2316      	movs	r3, #22
 80050f2:	6003      	str	r3, [r0, #0]
 80050f4:	2001      	movs	r0, #1
 80050f6:	e7e7      	b.n	80050c8 <_raise_r+0x12>
 80050f8:	2400      	movs	r4, #0
 80050fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050fe:	4628      	mov	r0, r5
 8005100:	4798      	blx	r3
 8005102:	2000      	movs	r0, #0
 8005104:	e7e0      	b.n	80050c8 <_raise_r+0x12>
	...

08005108 <raise>:
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <raise+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f7ff bfd2 	b.w	80050b6 <_raise_r>
 8005112:	bf00      	nop
 8005114:	20000228 	.word	0x20000228

08005118 <_kill_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d07      	ldr	r5, [pc, #28]	; (8005138 <_kill_r+0x20>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	f7fb fd5d 	bl	8000be4 <_kill>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	d102      	bne.n	8005134 <_kill_r+0x1c>
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	b103      	cbz	r3, 8005134 <_kill_r+0x1c>
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	bd38      	pop	{r3, r4, r5, pc}
 8005136:	bf00      	nop
 8005138:	20000c8c 	.word	0x20000c8c

0800513c <_getpid_r>:
 800513c:	f7fb bd4a 	b.w	8000bd4 <_getpid>

08005140 <__sread>:
 8005140:	b510      	push	{r4, lr}
 8005142:	460c      	mov	r4, r1
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	f000 f89c 	bl	8005284 <_read_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	bfab      	itete	ge
 8005150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005152:	89a3      	ldrhlt	r3, [r4, #12]
 8005154:	181b      	addge	r3, r3, r0
 8005156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800515a:	bfac      	ite	ge
 800515c:	6563      	strge	r3, [r4, #84]	; 0x54
 800515e:	81a3      	strhlt	r3, [r4, #12]
 8005160:	bd10      	pop	{r4, pc}

08005162 <__swrite>:
 8005162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005166:	461f      	mov	r7, r3
 8005168:	898b      	ldrh	r3, [r1, #12]
 800516a:	05db      	lsls	r3, r3, #23
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	4616      	mov	r6, r2
 8005172:	d505      	bpl.n	8005180 <__swrite+0x1e>
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	2302      	movs	r3, #2
 800517a:	2200      	movs	r2, #0
 800517c:	f000 f868 	bl	8005250 <_lseek_r>
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	4632      	mov	r2, r6
 800518e:	463b      	mov	r3, r7
 8005190:	4628      	mov	r0, r5
 8005192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	f000 b817 	b.w	80051c8 <_write_r>

0800519a <__sseek>:
 800519a:	b510      	push	{r4, lr}
 800519c:	460c      	mov	r4, r1
 800519e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a2:	f000 f855 	bl	8005250 <_lseek_r>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	bf15      	itete	ne
 80051ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80051ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051b6:	81a3      	strheq	r3, [r4, #12]
 80051b8:	bf18      	it	ne
 80051ba:	81a3      	strhne	r3, [r4, #12]
 80051bc:	bd10      	pop	{r4, pc}

080051be <__sclose>:
 80051be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c2:	f000 b813 	b.w	80051ec <_close_r>
	...

080051c8 <_write_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d07      	ldr	r5, [pc, #28]	; (80051e8 <_write_r+0x20>)
 80051cc:	4604      	mov	r4, r0
 80051ce:	4608      	mov	r0, r1
 80051d0:	4611      	mov	r1, r2
 80051d2:	2200      	movs	r2, #0
 80051d4:	602a      	str	r2, [r5, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f7fb fd3b 	bl	8000c52 <_write>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_write_r+0x1e>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_write_r+0x1e>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000c8c 	.word	0x20000c8c

080051ec <_close_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_close_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fd47 	bl	8000c8a <_close>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_close_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_close_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000c8c 	.word	0x20000c8c

0800520c <_fstat_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	; (800522c <_fstat_r+0x20>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f7fb fd42 	bl	8000ca2 <_fstat>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d102      	bne.n	8005228 <_fstat_r+0x1c>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b103      	cbz	r3, 8005228 <_fstat_r+0x1c>
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20000c8c 	.word	0x20000c8c

08005230 <_isatty_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d06      	ldr	r5, [pc, #24]	; (800524c <_isatty_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fd41 	bl	8000cc2 <_isatty>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_isatty_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_isatty_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000c8c 	.word	0x20000c8c

08005250 <_lseek_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d07      	ldr	r5, [pc, #28]	; (8005270 <_lseek_r+0x20>)
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	2200      	movs	r2, #0
 800525c:	602a      	str	r2, [r5, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	f7fb fd3a 	bl	8000cd8 <_lseek>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_lseek_r+0x1e>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_lseek_r+0x1e>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000c8c 	.word	0x20000c8c

08005274 <_malloc_usable_size_r>:
 8005274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005278:	1f18      	subs	r0, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	bfbc      	itt	lt
 800527e:	580b      	ldrlt	r3, [r1, r0]
 8005280:	18c0      	addlt	r0, r0, r3
 8005282:	4770      	bx	lr

08005284 <_read_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d07      	ldr	r5, [pc, #28]	; (80052a4 <_read_r+0x20>)
 8005288:	4604      	mov	r4, r0
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	2200      	movs	r2, #0
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f7fb fcc0 	bl	8000c18 <_read>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_read_r+0x1e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_read_r+0x1e>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000c8c 	.word	0x20000c8c

080052a8 <_init>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr

080052b4 <_fini>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr
